
STM32F411RE_AS5600.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000090f0  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08009288  08009288  00019288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080092a8  080092a8  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  080092a8  080092a8  000192a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080092b0  080092b0  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080092b0  080092b0  000192b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080092b4  080092b4  000192b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080092b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000054c  2000005c  08009314  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005a8  08009314  000205a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013164  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000027d9  00000000  00000000  00033233  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011a0  00000000  00000000  00035a10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000df0  00000000  00000000  00036bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018b30  00000000  00000000  000379a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015cda  00000000  00000000  000504d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009d8ca  00000000  00000000  000661aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004f4c  00000000  00000000  00103a74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  001089c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000005c 	.word	0x2000005c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08009270 	.word	0x08009270

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000060 	.word	0x20000060
 80001d4:	08009270 	.word	0x08009270

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2uiz>:
 8000974:	004a      	lsls	r2, r1, #1
 8000976:	d211      	bcs.n	800099c <__aeabi_d2uiz+0x28>
 8000978:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800097c:	d211      	bcs.n	80009a2 <__aeabi_d2uiz+0x2e>
 800097e:	d50d      	bpl.n	800099c <__aeabi_d2uiz+0x28>
 8000980:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000984:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000988:	d40e      	bmi.n	80009a8 <__aeabi_d2uiz+0x34>
 800098a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000992:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000996:	fa23 f002 	lsr.w	r0, r3, r2
 800099a:	4770      	bx	lr
 800099c:	f04f 0000 	mov.w	r0, #0
 80009a0:	4770      	bx	lr
 80009a2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009a6:	d102      	bne.n	80009ae <__aeabi_d2uiz+0x3a>
 80009a8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ac:	4770      	bx	lr
 80009ae:	f04f 0000 	mov.w	r0, #0
 80009b2:	4770      	bx	lr

080009b4 <__aeabi_uldivmod>:
 80009b4:	b953      	cbnz	r3, 80009cc <__aeabi_uldivmod+0x18>
 80009b6:	b94a      	cbnz	r2, 80009cc <__aeabi_uldivmod+0x18>
 80009b8:	2900      	cmp	r1, #0
 80009ba:	bf08      	it	eq
 80009bc:	2800      	cmpeq	r0, #0
 80009be:	bf1c      	itt	ne
 80009c0:	f04f 31ff 	movne.w	r1, #4294967295
 80009c4:	f04f 30ff 	movne.w	r0, #4294967295
 80009c8:	f000 b970 	b.w	8000cac <__aeabi_idiv0>
 80009cc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009d4:	f000 f806 	bl	80009e4 <__udivmoddi4>
 80009d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009e0:	b004      	add	sp, #16
 80009e2:	4770      	bx	lr

080009e4 <__udivmoddi4>:
 80009e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009e8:	9e08      	ldr	r6, [sp, #32]
 80009ea:	460d      	mov	r5, r1
 80009ec:	4604      	mov	r4, r0
 80009ee:	460f      	mov	r7, r1
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d14a      	bne.n	8000a8a <__udivmoddi4+0xa6>
 80009f4:	428a      	cmp	r2, r1
 80009f6:	4694      	mov	ip, r2
 80009f8:	d965      	bls.n	8000ac6 <__udivmoddi4+0xe2>
 80009fa:	fab2 f382 	clz	r3, r2
 80009fe:	b143      	cbz	r3, 8000a12 <__udivmoddi4+0x2e>
 8000a00:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a04:	f1c3 0220 	rsb	r2, r3, #32
 8000a08:	409f      	lsls	r7, r3
 8000a0a:	fa20 f202 	lsr.w	r2, r0, r2
 8000a0e:	4317      	orrs	r7, r2
 8000a10:	409c      	lsls	r4, r3
 8000a12:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000a16:	fa1f f58c 	uxth.w	r5, ip
 8000a1a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000a1e:	0c22      	lsrs	r2, r4, #16
 8000a20:	fb0e 7711 	mls	r7, lr, r1, r7
 8000a24:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000a28:	fb01 f005 	mul.w	r0, r1, r5
 8000a2c:	4290      	cmp	r0, r2
 8000a2e:	d90a      	bls.n	8000a46 <__udivmoddi4+0x62>
 8000a30:	eb1c 0202 	adds.w	r2, ip, r2
 8000a34:	f101 37ff 	add.w	r7, r1, #4294967295
 8000a38:	f080 811c 	bcs.w	8000c74 <__udivmoddi4+0x290>
 8000a3c:	4290      	cmp	r0, r2
 8000a3e:	f240 8119 	bls.w	8000c74 <__udivmoddi4+0x290>
 8000a42:	3902      	subs	r1, #2
 8000a44:	4462      	add	r2, ip
 8000a46:	1a12      	subs	r2, r2, r0
 8000a48:	b2a4      	uxth	r4, r4
 8000a4a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a4e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000a52:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a56:	fb00 f505 	mul.w	r5, r0, r5
 8000a5a:	42a5      	cmp	r5, r4
 8000a5c:	d90a      	bls.n	8000a74 <__udivmoddi4+0x90>
 8000a5e:	eb1c 0404 	adds.w	r4, ip, r4
 8000a62:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a66:	f080 8107 	bcs.w	8000c78 <__udivmoddi4+0x294>
 8000a6a:	42a5      	cmp	r5, r4
 8000a6c:	f240 8104 	bls.w	8000c78 <__udivmoddi4+0x294>
 8000a70:	4464      	add	r4, ip
 8000a72:	3802      	subs	r0, #2
 8000a74:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000a78:	1b64      	subs	r4, r4, r5
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	b11e      	cbz	r6, 8000a86 <__udivmoddi4+0xa2>
 8000a7e:	40dc      	lsrs	r4, r3
 8000a80:	2300      	movs	r3, #0
 8000a82:	e9c6 4300 	strd	r4, r3, [r6]
 8000a86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a8a:	428b      	cmp	r3, r1
 8000a8c:	d908      	bls.n	8000aa0 <__udivmoddi4+0xbc>
 8000a8e:	2e00      	cmp	r6, #0
 8000a90:	f000 80ed 	beq.w	8000c6e <__udivmoddi4+0x28a>
 8000a94:	2100      	movs	r1, #0
 8000a96:	e9c6 0500 	strd	r0, r5, [r6]
 8000a9a:	4608      	mov	r0, r1
 8000a9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aa0:	fab3 f183 	clz	r1, r3
 8000aa4:	2900      	cmp	r1, #0
 8000aa6:	d149      	bne.n	8000b3c <__udivmoddi4+0x158>
 8000aa8:	42ab      	cmp	r3, r5
 8000aaa:	d302      	bcc.n	8000ab2 <__udivmoddi4+0xce>
 8000aac:	4282      	cmp	r2, r0
 8000aae:	f200 80f8 	bhi.w	8000ca2 <__udivmoddi4+0x2be>
 8000ab2:	1a84      	subs	r4, r0, r2
 8000ab4:	eb65 0203 	sbc.w	r2, r5, r3
 8000ab8:	2001      	movs	r0, #1
 8000aba:	4617      	mov	r7, r2
 8000abc:	2e00      	cmp	r6, #0
 8000abe:	d0e2      	beq.n	8000a86 <__udivmoddi4+0xa2>
 8000ac0:	e9c6 4700 	strd	r4, r7, [r6]
 8000ac4:	e7df      	b.n	8000a86 <__udivmoddi4+0xa2>
 8000ac6:	b902      	cbnz	r2, 8000aca <__udivmoddi4+0xe6>
 8000ac8:	deff      	udf	#255	; 0xff
 8000aca:	fab2 f382 	clz	r3, r2
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	f040 8090 	bne.w	8000bf4 <__udivmoddi4+0x210>
 8000ad4:	1a8a      	subs	r2, r1, r2
 8000ad6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ada:	fa1f fe8c 	uxth.w	lr, ip
 8000ade:	2101      	movs	r1, #1
 8000ae0:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ae4:	fb07 2015 	mls	r0, r7, r5, r2
 8000ae8:	0c22      	lsrs	r2, r4, #16
 8000aea:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000aee:	fb0e f005 	mul.w	r0, lr, r5
 8000af2:	4290      	cmp	r0, r2
 8000af4:	d908      	bls.n	8000b08 <__udivmoddi4+0x124>
 8000af6:	eb1c 0202 	adds.w	r2, ip, r2
 8000afa:	f105 38ff 	add.w	r8, r5, #4294967295
 8000afe:	d202      	bcs.n	8000b06 <__udivmoddi4+0x122>
 8000b00:	4290      	cmp	r0, r2
 8000b02:	f200 80cb 	bhi.w	8000c9c <__udivmoddi4+0x2b8>
 8000b06:	4645      	mov	r5, r8
 8000b08:	1a12      	subs	r2, r2, r0
 8000b0a:	b2a4      	uxth	r4, r4
 8000b0c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000b10:	fb07 2210 	mls	r2, r7, r0, r2
 8000b14:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b18:	fb0e fe00 	mul.w	lr, lr, r0
 8000b1c:	45a6      	cmp	lr, r4
 8000b1e:	d908      	bls.n	8000b32 <__udivmoddi4+0x14e>
 8000b20:	eb1c 0404 	adds.w	r4, ip, r4
 8000b24:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b28:	d202      	bcs.n	8000b30 <__udivmoddi4+0x14c>
 8000b2a:	45a6      	cmp	lr, r4
 8000b2c:	f200 80bb 	bhi.w	8000ca6 <__udivmoddi4+0x2c2>
 8000b30:	4610      	mov	r0, r2
 8000b32:	eba4 040e 	sub.w	r4, r4, lr
 8000b36:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000b3a:	e79f      	b.n	8000a7c <__udivmoddi4+0x98>
 8000b3c:	f1c1 0720 	rsb	r7, r1, #32
 8000b40:	408b      	lsls	r3, r1
 8000b42:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b46:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b4a:	fa05 f401 	lsl.w	r4, r5, r1
 8000b4e:	fa20 f307 	lsr.w	r3, r0, r7
 8000b52:	40fd      	lsrs	r5, r7
 8000b54:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b58:	4323      	orrs	r3, r4
 8000b5a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000b5e:	fa1f fe8c 	uxth.w	lr, ip
 8000b62:	fb09 5518 	mls	r5, r9, r8, r5
 8000b66:	0c1c      	lsrs	r4, r3, #16
 8000b68:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000b6c:	fb08 f50e 	mul.w	r5, r8, lr
 8000b70:	42a5      	cmp	r5, r4
 8000b72:	fa02 f201 	lsl.w	r2, r2, r1
 8000b76:	fa00 f001 	lsl.w	r0, r0, r1
 8000b7a:	d90b      	bls.n	8000b94 <__udivmoddi4+0x1b0>
 8000b7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000b80:	f108 3aff 	add.w	sl, r8, #4294967295
 8000b84:	f080 8088 	bcs.w	8000c98 <__udivmoddi4+0x2b4>
 8000b88:	42a5      	cmp	r5, r4
 8000b8a:	f240 8085 	bls.w	8000c98 <__udivmoddi4+0x2b4>
 8000b8e:	f1a8 0802 	sub.w	r8, r8, #2
 8000b92:	4464      	add	r4, ip
 8000b94:	1b64      	subs	r4, r4, r5
 8000b96:	b29d      	uxth	r5, r3
 8000b98:	fbb4 f3f9 	udiv	r3, r4, r9
 8000b9c:	fb09 4413 	mls	r4, r9, r3, r4
 8000ba0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ba4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ba8:	45a6      	cmp	lr, r4
 8000baa:	d908      	bls.n	8000bbe <__udivmoddi4+0x1da>
 8000bac:	eb1c 0404 	adds.w	r4, ip, r4
 8000bb0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000bb4:	d26c      	bcs.n	8000c90 <__udivmoddi4+0x2ac>
 8000bb6:	45a6      	cmp	lr, r4
 8000bb8:	d96a      	bls.n	8000c90 <__udivmoddi4+0x2ac>
 8000bba:	3b02      	subs	r3, #2
 8000bbc:	4464      	add	r4, ip
 8000bbe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bc2:	fba3 9502 	umull	r9, r5, r3, r2
 8000bc6:	eba4 040e 	sub.w	r4, r4, lr
 8000bca:	42ac      	cmp	r4, r5
 8000bcc:	46c8      	mov	r8, r9
 8000bce:	46ae      	mov	lr, r5
 8000bd0:	d356      	bcc.n	8000c80 <__udivmoddi4+0x29c>
 8000bd2:	d053      	beq.n	8000c7c <__udivmoddi4+0x298>
 8000bd4:	b156      	cbz	r6, 8000bec <__udivmoddi4+0x208>
 8000bd6:	ebb0 0208 	subs.w	r2, r0, r8
 8000bda:	eb64 040e 	sbc.w	r4, r4, lr
 8000bde:	fa04 f707 	lsl.w	r7, r4, r7
 8000be2:	40ca      	lsrs	r2, r1
 8000be4:	40cc      	lsrs	r4, r1
 8000be6:	4317      	orrs	r7, r2
 8000be8:	e9c6 7400 	strd	r7, r4, [r6]
 8000bec:	4618      	mov	r0, r3
 8000bee:	2100      	movs	r1, #0
 8000bf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bf4:	f1c3 0120 	rsb	r1, r3, #32
 8000bf8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bfc:	fa20 f201 	lsr.w	r2, r0, r1
 8000c00:	fa25 f101 	lsr.w	r1, r5, r1
 8000c04:	409d      	lsls	r5, r3
 8000c06:	432a      	orrs	r2, r5
 8000c08:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0c:	fa1f fe8c 	uxth.w	lr, ip
 8000c10:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c14:	fb07 1510 	mls	r5, r7, r0, r1
 8000c18:	0c11      	lsrs	r1, r2, #16
 8000c1a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000c1e:	fb00 f50e 	mul.w	r5, r0, lr
 8000c22:	428d      	cmp	r5, r1
 8000c24:	fa04 f403 	lsl.w	r4, r4, r3
 8000c28:	d908      	bls.n	8000c3c <__udivmoddi4+0x258>
 8000c2a:	eb1c 0101 	adds.w	r1, ip, r1
 8000c2e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c32:	d22f      	bcs.n	8000c94 <__udivmoddi4+0x2b0>
 8000c34:	428d      	cmp	r5, r1
 8000c36:	d92d      	bls.n	8000c94 <__udivmoddi4+0x2b0>
 8000c38:	3802      	subs	r0, #2
 8000c3a:	4461      	add	r1, ip
 8000c3c:	1b49      	subs	r1, r1, r5
 8000c3e:	b292      	uxth	r2, r2
 8000c40:	fbb1 f5f7 	udiv	r5, r1, r7
 8000c44:	fb07 1115 	mls	r1, r7, r5, r1
 8000c48:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000c4c:	fb05 f10e 	mul.w	r1, r5, lr
 8000c50:	4291      	cmp	r1, r2
 8000c52:	d908      	bls.n	8000c66 <__udivmoddi4+0x282>
 8000c54:	eb1c 0202 	adds.w	r2, ip, r2
 8000c58:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c5c:	d216      	bcs.n	8000c8c <__udivmoddi4+0x2a8>
 8000c5e:	4291      	cmp	r1, r2
 8000c60:	d914      	bls.n	8000c8c <__udivmoddi4+0x2a8>
 8000c62:	3d02      	subs	r5, #2
 8000c64:	4462      	add	r2, ip
 8000c66:	1a52      	subs	r2, r2, r1
 8000c68:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000c6c:	e738      	b.n	8000ae0 <__udivmoddi4+0xfc>
 8000c6e:	4631      	mov	r1, r6
 8000c70:	4630      	mov	r0, r6
 8000c72:	e708      	b.n	8000a86 <__udivmoddi4+0xa2>
 8000c74:	4639      	mov	r1, r7
 8000c76:	e6e6      	b.n	8000a46 <__udivmoddi4+0x62>
 8000c78:	4610      	mov	r0, r2
 8000c7a:	e6fb      	b.n	8000a74 <__udivmoddi4+0x90>
 8000c7c:	4548      	cmp	r0, r9
 8000c7e:	d2a9      	bcs.n	8000bd4 <__udivmoddi4+0x1f0>
 8000c80:	ebb9 0802 	subs.w	r8, r9, r2
 8000c84:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000c88:	3b01      	subs	r3, #1
 8000c8a:	e7a3      	b.n	8000bd4 <__udivmoddi4+0x1f0>
 8000c8c:	4645      	mov	r5, r8
 8000c8e:	e7ea      	b.n	8000c66 <__udivmoddi4+0x282>
 8000c90:	462b      	mov	r3, r5
 8000c92:	e794      	b.n	8000bbe <__udivmoddi4+0x1da>
 8000c94:	4640      	mov	r0, r8
 8000c96:	e7d1      	b.n	8000c3c <__udivmoddi4+0x258>
 8000c98:	46d0      	mov	r8, sl
 8000c9a:	e77b      	b.n	8000b94 <__udivmoddi4+0x1b0>
 8000c9c:	3d02      	subs	r5, #2
 8000c9e:	4462      	add	r2, ip
 8000ca0:	e732      	b.n	8000b08 <__udivmoddi4+0x124>
 8000ca2:	4608      	mov	r0, r1
 8000ca4:	e70a      	b.n	8000abc <__udivmoddi4+0xd8>
 8000ca6:	4464      	add	r4, ip
 8000ca8:	3802      	subs	r0, #2
 8000caa:	e742      	b.n	8000b32 <__udivmoddi4+0x14e>

08000cac <__aeabi_idiv0>:
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop

08000cb0 <AS5600_new>:
/// includes
#include "as5600.h"

/// AS5600 functions
/* initialization */
AS5600_TypeDef* AS5600_new(void) { return (AS5600_TypeDef*)calloc(1, sizeof(AS5600_TypeDef)); }
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	2118      	movs	r1, #24
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	f008 f9cc 	bl	8009054 <calloc>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	bd80      	pop	{r7, pc}

08000cc2 <AS5600_init>:
HAL_StatusTypeDef AS5600_init(AS5600_TypeDef* handle) {
 8000cc2:	b580      	push	{r7, lr}
 8000cc4:	b084      	sub	sp, #16
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	6078      	str	r0, [r7, #4]
	// set all unspecified fields to their default
	if (!(handle->i2c_timeout))					{ handle->i2c_timeout = AS5600_I2C_TIMEOUT_DEFAULT; }
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	689b      	ldr	r3, [r3, #8]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d102      	bne.n	8000cd8 <AS5600_init+0x16>
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	220a      	movs	r2, #10
 8000cd6:	609a      	str	r2, [r3, #8]
	if (!(handle->positive_rotation_direction))	{ handle->positive_rotation_direction = AS5600_DIR_CW; }
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	7b9b      	ldrb	r3, [r3, #14]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d102      	bne.n	8000ce6 <AS5600_init+0x24>
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	739a      	strb	r2, [r3, #14]
	if (!(handle->low_power_mode))				{ handle->low_power_mode = AS5600_POWER_MODE_DEFAULT; }
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	7bdb      	ldrb	r3, [r3, #15]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d102      	bne.n	8000cf4 <AS5600_init+0x32>
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	73da      	strb	r2, [r3, #15]
	if (!(handle->hysteresis))					{ handle->hysteresis = AS5600_HYSTERESIS_DEFAULT; }
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	7c1b      	ldrb	r3, [r3, #16]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d102      	bne.n	8000d02 <AS5600_init+0x40>
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2201      	movs	r2, #1
 8000d00:	741a      	strb	r2, [r3, #16]
	if (!(handle->output_mode))					{ handle->output_mode = AS5600_OUTPUT_STAGE_DEFAULT; }
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	7c5b      	ldrb	r3, [r3, #17]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d102      	bne.n	8000d10 <AS5600_init+0x4e>
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	745a      	strb	r2, [r3, #17]
	if (!(handle->PWM_frequency))				{ handle->PWM_frequency = AS5600_PWM_FREQUENCY_DEFAULT; }
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	7c9b      	ldrb	r3, [r3, #18]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d102      	bne.n	8000d1e <AS5600_init+0x5c>
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	749a      	strb	r2, [r3, #18]
	if (!(handle->slow_filter))					{ handle->slow_filter = AS5600_SLOW_FILTER_DEFAULT; }
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	7cdb      	ldrb	r3, [r3, #19]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d102      	bne.n	8000d2c <AS5600_init+0x6a>
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	2201      	movs	r2, #1
 8000d2a:	74da      	strb	r2, [r3, #19]
	if (!(handle->fast_filter_threshold))		{ handle->fast_filter_threshold = AS5600_FAST_FILTER_DEFAULT; }
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	7d1b      	ldrb	r3, [r3, #20]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d102      	bne.n	8000d3a <AS5600_init+0x78>
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	2201      	movs	r2, #1
 8000d38:	751a      	strb	r2, [r3, #20]
	if (!(handle->watchdog_timer))				{ handle->watchdog_timer = AS5600_WATCHDOG_DEFAULT; }
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	7d5b      	ldrb	r3, [r3, #21]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d102      	bne.n	8000d48 <AS5600_init+0x86>
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	2202      	movs	r2, #2
 8000d46:	755a      	strb	r2, [r3, #21]

	if (AS5600_set_low_power_mode(handle, handle->low_power_mode) != HAL_OK)					{ return HAL_ERROR; }
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	7bdb      	ldrb	r3, [r3, #15]
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	6878      	ldr	r0, [r7, #4]
 8000d50:	f000 f86a 	bl	8000e28 <AS5600_set_low_power_mode>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <AS5600_init+0x9c>
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	e05f      	b.n	8000e1e <AS5600_init+0x15c>
	if (AS5600_set_hysteresis(handle, handle->hysteresis) != HAL_OK)							{ return HAL_ERROR; }
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	7c1b      	ldrb	r3, [r3, #16]
 8000d62:	4619      	mov	r1, r3
 8000d64:	6878      	ldr	r0, [r7, #4]
 8000d66:	f000 f8b3 	bl	8000ed0 <AS5600_set_hysteresis>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <AS5600_init+0xb2>
 8000d70:	2301      	movs	r3, #1
 8000d72:	e054      	b.n	8000e1e <AS5600_init+0x15c>
	if (AS5600_set_output_mode(handle, handle->output_mode, handle->PWM_frequency) != HAL_OK)	{ return HAL_ERROR; }
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	7c59      	ldrb	r1, [r3, #17]
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	7c9b      	ldrb	r3, [r3, #18]
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	6878      	ldr	r0, [r7, #4]
 8000d80:	f000 f8fa 	bl	8000f78 <AS5600_set_output_mode>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <AS5600_init+0xcc>
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	e047      	b.n	8000e1e <AS5600_init+0x15c>
	if (AS5600_set_slow_filter(handle, handle->slow_filter) != HAL_OK)							{ return HAL_ERROR; }
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	7cdb      	ldrb	r3, [r3, #19]
 8000d92:	4619      	mov	r1, r3
 8000d94:	6878      	ldr	r0, [r7, #4]
 8000d96:	f000 f983 	bl	80010a0 <AS5600_set_slow_filter>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <AS5600_init+0xe2>
 8000da0:	2301      	movs	r3, #1
 8000da2:	e03c      	b.n	8000e1e <AS5600_init+0x15c>
	if (AS5600_set_fast_filter_threshold(handle, handle->fast_filter_threshold) != HAL_OK)		{ return HAL_ERROR; }
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	7d1b      	ldrb	r3, [r3, #20]
 8000da8:	4619      	mov	r1, r3
 8000daa:	6878      	ldr	r0, [r7, #4]
 8000dac:	f000 f9cc 	bl	8001148 <AS5600_set_fast_filter_threshold>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <AS5600_init+0xf8>
 8000db6:	2301      	movs	r3, #1
 8000db8:	e031      	b.n	8000e1e <AS5600_init+0x15c>
	if (AS5600_set_watchdog_timer(handle, handle->watchdog_timer) != HAL_OK)					{ return HAL_ERROR; }
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	7d5b      	ldrb	r3, [r3, #21]
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	6878      	ldr	r0, [r7, #4]
 8000dc2:	f000 fa61 	bl	8001288 <AS5600_set_watchdog_timer>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <AS5600_init+0x10e>
 8000dcc:	2301      	movs	r3, #1
 8000dce:	e026      	b.n	8000e1e <AS5600_init+0x15c>
	
	if (AS5600_write_config_register(handle) != HAL_OK)											{ return HAL_ERROR; }
 8000dd0:	6878      	ldr	r0, [r7, #4]
 8000dd2:	f000 fa80 	bl	80012d6 <AS5600_write_config_register>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <AS5600_init+0x11e>
 8000ddc:	2301      	movs	r3, #1
 8000dde:	e01e      	b.n	8000e1e <AS5600_init+0x15c>
    uint8_t magnet_status = 0;
 8000de0:	2300      	movs	r3, #0
 8000de2:	73fb      	strb	r3, [r7, #15]
	if (AS5600_get_magnet_status(handle, &magnet_status) != HAL_OK)								{ return HAL_ERROR; }
 8000de4:	f107 030f 	add.w	r3, r7, #15
 8000de8:	4619      	mov	r1, r3
 8000dea:	6878      	ldr	r0, [r7, #4]
 8000dec:	f000 fab2 	bl	8001354 <AS5600_get_magnet_status>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <AS5600_init+0x138>
 8000df6:	2301      	movs	r3, #1
 8000df8:	e011      	b.n	8000e1e <AS5600_init+0x15c>
	if (!(magnet_status & AS5600_MAGNET_DETECTED) \
 8000dfa:	7bfb      	ldrb	r3, [r7, #15]
 8000dfc:	f003 0320 	and.w	r3, r3, #32
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d009      	beq.n	8000e18 <AS5600_init+0x156>
		|| (magnet_status & AS5600_AGC_MIN_GAIN_OVERFLOW) \
 8000e04:	7bfb      	ldrb	r3, [r7, #15]
 8000e06:	f003 0308 	and.w	r3, r3, #8
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d104      	bne.n	8000e18 <AS5600_init+0x156>
		|| (magnet_status & AS5600_AGC_MAX_GAIN_OVERFLOW))										{ return HAL_ERROR; }
 8000e0e:	7bfb      	ldrb	r3, [r7, #15]
 8000e10:	f003 0310 	and.w	r3, r3, #16
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <AS5600_init+0x15a>
 8000e18:	2301      	movs	r3, #1
 8000e1a:	e000      	b.n	8000e1e <AS5600_init+0x15c>
	return HAL_OK;
 8000e1c:	2300      	movs	r3, #0
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3710      	adds	r7, #16
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
	...

08000e28 <AS5600_set_low_power_mode>:
	case AS5600_DIR_CCW:	HAL_GPIO_WritePin(handle->dir_port, handle->dir_pin, GPIO_PIN_SET);
	default:				return HAL_ERROR;	// invalid direction
	}
	return HAL_OK;
}
HAL_StatusTypeDef AS5600_set_low_power_mode(AS5600_TypeDef* const handle, const uint8_t mode) {
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
 8000e30:	460b      	mov	r3, r1
 8000e32:	70fb      	strb	r3, [r7, #3]
	switch (mode) {
 8000e34:	78fb      	ldrb	r3, [r7, #3]
 8000e36:	3b01      	subs	r3, #1
 8000e38:	2b03      	cmp	r3, #3
 8000e3a:	d83f      	bhi.n	8000ebc <AS5600_set_low_power_mode+0x94>
 8000e3c:	a201      	add	r2, pc, #4	; (adr r2, 8000e44 <AS5600_set_low_power_mode+0x1c>)
 8000e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e42:	bf00      	nop
 8000e44:	08000e55 	.word	0x08000e55
 8000e48:	08000e67 	.word	0x08000e67
 8000e4c:	08000e89 	.word	0x08000e89
 8000e50:	08000eab 	.word	0x08000eab
	case AS5600_POWER_MODE_NOM:
		handle->config_register[1] &= ~((1UL << 1) | (1UL << 0));
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	7ddb      	ldrb	r3, [r3, #23]
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	f023 0303 	bic.w	r3, r3, #3
 8000e5e:	b2da      	uxtb	r2, r3
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	75da      	strb	r2, [r3, #23]
		break;
 8000e64:	e02c      	b.n	8000ec0 <AS5600_set_low_power_mode+0x98>
	case AS5600_POWER_MODE_LPM1:
		handle->config_register[1] |= (1UL << 0);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	7ddb      	ldrb	r3, [r3, #23]
 8000e6a:	b2db      	uxtb	r3, r3
 8000e6c:	f043 0301 	orr.w	r3, r3, #1
 8000e70:	b2da      	uxtb	r2, r3
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	75da      	strb	r2, [r3, #23]
		handle->config_register[1] &= ~(1UL << 1);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	7ddb      	ldrb	r3, [r3, #23]
 8000e7a:	b2db      	uxtb	r3, r3
 8000e7c:	f023 0302 	bic.w	r3, r3, #2
 8000e80:	b2da      	uxtb	r2, r3
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	75da      	strb	r2, [r3, #23]
	break;
 8000e86:	e01b      	b.n	8000ec0 <AS5600_set_low_power_mode+0x98>
	case AS5600_POWER_MODE_LPM2:
		handle->config_register[1] |= (1UL << 1);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	7ddb      	ldrb	r3, [r3, #23]
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	f043 0302 	orr.w	r3, r3, #2
 8000e92:	b2da      	uxtb	r2, r3
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	75da      	strb	r2, [r3, #23]
		handle->config_register[1] &= (1UL << 0);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	7ddb      	ldrb	r3, [r3, #23]
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	f003 0301 	and.w	r3, r3, #1
 8000ea2:	b2da      	uxtb	r2, r3
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	75da      	strb	r2, [r3, #23]
		break;
 8000ea8:	e00a      	b.n	8000ec0 <AS5600_set_low_power_mode+0x98>
	case AS5600_POWER_MODE_LPM3:
		handle->config_register[1] |= ((1UL << 1) | (1UL << 0));
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	7ddb      	ldrb	r3, [r3, #23]
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	f043 0303 	orr.w	r3, r3, #3
 8000eb4:	b2da      	uxtb	r2, r3
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	75da      	strb	r2, [r3, #23]
		break;
 8000eba:	e001      	b.n	8000ec0 <AS5600_set_low_power_mode+0x98>
	default: return HAL_ERROR;  // invalid mode
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	e000      	b.n	8000ec2 <AS5600_set_low_power_mode+0x9a>
	}
	return HAL_OK;
 8000ec0:	2300      	movs	r3, #0
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	370c      	adds	r7, #12
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop

08000ed0 <AS5600_set_hysteresis>:
HAL_StatusTypeDef AS5600_set_hysteresis(AS5600_TypeDef* const handle, const uint8_t hysteresis) {
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
 8000ed8:	460b      	mov	r3, r1
 8000eda:	70fb      	strb	r3, [r7, #3]
	switch (hysteresis) {
 8000edc:	78fb      	ldrb	r3, [r7, #3]
 8000ede:	3b01      	subs	r3, #1
 8000ee0:	2b03      	cmp	r3, #3
 8000ee2:	d83f      	bhi.n	8000f64 <AS5600_set_hysteresis+0x94>
 8000ee4:	a201      	add	r2, pc, #4	; (adr r2, 8000eec <AS5600_set_hysteresis+0x1c>)
 8000ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000eea:	bf00      	nop
 8000eec:	08000efd 	.word	0x08000efd
 8000ef0:	08000f0f 	.word	0x08000f0f
 8000ef4:	08000f31 	.word	0x08000f31
 8000ef8:	08000f53 	.word	0x08000f53
	case AS5600_HYSTERESIS_OFF:
		handle->config_register[1] &= ~((1UL << 3) | (1UL << 2));
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	7ddb      	ldrb	r3, [r3, #23]
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	f023 030c 	bic.w	r3, r3, #12
 8000f06:	b2da      	uxtb	r2, r3
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	75da      	strb	r2, [r3, #23]
		break;
 8000f0c:	e02c      	b.n	8000f68 <AS5600_set_hysteresis+0x98>
	case AS5600_HYSTERESIS_1LSB:
		handle->config_register[1] |= (1UL << 2);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	7ddb      	ldrb	r3, [r3, #23]
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	f043 0304 	orr.w	r3, r3, #4
 8000f18:	b2da      	uxtb	r2, r3
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	75da      	strb	r2, [r3, #23]
		handle->config_register[1] &= ~(1UL << 3);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	7ddb      	ldrb	r3, [r3, #23]
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	f023 0308 	bic.w	r3, r3, #8
 8000f28:	b2da      	uxtb	r2, r3
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	75da      	strb	r2, [r3, #23]
		break;
 8000f2e:	e01b      	b.n	8000f68 <AS5600_set_hysteresis+0x98>
	case AS5600_HYSTERESIS_2LSB:
		handle->config_register[1] &= ~(1UL << 2);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	7ddb      	ldrb	r3, [r3, #23]
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	f023 0304 	bic.w	r3, r3, #4
 8000f3a:	b2da      	uxtb	r2, r3
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	75da      	strb	r2, [r3, #23]
		handle->config_register[1] |= (1UL << 3);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	7ddb      	ldrb	r3, [r3, #23]
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	f043 0308 	orr.w	r3, r3, #8
 8000f4a:	b2da      	uxtb	r2, r3
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	75da      	strb	r2, [r3, #23]
		break;
 8000f50:	e00a      	b.n	8000f68 <AS5600_set_hysteresis+0x98>
	case AS5600_HYSTERESIS_3LSB:
		handle->config_register[1] |= ((1UL << 3) | (1UL << 2));
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	7ddb      	ldrb	r3, [r3, #23]
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	f043 030c 	orr.w	r3, r3, #12
 8000f5c:	b2da      	uxtb	r2, r3
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	75da      	strb	r2, [r3, #23]
		break;
 8000f62:	e001      	b.n	8000f68 <AS5600_set_hysteresis+0x98>
	default: return HAL_ERROR;	// invalid hysteresis mode
 8000f64:	2301      	movs	r3, #1
 8000f66:	e000      	b.n	8000f6a <AS5600_set_hysteresis+0x9a>
	}
	return HAL_OK;
 8000f68:	2300      	movs	r3, #0
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	370c      	adds	r7, #12
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <AS5600_set_output_mode>:
HAL_StatusTypeDef AS5600_set_output_mode(AS5600_TypeDef* const handle, const uint8_t mode, uint8_t frequency) {
 8000f78:	b480      	push	{r7}
 8000f7a:	b085      	sub	sp, #20
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
 8000f80:	460b      	mov	r3, r1
 8000f82:	70fb      	strb	r3, [r7, #3]
 8000f84:	4613      	mov	r3, r2
 8000f86:	70bb      	strb	r3, [r7, #2]
	uint8_t pwm = 0;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	73fb      	strb	r3, [r7, #15]
	switch (mode) {
 8000f8c:	78fb      	ldrb	r3, [r7, #3]
 8000f8e:	2b03      	cmp	r3, #3
 8000f90:	d020      	beq.n	8000fd4 <AS5600_set_output_mode+0x5c>
 8000f92:	2b03      	cmp	r3, #3
 8000f94:	dc31      	bgt.n	8000ffa <AS5600_set_output_mode+0x82>
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	d002      	beq.n	8000fa0 <AS5600_set_output_mode+0x28>
 8000f9a:	2b02      	cmp	r3, #2
 8000f9c:	d009      	beq.n	8000fb2 <AS5600_set_output_mode+0x3a>
 8000f9e:	e02c      	b.n	8000ffa <AS5600_set_output_mode+0x82>
	case AS5600_OUTPUT_STAGE_FULL:
		handle->config_register[1] &= ~((1UL << 5) | (1UL << 4));
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	7ddb      	ldrb	r3, [r3, #23]
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000faa:	b2da      	uxtb	r2, r3
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	75da      	strb	r2, [r3, #23]
		break;
 8000fb0:	e025      	b.n	8000ffe <AS5600_set_output_mode+0x86>
	case AS5600_OUTPUT_STAGE_REDUCED:
		handle->config_register[1] |= (1UL << 4);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	7ddb      	ldrb	r3, [r3, #23]
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	f043 0310 	orr.w	r3, r3, #16
 8000fbc:	b2da      	uxtb	r2, r3
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	75da      	strb	r2, [r3, #23]
		handle->config_register[1] &= ~(1UL << 5);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	7ddb      	ldrb	r3, [r3, #23]
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	f023 0320 	bic.w	r3, r3, #32
 8000fcc:	b2da      	uxtb	r2, r3
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	75da      	strb	r2, [r3, #23]
		break;
 8000fd2:	e014      	b.n	8000ffe <AS5600_set_output_mode+0x86>
	case AS5600_OUTPUT_STAGE_PWM:
		handle->config_register[1] &= (1UL << 4);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	7ddb      	ldrb	r3, [r3, #23]
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	f003 0310 	and.w	r3, r3, #16
 8000fde:	b2da      	uxtb	r2, r3
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	75da      	strb	r2, [r3, #23]
		handle->config_register[1] |= (1UL << 5);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	7ddb      	ldrb	r3, [r3, #23]
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	f043 0320 	orr.w	r3, r3, #32
 8000fee:	b2da      	uxtb	r2, r3
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	75da      	strb	r2, [r3, #23]
		pwm = 1; break;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	73fb      	strb	r3, [r7, #15]
 8000ff8:	e001      	b.n	8000ffe <AS5600_set_output_mode+0x86>
	default: return HAL_ERROR;	// invalid output mode
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	e049      	b.n	8001092 <AS5600_set_output_mode+0x11a>
	}
	if (pwm) {
 8000ffe:	7bfb      	ldrb	r3, [r7, #15]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d045      	beq.n	8001090 <AS5600_set_output_mode+0x118>
		switch (frequency) {
 8001004:	78bb      	ldrb	r3, [r7, #2]
 8001006:	3b01      	subs	r3, #1
 8001008:	2b03      	cmp	r3, #3
 800100a:	d83f      	bhi.n	800108c <AS5600_set_output_mode+0x114>
 800100c:	a201      	add	r2, pc, #4	; (adr r2, 8001014 <AS5600_set_output_mode+0x9c>)
 800100e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001012:	bf00      	nop
 8001014:	08001025 	.word	0x08001025
 8001018:	08001037 	.word	0x08001037
 800101c:	08001059 	.word	0x08001059
 8001020:	0800107b 	.word	0x0800107b
		case AS5600_PWM_FREQUENCY_115HZ:
			handle->config_register[1] &= ~((1UL << 7) | (1UL << 6));
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	7ddb      	ldrb	r3, [r3, #23]
 8001028:	b2db      	uxtb	r3, r3
 800102a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800102e:	b2da      	uxtb	r2, r3
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	75da      	strb	r2, [r3, #23]
			break;
 8001034:	e02c      	b.n	8001090 <AS5600_set_output_mode+0x118>
		case AS5600_PWM_FREQUENCY_230HZ:
			handle->config_register[1] |= (1UL << 6);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	7ddb      	ldrb	r3, [r3, #23]
 800103a:	b2db      	uxtb	r3, r3
 800103c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001040:	b2da      	uxtb	r2, r3
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	75da      	strb	r2, [r3, #23]
			handle->config_register[1] &= ~(1UL << 7);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	7ddb      	ldrb	r3, [r3, #23]
 800104a:	b2db      	uxtb	r3, r3
 800104c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001050:	b2da      	uxtb	r2, r3
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	75da      	strb	r2, [r3, #23]
			break;
 8001056:	e01b      	b.n	8001090 <AS5600_set_output_mode+0x118>
		case AS5600_PWM_FREQUENCY_460HZ:
			handle->config_register[1] &= ~(1UL << 6);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	7ddb      	ldrb	r3, [r3, #23]
 800105c:	b2db      	uxtb	r3, r3
 800105e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001062:	b2da      	uxtb	r2, r3
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	75da      	strb	r2, [r3, #23]
			handle->config_register[1] |= (1UL << 7);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	7ddb      	ldrb	r3, [r3, #23]
 800106c:	b2db      	uxtb	r3, r3
 800106e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001072:	b2da      	uxtb	r2, r3
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	75da      	strb	r2, [r3, #23]
			break;
 8001078:	e00a      	b.n	8001090 <AS5600_set_output_mode+0x118>
		case AS5600_PWM_FREQUENCY_920HZ:
			handle->config_register[1] |= ((1UL << 7) | (1UL << 6));
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	7ddb      	ldrb	r3, [r3, #23]
 800107e:	b2db      	uxtb	r3, r3
 8001080:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8001084:	b2da      	uxtb	r2, r3
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	75da      	strb	r2, [r3, #23]
			break;
 800108a:	e001      	b.n	8001090 <AS5600_set_output_mode+0x118>
		default: return HAL_ERROR;	// invalid PWM frequency
 800108c:	2301      	movs	r3, #1
 800108e:	e000      	b.n	8001092 <AS5600_set_output_mode+0x11a>
		}
	}
	return HAL_OK;
 8001090:	2300      	movs	r3, #0
}
 8001092:	4618      	mov	r0, r3
 8001094:	3714      	adds	r7, #20
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop

080010a0 <AS5600_set_slow_filter>:
HAL_StatusTypeDef AS5600_set_slow_filter(AS5600_TypeDef* const handle, const uint8_t mode) {
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	460b      	mov	r3, r1
 80010aa:	70fb      	strb	r3, [r7, #3]
	switch (mode) {
 80010ac:	78fb      	ldrb	r3, [r7, #3]
 80010ae:	3b01      	subs	r3, #1
 80010b0:	2b03      	cmp	r3, #3
 80010b2:	d83f      	bhi.n	8001134 <AS5600_set_slow_filter+0x94>
 80010b4:	a201      	add	r2, pc, #4	; (adr r2, 80010bc <AS5600_set_slow_filter+0x1c>)
 80010b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010ba:	bf00      	nop
 80010bc:	080010cd 	.word	0x080010cd
 80010c0:	080010df 	.word	0x080010df
 80010c4:	08001101 	.word	0x08001101
 80010c8:	08001123 	.word	0x08001123
	case AS5600_SLOW_FILTER_16X:
		handle->config_register[0] &= ~((1UL << 1) | (1UL << 0));
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	7d9b      	ldrb	r3, [r3, #22]
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	f023 0303 	bic.w	r3, r3, #3
 80010d6:	b2da      	uxtb	r2, r3
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	759a      	strb	r2, [r3, #22]
		break;
 80010dc:	e02c      	b.n	8001138 <AS5600_set_slow_filter+0x98>
	case AS5600_SLOW_FILTER_8X:
		handle->config_register[0] |= (1UL << 0);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	7d9b      	ldrb	r3, [r3, #22]
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	f043 0301 	orr.w	r3, r3, #1
 80010e8:	b2da      	uxtb	r2, r3
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	759a      	strb	r2, [r3, #22]
		handle->config_register[0] &= ~(1UL << 1);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	7d9b      	ldrb	r3, [r3, #22]
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	f023 0302 	bic.w	r3, r3, #2
 80010f8:	b2da      	uxtb	r2, r3
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	759a      	strb	r2, [r3, #22]
		break;
 80010fe:	e01b      	b.n	8001138 <AS5600_set_slow_filter+0x98>
	case AS5600_SLOW_FILTER_4X:
		handle->config_register[0] &= ~(1UL << 0);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	7d9b      	ldrb	r3, [r3, #22]
 8001104:	b2db      	uxtb	r3, r3
 8001106:	f023 0301 	bic.w	r3, r3, #1
 800110a:	b2da      	uxtb	r2, r3
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	759a      	strb	r2, [r3, #22]
		handle->config_register[0] |= (1UL << 1);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	7d9b      	ldrb	r3, [r3, #22]
 8001114:	b2db      	uxtb	r3, r3
 8001116:	f043 0302 	orr.w	r3, r3, #2
 800111a:	b2da      	uxtb	r2, r3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	759a      	strb	r2, [r3, #22]
		break;
 8001120:	e00a      	b.n	8001138 <AS5600_set_slow_filter+0x98>
	case AS5600_SLOW_FILTER_2X:
		handle->config_register[0] |= ((1UL << 1) | (1UL << 0));
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	7d9b      	ldrb	r3, [r3, #22]
 8001126:	b2db      	uxtb	r3, r3
 8001128:	f043 0303 	orr.w	r3, r3, #3
 800112c:	b2da      	uxtb	r2, r3
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	759a      	strb	r2, [r3, #22]
		break;
 8001132:	e001      	b.n	8001138 <AS5600_set_slow_filter+0x98>
	default: return HAL_ERROR;	// invalid slow filter mode
 8001134:	2301      	movs	r3, #1
 8001136:	e000      	b.n	800113a <AS5600_set_slow_filter+0x9a>
	}
	return HAL_OK;
 8001138:	2300      	movs	r3, #0
}
 800113a:	4618      	mov	r0, r3
 800113c:	370c      	adds	r7, #12
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop

08001148 <AS5600_set_fast_filter_threshold>:
HAL_StatusTypeDef AS5600_set_fast_filter_threshold(AS5600_TypeDef* const handle, const uint8_t threshold) {
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	460b      	mov	r3, r1
 8001152:	70fb      	strb	r3, [r7, #3]
	switch (threshold) {
 8001154:	78fb      	ldrb	r3, [r7, #3]
 8001156:	3b01      	subs	r3, #1
 8001158:	2b07      	cmp	r3, #7
 800115a:	f200 808b 	bhi.w	8001274 <AS5600_set_fast_filter_threshold+0x12c>
 800115e:	a201      	add	r2, pc, #4	; (adr r2, 8001164 <AS5600_set_fast_filter_threshold+0x1c>)
 8001160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001164:	08001185 	.word	0x08001185
 8001168:	08001197 	.word	0x08001197
 800116c:	080011b9 	.word	0x080011b9
 8001170:	080011db 	.word	0x080011db
 8001174:	080011fd 	.word	0x080011fd
 8001178:	0800121f 	.word	0x0800121f
 800117c:	08001241 	.word	0x08001241
 8001180:	08001263 	.word	0x08001263
	case AS5600_FAST_FILTER_SLOW_ONLY:
		handle->config_register[0] &= ~((1UL << 4) | (1UL << 3) | (1UL << 2));
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	7d9b      	ldrb	r3, [r3, #22]
 8001188:	b2db      	uxtb	r3, r3
 800118a:	f023 031c 	bic.w	r3, r3, #28
 800118e:	b2da      	uxtb	r2, r3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	759a      	strb	r2, [r3, #22]
		break;
 8001194:	e070      	b.n	8001278 <AS5600_set_fast_filter_threshold+0x130>
	case AS5600_FAST_FILTER_6LSB:
		handle->config_register[0] &= ~((1UL << 4) | (1UL << 3));
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	7d9b      	ldrb	r3, [r3, #22]
 800119a:	b2db      	uxtb	r3, r3
 800119c:	f023 0318 	bic.w	r3, r3, #24
 80011a0:	b2da      	uxtb	r2, r3
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	759a      	strb	r2, [r3, #22]
		handle->config_register[0] |= (1UL << 2);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	7d9b      	ldrb	r3, [r3, #22]
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	f043 0304 	orr.w	r3, r3, #4
 80011b0:	b2da      	uxtb	r2, r3
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	759a      	strb	r2, [r3, #22]
		break;
 80011b6:	e05f      	b.n	8001278 <AS5600_set_fast_filter_threshold+0x130>
	case AS5600_FAST_FILTER_7LSB:
		handle->config_register[0] &= ~((1UL << 4) | (1UL << 2));
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	7d9b      	ldrb	r3, [r3, #22]
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	f023 0314 	bic.w	r3, r3, #20
 80011c2:	b2da      	uxtb	r2, r3
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	759a      	strb	r2, [r3, #22]
		handle->config_register[0] |= (1UL << 3);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	7d9b      	ldrb	r3, [r3, #22]
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	f043 0308 	orr.w	r3, r3, #8
 80011d2:	b2da      	uxtb	r2, r3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	759a      	strb	r2, [r3, #22]
		break;
 80011d8:	e04e      	b.n	8001278 <AS5600_set_fast_filter_threshold+0x130>
	case AS5600_FAST_FILTER_9LSB:
		handle->config_register[0] &= ~(1UL << 4);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	7d9b      	ldrb	r3, [r3, #22]
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	f023 0310 	bic.w	r3, r3, #16
 80011e4:	b2da      	uxtb	r2, r3
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	759a      	strb	r2, [r3, #22]
		handle->config_register[0] |= ((1UL << 3) | (1UL << 2));
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	7d9b      	ldrb	r3, [r3, #22]
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	f043 030c 	orr.w	r3, r3, #12
 80011f4:	b2da      	uxtb	r2, r3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	759a      	strb	r2, [r3, #22]
		break;
 80011fa:	e03d      	b.n	8001278 <AS5600_set_fast_filter_threshold+0x130>
	case AS5600_FAST_FILTER_18LSB:
		handle->config_register[0] &= ~((1UL << 3) | (1UL << 2));
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	7d9b      	ldrb	r3, [r3, #22]
 8001200:	b2db      	uxtb	r3, r3
 8001202:	f023 030c 	bic.w	r3, r3, #12
 8001206:	b2da      	uxtb	r2, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	759a      	strb	r2, [r3, #22]
		handle->config_register[0] |= (1UL << 4);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	7d9b      	ldrb	r3, [r3, #22]
 8001210:	b2db      	uxtb	r3, r3
 8001212:	f043 0310 	orr.w	r3, r3, #16
 8001216:	b2da      	uxtb	r2, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	759a      	strb	r2, [r3, #22]
		break;
 800121c:	e02c      	b.n	8001278 <AS5600_set_fast_filter_threshold+0x130>
	case AS5600_FAST_FILTER_21LSB:
		handle->config_register[0] &= ~(1UL << 3);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	7d9b      	ldrb	r3, [r3, #22]
 8001222:	b2db      	uxtb	r3, r3
 8001224:	f023 0308 	bic.w	r3, r3, #8
 8001228:	b2da      	uxtb	r2, r3
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	759a      	strb	r2, [r3, #22]
		handle->config_register[0] |= ((1UL << 4) | (1UL << 2));
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	7d9b      	ldrb	r3, [r3, #22]
 8001232:	b2db      	uxtb	r3, r3
 8001234:	f043 0314 	orr.w	r3, r3, #20
 8001238:	b2da      	uxtb	r2, r3
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	759a      	strb	r2, [r3, #22]
		break;
 800123e:	e01b      	b.n	8001278 <AS5600_set_fast_filter_threshold+0x130>
	case AS5600_FAST_FILTER_24LSB:
		handle->config_register[0] &= ~(1UL << 2);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	7d9b      	ldrb	r3, [r3, #22]
 8001244:	b2db      	uxtb	r3, r3
 8001246:	f023 0304 	bic.w	r3, r3, #4
 800124a:	b2da      	uxtb	r2, r3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	759a      	strb	r2, [r3, #22]
		handle->config_register[0] |= ((1UL << 4) | (1UL << 3));
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	7d9b      	ldrb	r3, [r3, #22]
 8001254:	b2db      	uxtb	r3, r3
 8001256:	f043 0318 	orr.w	r3, r3, #24
 800125a:	b2da      	uxtb	r2, r3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	759a      	strb	r2, [r3, #22]
		break;
 8001260:	e00a      	b.n	8001278 <AS5600_set_fast_filter_threshold+0x130>
	case AS5600_FAST_FILTER_10LSB:
		handle->config_register[0] |= ((1UL << 4) | (1UL << 3) | (1UL << 2));
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	7d9b      	ldrb	r3, [r3, #22]
 8001266:	b2db      	uxtb	r3, r3
 8001268:	f043 031c 	orr.w	r3, r3, #28
 800126c:	b2da      	uxtb	r2, r3
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	759a      	strb	r2, [r3, #22]
		break;
 8001272:	e001      	b.n	8001278 <AS5600_set_fast_filter_threshold+0x130>
	default: return HAL_ERROR;	// invalid fast filter mode
 8001274:	2301      	movs	r3, #1
 8001276:	e000      	b.n	800127a <AS5600_set_fast_filter_threshold+0x132>
	}
	return HAL_OK;
 8001278:	2300      	movs	r3, #0
}
 800127a:	4618      	mov	r0, r3
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop

08001288 <AS5600_set_watchdog_timer>:
HAL_StatusTypeDef AS5600_set_watchdog_timer(AS5600_TypeDef* const handle, const uint8_t mode) {
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	460b      	mov	r3, r1
 8001292:	70fb      	strb	r3, [r7, #3]
	switch (mode) {
 8001294:	78fb      	ldrb	r3, [r7, #3]
 8001296:	2b01      	cmp	r3, #1
 8001298:	d002      	beq.n	80012a0 <AS5600_set_watchdog_timer+0x18>
 800129a:	2b02      	cmp	r3, #2
 800129c:	d009      	beq.n	80012b2 <AS5600_set_watchdog_timer+0x2a>
 800129e:	e011      	b.n	80012c4 <AS5600_set_watchdog_timer+0x3c>
	case AS5600_WATCHDOG_OFF:
		handle->config_register[0] &= ~(1UL << 6);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	7d9b      	ldrb	r3, [r3, #22]
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80012aa:	b2da      	uxtb	r2, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	759a      	strb	r2, [r3, #22]
		break;
 80012b0:	e00a      	b.n	80012c8 <AS5600_set_watchdog_timer+0x40>
	case AS5600_WATCHDOG_ON:
		handle->config_register[0] |= (1UL << 6);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	7d9b      	ldrb	r3, [r3, #22]
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012bc:	b2da      	uxtb	r2, r3
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	759a      	strb	r2, [r3, #22]
		break;
 80012c2:	e001      	b.n	80012c8 <AS5600_set_watchdog_timer+0x40>
	default: return HAL_ERROR;	// invalid watchdog state
 80012c4:	2301      	movs	r3, #1
 80012c6:	e000      	b.n	80012ca <AS5600_set_watchdog_timer+0x42>
	}
	return HAL_OK;
 80012c8:	2300      	movs	r3, #0
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	370c      	adds	r7, #12
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr

080012d6 <AS5600_write_config_register>:
HAL_StatusTypeDef AS5600_write_config_register(AS5600_TypeDef* const handle) { return HAL_I2C_Mem_Write(handle->i2c_handle, AS5600_SHIFTED_SLAVE_ADDRESS, AS5600_REGISTER_CONF_HIGH, I2C_MEMADD_SIZE_8BIT, handle->config_register, 2, handle->i2c_timeout); }
 80012d6:	b580      	push	{r7, lr}
 80012d8:	b086      	sub	sp, #24
 80012da:	af04      	add	r7, sp, #16
 80012dc:	6078      	str	r0, [r7, #4]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6818      	ldr	r0, [r3, #0]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	3316      	adds	r3, #22
 80012e6:	687a      	ldr	r2, [r7, #4]
 80012e8:	6892      	ldr	r2, [r2, #8]
 80012ea:	9202      	str	r2, [sp, #8]
 80012ec:	2202      	movs	r2, #2
 80012ee:	9201      	str	r2, [sp, #4]
 80012f0:	9300      	str	r3, [sp, #0]
 80012f2:	2301      	movs	r3, #1
 80012f4:	2207      	movs	r2, #7
 80012f6:	216c      	movs	r1, #108	; 0x6c
 80012f8:	f002 fee4 	bl	80040c4 <HAL_I2C_Mem_Write>
 80012fc:	4603      	mov	r3, r0
 80012fe:	4618      	mov	r0, r3
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}

08001306 <AS5600_get_angle>:
	uint8_t data[2] = {0};
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(handle->i2c_handle, AS5600_SHIFTED_SLAVE_ADDRESS, AS5600_REGISTER_RAW_ANGLE_HIGH, I2C_MEMADD_SIZE_8BIT, data, 2, handle->i2c_timeout);
	*angle = ((data[0] << 8) | data[1]);
	return status;
}
HAL_StatusTypeDef AS5600_get_angle(AS5600_TypeDef* const handle, uint16_t* const angle) {
 8001306:	b580      	push	{r7, lr}
 8001308:	b088      	sub	sp, #32
 800130a:	af04      	add	r7, sp, #16
 800130c:	6078      	str	r0, [r7, #4]
 800130e:	6039      	str	r1, [r7, #0]
	uint8_t data[2] = {0};
 8001310:	2300      	movs	r3, #0
 8001312:	81bb      	strh	r3, [r7, #12]
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(handle->i2c_handle, AS5600_SHIFTED_SLAVE_ADDRESS, AS5600_REGISTER_ANGLE_HIGH, I2C_MEMADD_SIZE_8BIT, data, 2, handle->i2c_timeout);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6818      	ldr	r0, [r3, #0]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	689b      	ldr	r3, [r3, #8]
 800131c:	9302      	str	r3, [sp, #8]
 800131e:	2302      	movs	r3, #2
 8001320:	9301      	str	r3, [sp, #4]
 8001322:	f107 030c 	add.w	r3, r7, #12
 8001326:	9300      	str	r3, [sp, #0]
 8001328:	2301      	movs	r3, #1
 800132a:	220e      	movs	r2, #14
 800132c:	216c      	movs	r1, #108	; 0x6c
 800132e:	f002 ffc3 	bl	80042b8 <HAL_I2C_Mem_Read>
 8001332:	4603      	mov	r3, r0
 8001334:	73fb      	strb	r3, [r7, #15]
	*angle = ((data[0] << 8) | data[1]);
 8001336:	7b3b      	ldrb	r3, [r7, #12]
 8001338:	021b      	lsls	r3, r3, #8
 800133a:	b21a      	sxth	r2, r3
 800133c:	7b7b      	ldrb	r3, [r7, #13]
 800133e:	b21b      	sxth	r3, r3
 8001340:	4313      	orrs	r3, r2
 8001342:	b21b      	sxth	r3, r3
 8001344:	b29a      	uxth	r2, r3
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	801a      	strh	r2, [r3, #0]
	return status;
 800134a:	7bfb      	ldrb	r3, [r7, #15]
}
 800134c:	4618      	mov	r0, r3
 800134e:	3710      	adds	r7, #16
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}

08001354 <AS5600_get_magnet_status>:
HAL_StatusTypeDef AS5600_get_magnet_status(AS5600_TypeDef* const handle, uint8_t* const status) {
 8001354:	b580      	push	{r7, lr}
 8001356:	b086      	sub	sp, #24
 8001358:	af04      	add	r7, sp, #16
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	6039      	str	r1, [r7, #0]
	return HAL_I2C_Mem_Read(handle->i2c_handle, AS5600_SHIFTED_SLAVE_ADDRESS, AS5600_REGISTER_STATUS, I2C_MEMADD_SIZE_8BIT, status, 1, handle->i2c_timeout);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6818      	ldr	r0, [r3, #0]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	9302      	str	r3, [sp, #8]
 8001368:	2301      	movs	r3, #1
 800136a:	9301      	str	r3, [sp, #4]
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	9300      	str	r3, [sp, #0]
 8001370:	2301      	movs	r3, #1
 8001372:	220b      	movs	r2, #11
 8001374:	216c      	movs	r1, #108	; 0x6c
 8001376:	f002 ff9f 	bl	80042b8 <HAL_I2C_Mem_Read>
 800137a:	4603      	mov	r3, r0
}
 800137c:	4618      	mov	r0, r3
 800137e:	3708      	adds	r7, #8
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}

08001384 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001384:	b590      	push	{r4, r7, lr}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800138a:	f001 f8ff 	bl	800258c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800138e:	f000 f88d 	bl	80014ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001392:	f000 fa9f 	bl	80018d4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001396:	f000 fa47 	bl	8001828 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800139a:	f000 fa1b 	bl	80017d4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800139e:	f000 f93f 	bl	8001620 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80013a2:	f000 f9ed 	bl	8001780 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 80013a6:	f000 f969 	bl	800167c <MX_TIM3_Init>
  MX_ADC1_Init();
 80013aa:	f000 f8e7 	bl	800157c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  AS5600_TypeDef* sensor = AS5600_new();
 80013ae:	f7ff fc7f 	bl	8000cb0 <AS5600_new>
 80013b2:	6038      	str	r0, [r7, #0]
  sensor->i2c_handle = &hi2c1;
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	4a33      	ldr	r2, [pc, #204]	; (8001484 <main+0x100>)
 80013b8:	601a      	str	r2, [r3, #0]
  AS5600_init(sensor);
 80013ba:	6838      	ldr	r0, [r7, #0]
 80013bc:	f7ff fc81 	bl	8000cc2 <AS5600_init>
  UARTDMAConfig();
 80013c0:	f000 fb36 	bl	8001a30 <UARTDMAConfig>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80013c4:	2100      	movs	r1, #0
 80013c6:	4830      	ldr	r0, [pc, #192]	; (8001488 <main+0x104>)
 80013c8:	f005 feea 	bl	80071a0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80013cc:	2108      	movs	r1, #8
 80013ce:	482e      	ldr	r0, [pc, #184]	; (8001488 <main+0x104>)
 80013d0:	f005 fee6 	bl	80071a0 <HAL_TIM_PWM_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adcRawData ,10);
 80013d4:	220a      	movs	r2, #10
 80013d6:	492d      	ldr	r1, [pc, #180]	; (800148c <main+0x108>)
 80013d8:	482d      	ldr	r0, [pc, #180]	; (8001490 <main+0x10c>)
 80013da:	f001 fa9d 	bl	8002918 <HAL_ADC_Start_DMA>
//  AS5600_set_watchdog_timer(sensor,AS5600_WATCHDOG_OFF);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  	uint32_t timestamp = HAL_GetTick() + 5;
 80013de:	f001 f93b 	bl	8002658 <HAL_GetTick>
 80013e2:	4603      	mov	r3, r0
 80013e4:	3305      	adds	r3, #5
 80013e6:	607b      	str	r3, [r7, #4]
	while (1) {
		if (HAL_GetTick() >= timestamp)
 80013e8:	f001 f936 	bl	8002658 <HAL_GetTick>
 80013ec:	4602      	mov	r2, r0
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d8f9      	bhi.n	80013e8 <main+0x64>
		{
			register int i;
			CurrentRaw = 0;
 80013f4:	4b27      	ldr	r3, [pc, #156]	; (8001494 <main+0x110>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	801a      	strh	r2, [r3, #0]
			timestamp += 5;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	3305      	adds	r3, #5
 80013fe:	607b      	str	r3, [r7, #4]
			AS5600_get_angle(sensor, &rawAngle);
 8001400:	4925      	ldr	r1, [pc, #148]	; (8001498 <main+0x114>)
 8001402:	6838      	ldr	r0, [r7, #0]
 8001404:	f7ff ff7f 	bl	8001306 <AS5600_get_angle>

			TxBuffer[0] = 69; // header
 8001408:	4b24      	ldr	r3, [pc, #144]	; (800149c <main+0x118>)
 800140a:	2245      	movs	r2, #69	; 0x45
 800140c:	701a      	strb	r2, [r3, #0]
			TxBuffer[1] = rawAngle & 0xff;
 800140e:	4b22      	ldr	r3, [pc, #136]	; (8001498 <main+0x114>)
 8001410:	881b      	ldrh	r3, [r3, #0]
 8001412:	b2da      	uxtb	r2, r3
 8001414:	4b21      	ldr	r3, [pc, #132]	; (800149c <main+0x118>)
 8001416:	705a      	strb	r2, [r3, #1]
			TxBuffer[2] = (rawAngle & 0xff00) >> 8;
 8001418:	4b1f      	ldr	r3, [pc, #124]	; (8001498 <main+0x114>)
 800141a:	881b      	ldrh	r3, [r3, #0]
 800141c:	0a1b      	lsrs	r3, r3, #8
 800141e:	b29b      	uxth	r3, r3
 8001420:	b2da      	uxtb	r2, r3
 8001422:	4b1e      	ldr	r3, [pc, #120]	; (800149c <main+0x118>)
 8001424:	709a      	strb	r2, [r3, #2]

	  		for (i=0 ; i < 10 ; i++){
 8001426:	2400      	movs	r4, #0
 8001428:	e009      	b.n	800143e <main+0xba>
	  			CurrentRaw += adcRawData[i];
 800142a:	4b18      	ldr	r3, [pc, #96]	; (800148c <main+0x108>)
 800142c:	f833 2014 	ldrh.w	r2, [r3, r4, lsl #1]
 8001430:	4b18      	ldr	r3, [pc, #96]	; (8001494 <main+0x110>)
 8001432:	881b      	ldrh	r3, [r3, #0]
 8001434:	4413      	add	r3, r2
 8001436:	b29a      	uxth	r2, r3
 8001438:	4b16      	ldr	r3, [pc, #88]	; (8001494 <main+0x110>)
 800143a:	801a      	strh	r2, [r3, #0]
	  		for (i=0 ; i < 10 ; i++){
 800143c:	3401      	adds	r4, #1
 800143e:	2c09      	cmp	r4, #9
 8001440:	ddf3      	ble.n	800142a <main+0xa6>
	  		}
	  		Current = CurrentRaw/10;
 8001442:	4b14      	ldr	r3, [pc, #80]	; (8001494 <main+0x110>)
 8001444:	881b      	ldrh	r3, [r3, #0]
 8001446:	4a16      	ldr	r2, [pc, #88]	; (80014a0 <main+0x11c>)
 8001448:	fba2 2303 	umull	r2, r3, r2, r3
 800144c:	08db      	lsrs	r3, r3, #3
 800144e:	b29a      	uxth	r2, r3
 8001450:	4b14      	ldr	r3, [pc, #80]	; (80014a4 <main+0x120>)
 8001452:	801a      	strh	r2, [r3, #0]

			TxBuffer[3] = Current & 0xff;
 8001454:	4b13      	ldr	r3, [pc, #76]	; (80014a4 <main+0x120>)
 8001456:	881b      	ldrh	r3, [r3, #0]
 8001458:	b2da      	uxtb	r2, r3
 800145a:	4b10      	ldr	r3, [pc, #64]	; (800149c <main+0x118>)
 800145c:	70da      	strb	r2, [r3, #3]
			TxBuffer[4] = (Current & 0xff00) >> 8;
 800145e:	4b11      	ldr	r3, [pc, #68]	; (80014a4 <main+0x120>)
 8001460:	881b      	ldrh	r3, [r3, #0]
 8001462:	0a1b      	lsrs	r3, r3, #8
 8001464:	b29b      	uxth	r3, r3
 8001466:	b2da      	uxtb	r2, r3
 8001468:	4b0c      	ldr	r3, [pc, #48]	; (800149c <main+0x118>)
 800146a:	711a      	strb	r2, [r3, #4]
			TxBuffer[5] = 10; // /n
 800146c:	4b0b      	ldr	r3, [pc, #44]	; (800149c <main+0x118>)
 800146e:	220a      	movs	r2, #10
 8001470:	715a      	strb	r2, [r3, #5]

	  		HAL_UART_Transmit_DMA(&huart2,TxBuffer, 6);
 8001472:	2206      	movs	r2, #6
 8001474:	4909      	ldr	r1, [pc, #36]	; (800149c <main+0x118>)
 8001476:	480c      	ldr	r0, [pc, #48]	; (80014a8 <main+0x124>)
 8001478:	f006 fc54 	bl	8007d24 <HAL_UART_Transmit_DMA>

	  		setMotor();
 800147c:	f000 fae6 	bl	8001a4c <setMotor>
		if (HAL_GetTick() >= timestamp)
 8001480:	e7b2      	b.n	80013e8 <main+0x64>
 8001482:	bf00      	nop
 8001484:	20000120 	.word	0x20000120
 8001488:	20000234 	.word	0x20000234
 800148c:	20000424 	.word	0x20000424
 8001490:	20000078 	.word	0x20000078
 8001494:	20000438 	.word	0x20000438
 8001498:	2000043c 	.word	0x2000043c
 800149c:	20000448 	.word	0x20000448
 80014a0:	cccccccd 	.word	0xcccccccd
 80014a4:	2000043a 	.word	0x2000043a
 80014a8:	200002c0 	.word	0x200002c0

080014ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b094      	sub	sp, #80	; 0x50
 80014b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014b2:	f107 0320 	add.w	r3, r7, #32
 80014b6:	2230      	movs	r2, #48	; 0x30
 80014b8:	2100      	movs	r1, #0
 80014ba:	4618      	mov	r0, r3
 80014bc:	f007 fe94 	bl	80091e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014c0:	f107 030c 	add.w	r3, r7, #12
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	605a      	str	r2, [r3, #4]
 80014ca:	609a      	str	r2, [r3, #8]
 80014cc:	60da      	str	r2, [r3, #12]
 80014ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014d0:	2300      	movs	r3, #0
 80014d2:	60bb      	str	r3, [r7, #8]
 80014d4:	4b27      	ldr	r3, [pc, #156]	; (8001574 <SystemClock_Config+0xc8>)
 80014d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d8:	4a26      	ldr	r2, [pc, #152]	; (8001574 <SystemClock_Config+0xc8>)
 80014da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014de:	6413      	str	r3, [r2, #64]	; 0x40
 80014e0:	4b24      	ldr	r3, [pc, #144]	; (8001574 <SystemClock_Config+0xc8>)
 80014e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014e8:	60bb      	str	r3, [r7, #8]
 80014ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014ec:	2300      	movs	r3, #0
 80014ee:	607b      	str	r3, [r7, #4]
 80014f0:	4b21      	ldr	r3, [pc, #132]	; (8001578 <SystemClock_Config+0xcc>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a20      	ldr	r2, [pc, #128]	; (8001578 <SystemClock_Config+0xcc>)
 80014f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014fa:	6013      	str	r3, [r2, #0]
 80014fc:	4b1e      	ldr	r3, [pc, #120]	; (8001578 <SystemClock_Config+0xcc>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001504:	607b      	str	r3, [r7, #4]
 8001506:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001508:	2302      	movs	r3, #2
 800150a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800150c:	2301      	movs	r3, #1
 800150e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001510:	2310      	movs	r3, #16
 8001512:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001514:	2302      	movs	r3, #2
 8001516:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001518:	2300      	movs	r3, #0
 800151a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800151c:	2308      	movs	r3, #8
 800151e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001520:	2364      	movs	r3, #100	; 0x64
 8001522:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001524:	2302      	movs	r3, #2
 8001526:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001528:	2304      	movs	r3, #4
 800152a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800152c:	f107 0320 	add.w	r3, r7, #32
 8001530:	4618      	mov	r0, r3
 8001532:	f005 f8f5 	bl	8006720 <HAL_RCC_OscConfig>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800153c:	f000 fae6 	bl	8001b0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001540:	230f      	movs	r3, #15
 8001542:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001544:	2302      	movs	r3, #2
 8001546:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001548:	2300      	movs	r3, #0
 800154a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800154c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001550:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001552:	2300      	movs	r3, #0
 8001554:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001556:	f107 030c 	add.w	r3, r7, #12
 800155a:	2103      	movs	r1, #3
 800155c:	4618      	mov	r0, r3
 800155e:	f005 fb57 	bl	8006c10 <HAL_RCC_ClockConfig>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001568:	f000 fad0 	bl	8001b0c <Error_Handler>
  }
}
 800156c:	bf00      	nop
 800156e:	3750      	adds	r7, #80	; 0x50
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	40023800 	.word	0x40023800
 8001578:	40007000 	.word	0x40007000

0800157c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b084      	sub	sp, #16
 8001580:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001582:	463b      	mov	r3, r7
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]
 8001588:	605a      	str	r2, [r3, #4]
 800158a:	609a      	str	r2, [r3, #8]
 800158c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800158e:	4b21      	ldr	r3, [pc, #132]	; (8001614 <MX_ADC1_Init+0x98>)
 8001590:	4a21      	ldr	r2, [pc, #132]	; (8001618 <MX_ADC1_Init+0x9c>)
 8001592:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001594:	4b1f      	ldr	r3, [pc, #124]	; (8001614 <MX_ADC1_Init+0x98>)
 8001596:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800159a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800159c:	4b1d      	ldr	r3, [pc, #116]	; (8001614 <MX_ADC1_Init+0x98>)
 800159e:	2200      	movs	r2, #0
 80015a0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80015a2:	4b1c      	ldr	r3, [pc, #112]	; (8001614 <MX_ADC1_Init+0x98>)
 80015a4:	2201      	movs	r2, #1
 80015a6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80015a8:	4b1a      	ldr	r3, [pc, #104]	; (8001614 <MX_ADC1_Init+0x98>)
 80015aa:	2201      	movs	r2, #1
 80015ac:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80015ae:	4b19      	ldr	r3, [pc, #100]	; (8001614 <MX_ADC1_Init+0x98>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015b6:	4b17      	ldr	r3, [pc, #92]	; (8001614 <MX_ADC1_Init+0x98>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015bc:	4b15      	ldr	r3, [pc, #84]	; (8001614 <MX_ADC1_Init+0x98>)
 80015be:	4a17      	ldr	r2, [pc, #92]	; (800161c <MX_ADC1_Init+0xa0>)
 80015c0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015c2:	4b14      	ldr	r3, [pc, #80]	; (8001614 <MX_ADC1_Init+0x98>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80015c8:	4b12      	ldr	r3, [pc, #72]	; (8001614 <MX_ADC1_Init+0x98>)
 80015ca:	2201      	movs	r2, #1
 80015cc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80015ce:	4b11      	ldr	r3, [pc, #68]	; (8001614 <MX_ADC1_Init+0x98>)
 80015d0:	2201      	movs	r2, #1
 80015d2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015d6:	4b0f      	ldr	r3, [pc, #60]	; (8001614 <MX_ADC1_Init+0x98>)
 80015d8:	2201      	movs	r2, #1
 80015da:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80015dc:	480d      	ldr	r0, [pc, #52]	; (8001614 <MX_ADC1_Init+0x98>)
 80015de:	f001 f847 	bl	8002670 <HAL_ADC_Init>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80015e8:	f000 fa90 	bl	8001b0c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80015ec:	2308      	movs	r3, #8
 80015ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80015f0:	2301      	movs	r3, #1
 80015f2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80015f4:	2300      	movs	r3, #0
 80015f6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015f8:	463b      	mov	r3, r7
 80015fa:	4619      	mov	r1, r3
 80015fc:	4805      	ldr	r0, [pc, #20]	; (8001614 <MX_ADC1_Init+0x98>)
 80015fe:	f001 faa3 	bl	8002b48 <HAL_ADC_ConfigChannel>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001608:	f000 fa80 	bl	8001b0c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800160c:	bf00      	nop
 800160e:	3710      	adds	r7, #16
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	20000078 	.word	0x20000078
 8001618:	40012000 	.word	0x40012000
 800161c:	0f000001 	.word	0x0f000001

08001620 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001624:	4b12      	ldr	r3, [pc, #72]	; (8001670 <MX_I2C1_Init+0x50>)
 8001626:	4a13      	ldr	r2, [pc, #76]	; (8001674 <MX_I2C1_Init+0x54>)
 8001628:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800162a:	4b11      	ldr	r3, [pc, #68]	; (8001670 <MX_I2C1_Init+0x50>)
 800162c:	4a12      	ldr	r2, [pc, #72]	; (8001678 <MX_I2C1_Init+0x58>)
 800162e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001630:	4b0f      	ldr	r3, [pc, #60]	; (8001670 <MX_I2C1_Init+0x50>)
 8001632:	2200      	movs	r2, #0
 8001634:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001636:	4b0e      	ldr	r3, [pc, #56]	; (8001670 <MX_I2C1_Init+0x50>)
 8001638:	2200      	movs	r2, #0
 800163a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800163c:	4b0c      	ldr	r3, [pc, #48]	; (8001670 <MX_I2C1_Init+0x50>)
 800163e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001642:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001644:	4b0a      	ldr	r3, [pc, #40]	; (8001670 <MX_I2C1_Init+0x50>)
 8001646:	2200      	movs	r2, #0
 8001648:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800164a:	4b09      	ldr	r3, [pc, #36]	; (8001670 <MX_I2C1_Init+0x50>)
 800164c:	2200      	movs	r2, #0
 800164e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001650:	4b07      	ldr	r3, [pc, #28]	; (8001670 <MX_I2C1_Init+0x50>)
 8001652:	2200      	movs	r2, #0
 8001654:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001656:	4b06      	ldr	r3, [pc, #24]	; (8001670 <MX_I2C1_Init+0x50>)
 8001658:	2200      	movs	r2, #0
 800165a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800165c:	4804      	ldr	r0, [pc, #16]	; (8001670 <MX_I2C1_Init+0x50>)
 800165e:	f002 fbed 	bl	8003e3c <HAL_I2C_Init>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001668:	f000 fa50 	bl	8001b0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800166c:	bf00      	nop
 800166e:	bd80      	pop	{r7, pc}
 8001670:	20000120 	.word	0x20000120
 8001674:	40005400 	.word	0x40005400
 8001678:	00061a80 	.word	0x00061a80

0800167c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b08e      	sub	sp, #56	; 0x38
 8001680:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001682:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001686:	2200      	movs	r2, #0
 8001688:	601a      	str	r2, [r3, #0]
 800168a:	605a      	str	r2, [r3, #4]
 800168c:	609a      	str	r2, [r3, #8]
 800168e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001690:	f107 0320 	add.w	r3, r7, #32
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]
 8001698:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800169a:	1d3b      	adds	r3, r7, #4
 800169c:	2200      	movs	r2, #0
 800169e:	601a      	str	r2, [r3, #0]
 80016a0:	605a      	str	r2, [r3, #4]
 80016a2:	609a      	str	r2, [r3, #8]
 80016a4:	60da      	str	r2, [r3, #12]
 80016a6:	611a      	str	r2, [r3, #16]
 80016a8:	615a      	str	r2, [r3, #20]
 80016aa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80016ac:	4b32      	ldr	r3, [pc, #200]	; (8001778 <MX_TIM3_Init+0xfc>)
 80016ae:	4a33      	ldr	r2, [pc, #204]	; (800177c <MX_TIM3_Init+0x100>)
 80016b0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80016b2:	4b31      	ldr	r3, [pc, #196]	; (8001778 <MX_TIM3_Init+0xfc>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016b8:	4b2f      	ldr	r3, [pc, #188]	; (8001778 <MX_TIM3_Init+0xfc>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 49999;
 80016be:	4b2e      	ldr	r3, [pc, #184]	; (8001778 <MX_TIM3_Init+0xfc>)
 80016c0:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80016c4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016c6:	4b2c      	ldr	r3, [pc, #176]	; (8001778 <MX_TIM3_Init+0xfc>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016cc:	4b2a      	ldr	r3, [pc, #168]	; (8001778 <MX_TIM3_Init+0xfc>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80016d2:	4829      	ldr	r0, [pc, #164]	; (8001778 <MX_TIM3_Init+0xfc>)
 80016d4:	f005 fcbc 	bl	8007050 <HAL_TIM_Base_Init>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80016de:	f000 fa15 	bl	8001b0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016e6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80016e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016ec:	4619      	mov	r1, r3
 80016ee:	4822      	ldr	r0, [pc, #136]	; (8001778 <MX_TIM3_Init+0xfc>)
 80016f0:	f005 fec8 	bl	8007484 <HAL_TIM_ConfigClockSource>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80016fa:	f000 fa07 	bl	8001b0c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80016fe:	481e      	ldr	r0, [pc, #120]	; (8001778 <MX_TIM3_Init+0xfc>)
 8001700:	f005 fcf5 	bl	80070ee <HAL_TIM_PWM_Init>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800170a:	f000 f9ff 	bl	8001b0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800170e:	2300      	movs	r3, #0
 8001710:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001712:	2300      	movs	r3, #0
 8001714:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001716:	f107 0320 	add.w	r3, r7, #32
 800171a:	4619      	mov	r1, r3
 800171c:	4816      	ldr	r0, [pc, #88]	; (8001778 <MX_TIM3_Init+0xfc>)
 800171e:	f006 fa45 	bl	8007bac <HAL_TIMEx_MasterConfigSynchronization>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001728:	f000 f9f0 	bl	8001b0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800172c:	2360      	movs	r3, #96	; 0x60
 800172e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001730:	2300      	movs	r3, #0
 8001732:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001734:	2300      	movs	r3, #0
 8001736:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001738:	2300      	movs	r3, #0
 800173a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800173c:	1d3b      	adds	r3, r7, #4
 800173e:	2200      	movs	r2, #0
 8001740:	4619      	mov	r1, r3
 8001742:	480d      	ldr	r0, [pc, #52]	; (8001778 <MX_TIM3_Init+0xfc>)
 8001744:	f005 fddc 	bl	8007300 <HAL_TIM_PWM_ConfigChannel>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800174e:	f000 f9dd 	bl	8001b0c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001752:	1d3b      	adds	r3, r7, #4
 8001754:	2208      	movs	r2, #8
 8001756:	4619      	mov	r1, r3
 8001758:	4807      	ldr	r0, [pc, #28]	; (8001778 <MX_TIM3_Init+0xfc>)
 800175a:	f005 fdd1 	bl	8007300 <HAL_TIM_PWM_ConfigChannel>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001764:	f000 f9d2 	bl	8001b0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001768:	4803      	ldr	r0, [pc, #12]	; (8001778 <MX_TIM3_Init+0xfc>)
 800176a:	f000 fc85 	bl	8002078 <HAL_TIM_MspPostInit>

}
 800176e:	bf00      	nop
 8001770:	3738      	adds	r7, #56	; 0x38
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	20000234 	.word	0x20000234
 800177c:	40000400 	.word	0x40000400

08001780 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001784:	4b11      	ldr	r3, [pc, #68]	; (80017cc <MX_USART1_UART_Init+0x4c>)
 8001786:	4a12      	ldr	r2, [pc, #72]	; (80017d0 <MX_USART1_UART_Init+0x50>)
 8001788:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800178a:	4b10      	ldr	r3, [pc, #64]	; (80017cc <MX_USART1_UART_Init+0x4c>)
 800178c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001790:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001792:	4b0e      	ldr	r3, [pc, #56]	; (80017cc <MX_USART1_UART_Init+0x4c>)
 8001794:	2200      	movs	r2, #0
 8001796:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001798:	4b0c      	ldr	r3, [pc, #48]	; (80017cc <MX_USART1_UART_Init+0x4c>)
 800179a:	2200      	movs	r2, #0
 800179c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800179e:	4b0b      	ldr	r3, [pc, #44]	; (80017cc <MX_USART1_UART_Init+0x4c>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80017a4:	4b09      	ldr	r3, [pc, #36]	; (80017cc <MX_USART1_UART_Init+0x4c>)
 80017a6:	220c      	movs	r2, #12
 80017a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017aa:	4b08      	ldr	r3, [pc, #32]	; (80017cc <MX_USART1_UART_Init+0x4c>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80017b0:	4b06      	ldr	r3, [pc, #24]	; (80017cc <MX_USART1_UART_Init+0x4c>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80017b6:	4805      	ldr	r0, [pc, #20]	; (80017cc <MX_USART1_UART_Init+0x4c>)
 80017b8:	f006 fa66 	bl	8007c88 <HAL_UART_Init>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80017c2:	f000 f9a3 	bl	8001b0c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80017c6:	bf00      	nop
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	2000027c 	.word	0x2000027c
 80017d0:	40011000 	.word	0x40011000

080017d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017d8:	4b11      	ldr	r3, [pc, #68]	; (8001820 <MX_USART2_UART_Init+0x4c>)
 80017da:	4a12      	ldr	r2, [pc, #72]	; (8001824 <MX_USART2_UART_Init+0x50>)
 80017dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80017de:	4b10      	ldr	r3, [pc, #64]	; (8001820 <MX_USART2_UART_Init+0x4c>)
 80017e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017e6:	4b0e      	ldr	r3, [pc, #56]	; (8001820 <MX_USART2_UART_Init+0x4c>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017ec:	4b0c      	ldr	r3, [pc, #48]	; (8001820 <MX_USART2_UART_Init+0x4c>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017f2:	4b0b      	ldr	r3, [pc, #44]	; (8001820 <MX_USART2_UART_Init+0x4c>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017f8:	4b09      	ldr	r3, [pc, #36]	; (8001820 <MX_USART2_UART_Init+0x4c>)
 80017fa:	220c      	movs	r2, #12
 80017fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017fe:	4b08      	ldr	r3, [pc, #32]	; (8001820 <MX_USART2_UART_Init+0x4c>)
 8001800:	2200      	movs	r2, #0
 8001802:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001804:	4b06      	ldr	r3, [pc, #24]	; (8001820 <MX_USART2_UART_Init+0x4c>)
 8001806:	2200      	movs	r2, #0
 8001808:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800180a:	4805      	ldr	r0, [pc, #20]	; (8001820 <MX_USART2_UART_Init+0x4c>)
 800180c:	f006 fa3c 	bl	8007c88 <HAL_UART_Init>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001816:	f000 f979 	bl	8001b0c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800181a:	bf00      	nop
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	200002c0 	.word	0x200002c0
 8001824:	40004400 	.word	0x40004400

08001828 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800182e:	2300      	movs	r3, #0
 8001830:	607b      	str	r3, [r7, #4]
 8001832:	4b27      	ldr	r3, [pc, #156]	; (80018d0 <MX_DMA_Init+0xa8>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001836:	4a26      	ldr	r2, [pc, #152]	; (80018d0 <MX_DMA_Init+0xa8>)
 8001838:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800183c:	6313      	str	r3, [r2, #48]	; 0x30
 800183e:	4b24      	ldr	r3, [pc, #144]	; (80018d0 <MX_DMA_Init+0xa8>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001842:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001846:	607b      	str	r3, [r7, #4]
 8001848:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800184a:	2300      	movs	r3, #0
 800184c:	603b      	str	r3, [r7, #0]
 800184e:	4b20      	ldr	r3, [pc, #128]	; (80018d0 <MX_DMA_Init+0xa8>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001852:	4a1f      	ldr	r2, [pc, #124]	; (80018d0 <MX_DMA_Init+0xa8>)
 8001854:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001858:	6313      	str	r3, [r2, #48]	; 0x30
 800185a:	4b1d      	ldr	r3, [pc, #116]	; (80018d0 <MX_DMA_Init+0xa8>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001862:	603b      	str	r3, [r7, #0]
 8001864:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001866:	2200      	movs	r2, #0
 8001868:	2100      	movs	r1, #0
 800186a:	200b      	movs	r0, #11
 800186c:	f001 fd01 	bl	8003272 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001870:	200b      	movs	r0, #11
 8001872:	f001 fd1a 	bl	80032aa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001876:	2200      	movs	r2, #0
 8001878:	2100      	movs	r1, #0
 800187a:	200c      	movs	r0, #12
 800187c:	f001 fcf9 	bl	8003272 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001880:	200c      	movs	r0, #12
 8001882:	f001 fd12 	bl	80032aa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001886:	2200      	movs	r2, #0
 8001888:	2100      	movs	r1, #0
 800188a:	2010      	movs	r0, #16
 800188c:	f001 fcf1 	bl	8003272 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001890:	2010      	movs	r0, #16
 8001892:	f001 fd0a 	bl	80032aa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001896:	2200      	movs	r2, #0
 8001898:	2100      	movs	r1, #0
 800189a:	2011      	movs	r0, #17
 800189c:	f001 fce9 	bl	8003272 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80018a0:	2011      	movs	r0, #17
 80018a2:	f001 fd02 	bl	80032aa <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80018a6:	2200      	movs	r2, #0
 80018a8:	2100      	movs	r1, #0
 80018aa:	2038      	movs	r0, #56	; 0x38
 80018ac:	f001 fce1 	bl	8003272 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80018b0:	2038      	movs	r0, #56	; 0x38
 80018b2:	f001 fcfa 	bl	80032aa <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80018b6:	2200      	movs	r2, #0
 80018b8:	2100      	movs	r1, #0
 80018ba:	203a      	movs	r0, #58	; 0x3a
 80018bc:	f001 fcd9 	bl	8003272 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80018c0:	203a      	movs	r0, #58	; 0x3a
 80018c2:	f001 fcf2 	bl	80032aa <HAL_NVIC_EnableIRQ>

}
 80018c6:	bf00      	nop
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	40023800 	.word	0x40023800

080018d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b08a      	sub	sp, #40	; 0x28
 80018d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018da:	f107 0314 	add.w	r3, r7, #20
 80018de:	2200      	movs	r2, #0
 80018e0:	601a      	str	r2, [r3, #0]
 80018e2:	605a      	str	r2, [r3, #4]
 80018e4:	609a      	str	r2, [r3, #8]
 80018e6:	60da      	str	r2, [r3, #12]
 80018e8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018ea:	2300      	movs	r3, #0
 80018ec:	613b      	str	r3, [r7, #16]
 80018ee:	4b2e      	ldr	r3, [pc, #184]	; (80019a8 <MX_GPIO_Init+0xd4>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f2:	4a2d      	ldr	r2, [pc, #180]	; (80019a8 <MX_GPIO_Init+0xd4>)
 80018f4:	f043 0304 	orr.w	r3, r3, #4
 80018f8:	6313      	str	r3, [r2, #48]	; 0x30
 80018fa:	4b2b      	ldr	r3, [pc, #172]	; (80019a8 <MX_GPIO_Init+0xd4>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fe:	f003 0304 	and.w	r3, r3, #4
 8001902:	613b      	str	r3, [r7, #16]
 8001904:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001906:	2300      	movs	r3, #0
 8001908:	60fb      	str	r3, [r7, #12]
 800190a:	4b27      	ldr	r3, [pc, #156]	; (80019a8 <MX_GPIO_Init+0xd4>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190e:	4a26      	ldr	r2, [pc, #152]	; (80019a8 <MX_GPIO_Init+0xd4>)
 8001910:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001914:	6313      	str	r3, [r2, #48]	; 0x30
 8001916:	4b24      	ldr	r3, [pc, #144]	; (80019a8 <MX_GPIO_Init+0xd4>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800191e:	60fb      	str	r3, [r7, #12]
 8001920:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001922:	2300      	movs	r3, #0
 8001924:	60bb      	str	r3, [r7, #8]
 8001926:	4b20      	ldr	r3, [pc, #128]	; (80019a8 <MX_GPIO_Init+0xd4>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192a:	4a1f      	ldr	r2, [pc, #124]	; (80019a8 <MX_GPIO_Init+0xd4>)
 800192c:	f043 0301 	orr.w	r3, r3, #1
 8001930:	6313      	str	r3, [r2, #48]	; 0x30
 8001932:	4b1d      	ldr	r3, [pc, #116]	; (80019a8 <MX_GPIO_Init+0xd4>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001936:	f003 0301 	and.w	r3, r3, #1
 800193a:	60bb      	str	r3, [r7, #8]
 800193c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800193e:	2300      	movs	r3, #0
 8001940:	607b      	str	r3, [r7, #4]
 8001942:	4b19      	ldr	r3, [pc, #100]	; (80019a8 <MX_GPIO_Init+0xd4>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001946:	4a18      	ldr	r2, [pc, #96]	; (80019a8 <MX_GPIO_Init+0xd4>)
 8001948:	f043 0302 	orr.w	r3, r3, #2
 800194c:	6313      	str	r3, [r2, #48]	; 0x30
 800194e:	4b16      	ldr	r3, [pc, #88]	; (80019a8 <MX_GPIO_Init+0xd4>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001952:	f003 0302 	and.w	r3, r3, #2
 8001956:	607b      	str	r3, [r7, #4]
 8001958:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_12, GPIO_PIN_RESET);
 800195a:	2200      	movs	r2, #0
 800195c:	f44f 5181 	mov.w	r1, #4128	; 0x1020
 8001960:	4812      	ldr	r0, [pc, #72]	; (80019ac <MX_GPIO_Init+0xd8>)
 8001962:	f002 fa51 	bl	8003e08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001966:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800196a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800196c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001970:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001972:	2300      	movs	r3, #0
 8001974:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001976:	f107 0314 	add.w	r3, r7, #20
 800197a:	4619      	mov	r1, r3
 800197c:	480c      	ldr	r0, [pc, #48]	; (80019b0 <MX_GPIO_Init+0xdc>)
 800197e:	f002 f8bf 	bl	8003b00 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA12 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_12;
 8001982:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8001986:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001988:	2301      	movs	r3, #1
 800198a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198c:	2300      	movs	r3, #0
 800198e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001990:	2300      	movs	r3, #0
 8001992:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001994:	f107 0314 	add.w	r3, r7, #20
 8001998:	4619      	mov	r1, r3
 800199a:	4804      	ldr	r0, [pc, #16]	; (80019ac <MX_GPIO_Init+0xd8>)
 800199c:	f002 f8b0 	bl	8003b00 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80019a0:	bf00      	nop
 80019a2:	3728      	adds	r7, #40	; 0x28
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	40023800 	.word	0x40023800
 80019ac:	40020000 	.word	0x40020000
 80019b0:	40020800 	.word	0x40020800

080019b4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
	if(huart == &huart2){
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	4a18      	ldr	r2, [pc, #96]	; (8001a20 <HAL_UART_RxCpltCallback+0x6c>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d126      	bne.n	8001a12 <HAL_UART_RxCpltCallback+0x5e>
		if(RxBuffer[0] == 70){ // PWM
 80019c4:	4b17      	ldr	r3, [pc, #92]	; (8001a24 <HAL_UART_RxCpltCallback+0x70>)
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	2b46      	cmp	r3, #70	; 0x46
 80019ca:	d112      	bne.n	80019f2 <HAL_UART_RxCpltCallback+0x3e>
			if(RxBuffer[2] == 1)
 80019cc:	4b15      	ldr	r3, [pc, #84]	; (8001a24 <HAL_UART_RxCpltCallback+0x70>)
 80019ce:	789b      	ldrb	r3, [r3, #2]
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d105      	bne.n	80019e0 <HAL_UART_RxCpltCallback+0x2c>
				PWM = RxBuffer[1];
 80019d4:	4b13      	ldr	r3, [pc, #76]	; (8001a24 <HAL_UART_RxCpltCallback+0x70>)
 80019d6:	785b      	ldrb	r3, [r3, #1]
 80019d8:	461a      	mov	r2, r3
 80019da:	4b13      	ldr	r3, [pc, #76]	; (8001a28 <HAL_UART_RxCpltCallback+0x74>)
 80019dc:	601a      	str	r2, [r3, #0]
 80019de:	e008      	b.n	80019f2 <HAL_UART_RxCpltCallback+0x3e>

			else if(RxBuffer[2] == 2){
 80019e0:	4b10      	ldr	r3, [pc, #64]	; (8001a24 <HAL_UART_RxCpltCallback+0x70>)
 80019e2:	789b      	ldrb	r3, [r3, #2]
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	d104      	bne.n	80019f2 <HAL_UART_RxCpltCallback+0x3e>
				PWM = -RxBuffer[1];
 80019e8:	4b0e      	ldr	r3, [pc, #56]	; (8001a24 <HAL_UART_RxCpltCallback+0x70>)
 80019ea:	785b      	ldrb	r3, [r3, #1]
 80019ec:	425b      	negs	r3, r3
 80019ee:	4a0e      	ldr	r2, [pc, #56]	; (8001a28 <HAL_UART_RxCpltCallback+0x74>)
 80019f0:	6013      	str	r3, [r2, #0]
			}
		}
		if(RxBuffer[0] == 69){ // Frequency
 80019f2:	4b0c      	ldr	r3, [pc, #48]	; (8001a24 <HAL_UART_RxCpltCallback+0x70>)
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	2b45      	cmp	r3, #69	; 0x45
 80019f8:	d10b      	bne.n	8001a12 <HAL_UART_RxCpltCallback+0x5e>
			Freq = (RxBuffer[1] << 8) | RxBuffer[2];
 80019fa:	4b0a      	ldr	r3, [pc, #40]	; (8001a24 <HAL_UART_RxCpltCallback+0x70>)
 80019fc:	785b      	ldrb	r3, [r3, #1]
 80019fe:	021b      	lsls	r3, r3, #8
 8001a00:	b21a      	sxth	r2, r3
 8001a02:	4b08      	ldr	r3, [pc, #32]	; (8001a24 <HAL_UART_RxCpltCallback+0x70>)
 8001a04:	789b      	ldrb	r3, [r3, #2]
 8001a06:	b21b      	sxth	r3, r3
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	b21b      	sxth	r3, r3
 8001a0c:	b29a      	uxth	r2, r3
 8001a0e:	4b07      	ldr	r3, [pc, #28]	; (8001a2c <HAL_UART_RxCpltCallback+0x78>)
 8001a10:	801a      	strh	r2, [r3, #0]
		}
	}
}
 8001a12:	bf00      	nop
 8001a14:	370c      	adds	r7, #12
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	200002c0 	.word	0x200002c0
 8001a24:	20000440 	.word	0x20000440
 8001a28:	20000450 	.word	0x20000450
 8001a2c:	20000454 	.word	0x20000454

08001a30 <UARTDMAConfig>:

void UARTDMAConfig(){
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
	//start UART in DMA Mode
	HAL_UART_Receive_DMA(&huart2, RxBuffer, 3);
 8001a34:	2203      	movs	r2, #3
 8001a36:	4903      	ldr	r1, [pc, #12]	; (8001a44 <UARTDMAConfig+0x14>)
 8001a38:	4803      	ldr	r0, [pc, #12]	; (8001a48 <UARTDMAConfig+0x18>)
 8001a3a:	f006 f9f1 	bl	8007e20 <HAL_UART_Receive_DMA>
}
 8001a3e:	bf00      	nop
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	20000440 	.word	0x20000440
 8001a48:	200002c0 	.word	0x200002c0

08001a4c <setMotor>:

void setMotor(){
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001a50:	2201      	movs	r2, #1
 8001a52:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a56:	4827      	ldr	r0, [pc, #156]	; (8001af4 <setMotor+0xa8>)
 8001a58:	f002 f9d6 	bl	8003e08 <HAL_GPIO_WritePin>
	if(PWM > 0){
 8001a5c:	4b26      	ldr	r3, [pc, #152]	; (8001af8 <setMotor+0xac>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	dd22      	ble.n	8001aaa <setMotor+0x5e>
		PWMWrite(&htim3, TIM_CHANNEL_1, Freq, 100);
 8001a64:	4b25      	ldr	r3, [pc, #148]	; (8001afc <setMotor+0xb0>)
 8001a66:	881b      	ldrh	r3, [r3, #0]
 8001a68:	ee07 3a90 	vmov	s15, r3
 8001a6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a70:	eddf 0a23 	vldr	s1, [pc, #140]	; 8001b00 <setMotor+0xb4>
 8001a74:	eeb0 0a67 	vmov.f32	s0, s15
 8001a78:	2100      	movs	r1, #0
 8001a7a:	4822      	ldr	r0, [pc, #136]	; (8001b04 <setMotor+0xb8>)
 8001a7c:	f000 f84c 	bl	8001b18 <PWMWrite>
		PWMWrite(&htim3, TIM_CHANNEL_3, Freq, PWM);
 8001a80:	4b1e      	ldr	r3, [pc, #120]	; (8001afc <setMotor+0xb0>)
 8001a82:	881b      	ldrh	r3, [r3, #0]
 8001a84:	ee07 3a90 	vmov	s15, r3
 8001a88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a8c:	4b1a      	ldr	r3, [pc, #104]	; (8001af8 <setMotor+0xac>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	ee07 3a10 	vmov	s14, r3
 8001a94:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001a98:	eef0 0a47 	vmov.f32	s1, s14
 8001a9c:	eeb0 0a67 	vmov.f32	s0, s15
 8001aa0:	2108      	movs	r1, #8
 8001aa2:	4818      	ldr	r0, [pc, #96]	; (8001b04 <setMotor+0xb8>)
 8001aa4:	f000 f838 	bl	8001b18 <PWMWrite>
	}
	else{
		PWMWrite(&htim3, TIM_CHANNEL_1, Freq, 0);
		PWMWrite(&htim3, TIM_CHANNEL_3, Freq, PWM);
	}
}
 8001aa8:	e021      	b.n	8001aee <setMotor+0xa2>
		PWMWrite(&htim3, TIM_CHANNEL_1, Freq, 0);
 8001aaa:	4b14      	ldr	r3, [pc, #80]	; (8001afc <setMotor+0xb0>)
 8001aac:	881b      	ldrh	r3, [r3, #0]
 8001aae:	ee07 3a90 	vmov	s15, r3
 8001ab2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ab6:	eddf 0a14 	vldr	s1, [pc, #80]	; 8001b08 <setMotor+0xbc>
 8001aba:	eeb0 0a67 	vmov.f32	s0, s15
 8001abe:	2100      	movs	r1, #0
 8001ac0:	4810      	ldr	r0, [pc, #64]	; (8001b04 <setMotor+0xb8>)
 8001ac2:	f000 f829 	bl	8001b18 <PWMWrite>
		PWMWrite(&htim3, TIM_CHANNEL_3, Freq, PWM);
 8001ac6:	4b0d      	ldr	r3, [pc, #52]	; (8001afc <setMotor+0xb0>)
 8001ac8:	881b      	ldrh	r3, [r3, #0]
 8001aca:	ee07 3a90 	vmov	s15, r3
 8001ace:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ad2:	4b09      	ldr	r3, [pc, #36]	; (8001af8 <setMotor+0xac>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	ee07 3a10 	vmov	s14, r3
 8001ada:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001ade:	eef0 0a47 	vmov.f32	s1, s14
 8001ae2:	eeb0 0a67 	vmov.f32	s0, s15
 8001ae6:	2108      	movs	r1, #8
 8001ae8:	4806      	ldr	r0, [pc, #24]	; (8001b04 <setMotor+0xb8>)
 8001aea:	f000 f815 	bl	8001b18 <PWMWrite>
}
 8001aee:	bf00      	nop
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	40020000 	.word	0x40020000
 8001af8:	20000450 	.word	0x20000450
 8001afc:	20000454 	.word	0x20000454
 8001b00:	42c80000 	.word	0x42c80000
 8001b04:	20000234 	.word	0x20000234
 8001b08:	00000000 	.word	0x00000000

08001b0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b10:	b672      	cpsid	i
}
 8001b12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001b14:	e7fe      	b.n	8001b14 <Error_Handler+0x8>
	...

08001b18 <PWMWrite>:
#include "math.h"

#define CPU_FREQ 100.0 * 1.0e6

uint8_t PWMWrite(TIM_HandleTypeDef* htimx, uint16_t tim_chx, float freq, float percent_duty)
{
 8001b18:	b5b0      	push	{r4, r5, r7, lr}
 8001b1a:	b086      	sub	sp, #24
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	60f8      	str	r0, [r7, #12]
 8001b20:	460b      	mov	r3, r1
 8001b22:	ed87 0a01 	vstr	s0, [r7, #4]
 8001b26:	edc7 0a00 	vstr	s1, [r7]
 8001b2a:	817b      	strh	r3, [r7, #10]
	if (freq == 0)
 8001b2c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b30:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001b34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b38:	d11d      	bne.n	8001b76 <PWMWrite+0x5e>
	{
		__HAL_TIM_SET_COMPARE(htimx, tim_chx, 0);
 8001b3a:	897b      	ldrh	r3, [r7, #10]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d104      	bne.n	8001b4a <PWMWrite+0x32>
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2200      	movs	r2, #0
 8001b46:	635a      	str	r2, [r3, #52]	; 0x34
 8001b48:	e013      	b.n	8001b72 <PWMWrite+0x5a>
 8001b4a:	897b      	ldrh	r3, [r7, #10]
 8001b4c:	2b04      	cmp	r3, #4
 8001b4e:	d104      	bne.n	8001b5a <PWMWrite+0x42>
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	2300      	movs	r3, #0
 8001b56:	6393      	str	r3, [r2, #56]	; 0x38
 8001b58:	e00b      	b.n	8001b72 <PWMWrite+0x5a>
 8001b5a:	897b      	ldrh	r3, [r7, #10]
 8001b5c:	2b08      	cmp	r3, #8
 8001b5e:	d104      	bne.n	8001b6a <PWMWrite+0x52>
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	2300      	movs	r3, #0
 8001b66:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001b68:	e003      	b.n	8001b72 <PWMWrite+0x5a>
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	2300      	movs	r3, #0
 8001b70:	6413      	str	r3, [r2, #64]	; 0x40
		return 0;
 8001b72:	2300      	movs	r3, #0
 8001b74:	e0e9      	b.n	8001d4a <PWMWrite+0x232>
	} else if (freq >= CPU_FREQ / 2.0) return -1;
 8001b76:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b7a:	ed9f 7a79 	vldr	s14, [pc, #484]	; 8001d60 <PWMWrite+0x248>
 8001b7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b86:	db01      	blt.n	8001b8c <PWMWrite+0x74>
 8001b88:	23ff      	movs	r3, #255	; 0xff
 8001b8a:	e0de      	b.n	8001d4a <PWMWrite+0x232>
	uint32_t period_cyc = (uint32_t) (CPU_FREQ / freq);
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f7fe fc87 	bl	80004a0 <__aeabi_f2d>
 8001b92:	4602      	mov	r2, r0
 8001b94:	460b      	mov	r3, r1
 8001b96:	a170      	add	r1, pc, #448	; (adr r1, 8001d58 <PWMWrite+0x240>)
 8001b98:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001b9c:	f7fe fe02 	bl	80007a4 <__aeabi_ddiv>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	4610      	mov	r0, r2
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	f7fe fee4 	bl	8000974 <__aeabi_d2uiz>
 8001bac:	4603      	mov	r3, r0
 8001bae:	617b      	str	r3, [r7, #20]
	uint16_t prescaler = (uint16_t) (period_cyc / 65535 + 1);
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	4a6c      	ldr	r2, [pc, #432]	; (8001d64 <PWMWrite+0x24c>)
 8001bb4:	fba2 2303 	umull	r2, r3, r2, r3
 8001bb8:	0bdb      	lsrs	r3, r3, #15
 8001bba:	b29b      	uxth	r3, r3
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	827b      	strh	r3, [r7, #18]
	uint16_t overflow = (uint16_t) ((period_cyc + (prescaler / 2)) / prescaler);
 8001bc0:	8a7b      	ldrh	r3, [r7, #18]
 8001bc2:	085b      	lsrs	r3, r3, #1
 8001bc4:	b29b      	uxth	r3, r3
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	441a      	add	r2, r3
 8001bcc:	8a7b      	ldrh	r3, [r7, #18]
 8001bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bd2:	823b      	strh	r3, [r7, #16]
	__HAL_TIM_SET_PRESCALER(htimx, prescaler);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	8a7a      	ldrh	r2, [r7, #18]
 8001bda:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_AUTORELOAD(htimx, overflow);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	8a3a      	ldrh	r2, [r7, #16]
 8001be2:	62da      	str	r2, [r3, #44]	; 0x2c
 8001be4:	8a3a      	ldrh	r2, [r7, #16]
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(htimx, tim_chx, (uint16_t) (overflow * fabs(percent_duty) / 100.0));
 8001bea:	897b      	ldrh	r3, [r7, #10]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d128      	bne.n	8001c42 <PWMWrite+0x12a>
 8001bf0:	8a3b      	ldrh	r3, [r7, #16]
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7fe fc42 	bl	800047c <__aeabi_i2d>
 8001bf8:	4604      	mov	r4, r0
 8001bfa:	460d      	mov	r5, r1
 8001bfc:	edd7 7a00 	vldr	s15, [r7]
 8001c00:	eef0 7ae7 	vabs.f32	s15, s15
 8001c04:	ee17 0a90 	vmov	r0, s15
 8001c08:	f7fe fc4a 	bl	80004a0 <__aeabi_f2d>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	460b      	mov	r3, r1
 8001c10:	4620      	mov	r0, r4
 8001c12:	4629      	mov	r1, r5
 8001c14:	f7fe fc9c 	bl	8000550 <__aeabi_dmul>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	4610      	mov	r0, r2
 8001c1e:	4619      	mov	r1, r3
 8001c20:	f04f 0200 	mov.w	r2, #0
 8001c24:	4b50      	ldr	r3, [pc, #320]	; (8001d68 <PWMWrite+0x250>)
 8001c26:	f7fe fdbd 	bl	80007a4 <__aeabi_ddiv>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	4610      	mov	r0, r2
 8001c30:	4619      	mov	r1, r3
 8001c32:	f7fe fe9f 	bl	8000974 <__aeabi_d2uiz>
 8001c36:	4603      	mov	r3, r0
 8001c38:	b29a      	uxth	r2, r3
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	635a      	str	r2, [r3, #52]	; 0x34
 8001c40:	e082      	b.n	8001d48 <PWMWrite+0x230>
 8001c42:	897b      	ldrh	r3, [r7, #10]
 8001c44:	2b04      	cmp	r3, #4
 8001c46:	d129      	bne.n	8001c9c <PWMWrite+0x184>
 8001c48:	8a3b      	ldrh	r3, [r7, #16]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7fe fc16 	bl	800047c <__aeabi_i2d>
 8001c50:	4604      	mov	r4, r0
 8001c52:	460d      	mov	r5, r1
 8001c54:	edd7 7a00 	vldr	s15, [r7]
 8001c58:	eef0 7ae7 	vabs.f32	s15, s15
 8001c5c:	ee17 0a90 	vmov	r0, s15
 8001c60:	f7fe fc1e 	bl	80004a0 <__aeabi_f2d>
 8001c64:	4602      	mov	r2, r0
 8001c66:	460b      	mov	r3, r1
 8001c68:	4620      	mov	r0, r4
 8001c6a:	4629      	mov	r1, r5
 8001c6c:	f7fe fc70 	bl	8000550 <__aeabi_dmul>
 8001c70:	4602      	mov	r2, r0
 8001c72:	460b      	mov	r3, r1
 8001c74:	4610      	mov	r0, r2
 8001c76:	4619      	mov	r1, r3
 8001c78:	f04f 0200 	mov.w	r2, #0
 8001c7c:	4b3a      	ldr	r3, [pc, #232]	; (8001d68 <PWMWrite+0x250>)
 8001c7e:	f7fe fd91 	bl	80007a4 <__aeabi_ddiv>
 8001c82:	4602      	mov	r2, r0
 8001c84:	460b      	mov	r3, r1
 8001c86:	4610      	mov	r0, r2
 8001c88:	4619      	mov	r1, r3
 8001c8a:	f7fe fe73 	bl	8000974 <__aeabi_d2uiz>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	b299      	uxth	r1, r3
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	460b      	mov	r3, r1
 8001c98:	6393      	str	r3, [r2, #56]	; 0x38
 8001c9a:	e055      	b.n	8001d48 <PWMWrite+0x230>
 8001c9c:	897b      	ldrh	r3, [r7, #10]
 8001c9e:	2b08      	cmp	r3, #8
 8001ca0:	d129      	bne.n	8001cf6 <PWMWrite+0x1de>
 8001ca2:	8a3b      	ldrh	r3, [r7, #16]
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7fe fbe9 	bl	800047c <__aeabi_i2d>
 8001caa:	4604      	mov	r4, r0
 8001cac:	460d      	mov	r5, r1
 8001cae:	edd7 7a00 	vldr	s15, [r7]
 8001cb2:	eef0 7ae7 	vabs.f32	s15, s15
 8001cb6:	ee17 0a90 	vmov	r0, s15
 8001cba:	f7fe fbf1 	bl	80004a0 <__aeabi_f2d>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	460b      	mov	r3, r1
 8001cc2:	4620      	mov	r0, r4
 8001cc4:	4629      	mov	r1, r5
 8001cc6:	f7fe fc43 	bl	8000550 <__aeabi_dmul>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	460b      	mov	r3, r1
 8001cce:	4610      	mov	r0, r2
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	f04f 0200 	mov.w	r2, #0
 8001cd6:	4b24      	ldr	r3, [pc, #144]	; (8001d68 <PWMWrite+0x250>)
 8001cd8:	f7fe fd64 	bl	80007a4 <__aeabi_ddiv>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	460b      	mov	r3, r1
 8001ce0:	4610      	mov	r0, r2
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	f7fe fe46 	bl	8000974 <__aeabi_d2uiz>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	b299      	uxth	r1, r3
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001cf4:	e028      	b.n	8001d48 <PWMWrite+0x230>
 8001cf6:	8a3b      	ldrh	r3, [r7, #16]
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7fe fbbf 	bl	800047c <__aeabi_i2d>
 8001cfe:	4604      	mov	r4, r0
 8001d00:	460d      	mov	r5, r1
 8001d02:	edd7 7a00 	vldr	s15, [r7]
 8001d06:	eef0 7ae7 	vabs.f32	s15, s15
 8001d0a:	ee17 0a90 	vmov	r0, s15
 8001d0e:	f7fe fbc7 	bl	80004a0 <__aeabi_f2d>
 8001d12:	4602      	mov	r2, r0
 8001d14:	460b      	mov	r3, r1
 8001d16:	4620      	mov	r0, r4
 8001d18:	4629      	mov	r1, r5
 8001d1a:	f7fe fc19 	bl	8000550 <__aeabi_dmul>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	460b      	mov	r3, r1
 8001d22:	4610      	mov	r0, r2
 8001d24:	4619      	mov	r1, r3
 8001d26:	f04f 0200 	mov.w	r2, #0
 8001d2a:	4b0f      	ldr	r3, [pc, #60]	; (8001d68 <PWMWrite+0x250>)
 8001d2c:	f7fe fd3a 	bl	80007a4 <__aeabi_ddiv>
 8001d30:	4602      	mov	r2, r0
 8001d32:	460b      	mov	r3, r1
 8001d34:	4610      	mov	r0, r2
 8001d36:	4619      	mov	r1, r3
 8001d38:	f7fe fe1c 	bl	8000974 <__aeabi_d2uiz>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	b299      	uxth	r1, r3
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	460b      	mov	r3, r1
 8001d46:	6413      	str	r3, [r2, #64]	; 0x40
	return 0;
 8001d48:	2300      	movs	r3, #0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3718      	adds	r7, #24
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bdb0      	pop	{r4, r5, r7, pc}
 8001d52:	bf00      	nop
 8001d54:	f3af 8000 	nop.w
 8001d58:	00000000 	.word	0x00000000
 8001d5c:	4197d784 	.word	0x4197d784
 8001d60:	4c3ebc20 	.word	0x4c3ebc20
 8001d64:	80008001 	.word	0x80008001
 8001d68:	40590000 	.word	0x40590000

08001d6c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d72:	2300      	movs	r3, #0
 8001d74:	607b      	str	r3, [r7, #4]
 8001d76:	4b10      	ldr	r3, [pc, #64]	; (8001db8 <HAL_MspInit+0x4c>)
 8001d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d7a:	4a0f      	ldr	r2, [pc, #60]	; (8001db8 <HAL_MspInit+0x4c>)
 8001d7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d80:	6453      	str	r3, [r2, #68]	; 0x44
 8001d82:	4b0d      	ldr	r3, [pc, #52]	; (8001db8 <HAL_MspInit+0x4c>)
 8001d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d8a:	607b      	str	r3, [r7, #4]
 8001d8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d8e:	2300      	movs	r3, #0
 8001d90:	603b      	str	r3, [r7, #0]
 8001d92:	4b09      	ldr	r3, [pc, #36]	; (8001db8 <HAL_MspInit+0x4c>)
 8001d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d96:	4a08      	ldr	r2, [pc, #32]	; (8001db8 <HAL_MspInit+0x4c>)
 8001d98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d9c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d9e:	4b06      	ldr	r3, [pc, #24]	; (8001db8 <HAL_MspInit+0x4c>)
 8001da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001da6:	603b      	str	r3, [r7, #0]
 8001da8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001daa:	2007      	movs	r0, #7
 8001dac:	f001 fa56 	bl	800325c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001db0:	bf00      	nop
 8001db2:	3708      	adds	r7, #8
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	40023800 	.word	0x40023800

08001dbc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b08a      	sub	sp, #40	; 0x28
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc4:	f107 0314 	add.w	r3, r7, #20
 8001dc8:	2200      	movs	r2, #0
 8001dca:	601a      	str	r2, [r3, #0]
 8001dcc:	605a      	str	r2, [r3, #4]
 8001dce:	609a      	str	r2, [r3, #8]
 8001dd0:	60da      	str	r2, [r3, #12]
 8001dd2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a33      	ldr	r2, [pc, #204]	; (8001ea8 <HAL_ADC_MspInit+0xec>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d15f      	bne.n	8001e9e <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001dde:	2300      	movs	r3, #0
 8001de0:	613b      	str	r3, [r7, #16]
 8001de2:	4b32      	ldr	r3, [pc, #200]	; (8001eac <HAL_ADC_MspInit+0xf0>)
 8001de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001de6:	4a31      	ldr	r2, [pc, #196]	; (8001eac <HAL_ADC_MspInit+0xf0>)
 8001de8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dec:	6453      	str	r3, [r2, #68]	; 0x44
 8001dee:	4b2f      	ldr	r3, [pc, #188]	; (8001eac <HAL_ADC_MspInit+0xf0>)
 8001df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001df6:	613b      	str	r3, [r7, #16]
 8001df8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	60fb      	str	r3, [r7, #12]
 8001dfe:	4b2b      	ldr	r3, [pc, #172]	; (8001eac <HAL_ADC_MspInit+0xf0>)
 8001e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e02:	4a2a      	ldr	r2, [pc, #168]	; (8001eac <HAL_ADC_MspInit+0xf0>)
 8001e04:	f043 0302 	orr.w	r3, r3, #2
 8001e08:	6313      	str	r3, [r2, #48]	; 0x30
 8001e0a:	4b28      	ldr	r3, [pc, #160]	; (8001eac <HAL_ADC_MspInit+0xf0>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0e:	f003 0302 	and.w	r3, r3, #2
 8001e12:	60fb      	str	r3, [r7, #12]
 8001e14:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001e16:	2301      	movs	r3, #1
 8001e18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e22:	f107 0314 	add.w	r3, r7, #20
 8001e26:	4619      	mov	r1, r3
 8001e28:	4821      	ldr	r0, [pc, #132]	; (8001eb0 <HAL_ADC_MspInit+0xf4>)
 8001e2a:	f001 fe69 	bl	8003b00 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001e2e:	4b21      	ldr	r3, [pc, #132]	; (8001eb4 <HAL_ADC_MspInit+0xf8>)
 8001e30:	4a21      	ldr	r2, [pc, #132]	; (8001eb8 <HAL_ADC_MspInit+0xfc>)
 8001e32:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001e34:	4b1f      	ldr	r3, [pc, #124]	; (8001eb4 <HAL_ADC_MspInit+0xf8>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e3a:	4b1e      	ldr	r3, [pc, #120]	; (8001eb4 <HAL_ADC_MspInit+0xf8>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e40:	4b1c      	ldr	r3, [pc, #112]	; (8001eb4 <HAL_ADC_MspInit+0xf8>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001e46:	4b1b      	ldr	r3, [pc, #108]	; (8001eb4 <HAL_ADC_MspInit+0xf8>)
 8001e48:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e4c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001e4e:	4b19      	ldr	r3, [pc, #100]	; (8001eb4 <HAL_ADC_MspInit+0xf8>)
 8001e50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e54:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001e56:	4b17      	ldr	r3, [pc, #92]	; (8001eb4 <HAL_ADC_MspInit+0xf8>)
 8001e58:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e5c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001e5e:	4b15      	ldr	r3, [pc, #84]	; (8001eb4 <HAL_ADC_MspInit+0xf8>)
 8001e60:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e64:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001e66:	4b13      	ldr	r3, [pc, #76]	; (8001eb4 <HAL_ADC_MspInit+0xf8>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e6c:	4b11      	ldr	r3, [pc, #68]	; (8001eb4 <HAL_ADC_MspInit+0xf8>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001e72:	4810      	ldr	r0, [pc, #64]	; (8001eb4 <HAL_ADC_MspInit+0xf8>)
 8001e74:	f001 fa34 	bl	80032e0 <HAL_DMA_Init>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001e7e:	f7ff fe45 	bl	8001b0c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a0b      	ldr	r2, [pc, #44]	; (8001eb4 <HAL_ADC_MspInit+0xf8>)
 8001e86:	639a      	str	r2, [r3, #56]	; 0x38
 8001e88:	4a0a      	ldr	r2, [pc, #40]	; (8001eb4 <HAL_ADC_MspInit+0xf8>)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001e8e:	2200      	movs	r2, #0
 8001e90:	2100      	movs	r1, #0
 8001e92:	2012      	movs	r0, #18
 8001e94:	f001 f9ed 	bl	8003272 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001e98:	2012      	movs	r0, #18
 8001e9a:	f001 fa06 	bl	80032aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001e9e:	bf00      	nop
 8001ea0:	3728      	adds	r7, #40	; 0x28
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	40012000 	.word	0x40012000
 8001eac:	40023800 	.word	0x40023800
 8001eb0:	40020400 	.word	0x40020400
 8001eb4:	200000c0 	.word	0x200000c0
 8001eb8:	40026410 	.word	0x40026410

08001ebc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b08a      	sub	sp, #40	; 0x28
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ec4:	f107 0314 	add.w	r3, r7, #20
 8001ec8:	2200      	movs	r2, #0
 8001eca:	601a      	str	r2, [r3, #0]
 8001ecc:	605a      	str	r2, [r3, #4]
 8001ece:	609a      	str	r2, [r3, #8]
 8001ed0:	60da      	str	r2, [r3, #12]
 8001ed2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a4f      	ldr	r2, [pc, #316]	; (8002018 <HAL_I2C_MspInit+0x15c>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	f040 8098 	bne.w	8002010 <HAL_I2C_MspInit+0x154>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	613b      	str	r3, [r7, #16]
 8001ee4:	4b4d      	ldr	r3, [pc, #308]	; (800201c <HAL_I2C_MspInit+0x160>)
 8001ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee8:	4a4c      	ldr	r2, [pc, #304]	; (800201c <HAL_I2C_MspInit+0x160>)
 8001eea:	f043 0302 	orr.w	r3, r3, #2
 8001eee:	6313      	str	r3, [r2, #48]	; 0x30
 8001ef0:	4b4a      	ldr	r3, [pc, #296]	; (800201c <HAL_I2C_MspInit+0x160>)
 8001ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef4:	f003 0302 	and.w	r3, r3, #2
 8001ef8:	613b      	str	r3, [r7, #16]
 8001efa:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001efc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f02:	2312      	movs	r3, #18
 8001f04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f06:	2301      	movs	r3, #1
 8001f08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f0e:	2304      	movs	r3, #4
 8001f10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f12:	f107 0314 	add.w	r3, r7, #20
 8001f16:	4619      	mov	r1, r3
 8001f18:	4841      	ldr	r0, [pc, #260]	; (8002020 <HAL_I2C_MspInit+0x164>)
 8001f1a:	f001 fdf1 	bl	8003b00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f1e:	2300      	movs	r3, #0
 8001f20:	60fb      	str	r3, [r7, #12]
 8001f22:	4b3e      	ldr	r3, [pc, #248]	; (800201c <HAL_I2C_MspInit+0x160>)
 8001f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f26:	4a3d      	ldr	r2, [pc, #244]	; (800201c <HAL_I2C_MspInit+0x160>)
 8001f28:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f2c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f2e:	4b3b      	ldr	r3, [pc, #236]	; (800201c <HAL_I2C_MspInit+0x160>)
 8001f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f36:	60fb      	str	r3, [r7, #12]
 8001f38:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8001f3a:	4b3a      	ldr	r3, [pc, #232]	; (8002024 <HAL_I2C_MspInit+0x168>)
 8001f3c:	4a3a      	ldr	r2, [pc, #232]	; (8002028 <HAL_I2C_MspInit+0x16c>)
 8001f3e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8001f40:	4b38      	ldr	r3, [pc, #224]	; (8002024 <HAL_I2C_MspInit+0x168>)
 8001f42:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f46:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f48:	4b36      	ldr	r3, [pc, #216]	; (8002024 <HAL_I2C_MspInit+0x168>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f4e:	4b35      	ldr	r3, [pc, #212]	; (8002024 <HAL_I2C_MspInit+0x168>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001f54:	4b33      	ldr	r3, [pc, #204]	; (8002024 <HAL_I2C_MspInit+0x168>)
 8001f56:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f5a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f5c:	4b31      	ldr	r3, [pc, #196]	; (8002024 <HAL_I2C_MspInit+0x168>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f62:	4b30      	ldr	r3, [pc, #192]	; (8002024 <HAL_I2C_MspInit+0x168>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001f68:	4b2e      	ldr	r3, [pc, #184]	; (8002024 <HAL_I2C_MspInit+0x168>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001f6e:	4b2d      	ldr	r3, [pc, #180]	; (8002024 <HAL_I2C_MspInit+0x168>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f74:	4b2b      	ldr	r3, [pc, #172]	; (8002024 <HAL_I2C_MspInit+0x168>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001f7a:	482a      	ldr	r0, [pc, #168]	; (8002024 <HAL_I2C_MspInit+0x168>)
 8001f7c:	f001 f9b0 	bl	80032e0 <HAL_DMA_Init>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d001      	beq.n	8001f8a <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 8001f86:	f7ff fdc1 	bl	8001b0c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4a25      	ldr	r2, [pc, #148]	; (8002024 <HAL_I2C_MspInit+0x168>)
 8001f8e:	639a      	str	r2, [r3, #56]	; 0x38
 8001f90:	4a24      	ldr	r2, [pc, #144]	; (8002024 <HAL_I2C_MspInit+0x168>)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 8001f96:	4b25      	ldr	r3, [pc, #148]	; (800202c <HAL_I2C_MspInit+0x170>)
 8001f98:	4a25      	ldr	r2, [pc, #148]	; (8002030 <HAL_I2C_MspInit+0x174>)
 8001f9a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 8001f9c:	4b23      	ldr	r3, [pc, #140]	; (800202c <HAL_I2C_MspInit+0x170>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001fa2:	4b22      	ldr	r3, [pc, #136]	; (800202c <HAL_I2C_MspInit+0x170>)
 8001fa4:	2240      	movs	r2, #64	; 0x40
 8001fa6:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fa8:	4b20      	ldr	r3, [pc, #128]	; (800202c <HAL_I2C_MspInit+0x170>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001fae:	4b1f      	ldr	r3, [pc, #124]	; (800202c <HAL_I2C_MspInit+0x170>)
 8001fb0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fb4:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001fb6:	4b1d      	ldr	r3, [pc, #116]	; (800202c <HAL_I2C_MspInit+0x170>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001fbc:	4b1b      	ldr	r3, [pc, #108]	; (800202c <HAL_I2C_MspInit+0x170>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001fc2:	4b1a      	ldr	r3, [pc, #104]	; (800202c <HAL_I2C_MspInit+0x170>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001fc8:	4b18      	ldr	r3, [pc, #96]	; (800202c <HAL_I2C_MspInit+0x170>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001fce:	4b17      	ldr	r3, [pc, #92]	; (800202c <HAL_I2C_MspInit+0x170>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001fd4:	4815      	ldr	r0, [pc, #84]	; (800202c <HAL_I2C_MspInit+0x170>)
 8001fd6:	f001 f983 	bl	80032e0 <HAL_DMA_Init>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d001      	beq.n	8001fe4 <HAL_I2C_MspInit+0x128>
    {
      Error_Handler();
 8001fe0:	f7ff fd94 	bl	8001b0c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	4a11      	ldr	r2, [pc, #68]	; (800202c <HAL_I2C_MspInit+0x170>)
 8001fe8:	635a      	str	r2, [r3, #52]	; 0x34
 8001fea:	4a10      	ldr	r2, [pc, #64]	; (800202c <HAL_I2C_MspInit+0x170>)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	2100      	movs	r1, #0
 8001ff4:	201f      	movs	r0, #31
 8001ff6:	f001 f93c 	bl	8003272 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001ffa:	201f      	movs	r0, #31
 8001ffc:	f001 f955 	bl	80032aa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8002000:	2200      	movs	r2, #0
 8002002:	2100      	movs	r1, #0
 8002004:	2020      	movs	r0, #32
 8002006:	f001 f934 	bl	8003272 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800200a:	2020      	movs	r0, #32
 800200c:	f001 f94d 	bl	80032aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002010:	bf00      	nop
 8002012:	3728      	adds	r7, #40	; 0x28
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	40005400 	.word	0x40005400
 800201c:	40023800 	.word	0x40023800
 8002020:	40020400 	.word	0x40020400
 8002024:	20000174 	.word	0x20000174
 8002028:	40026010 	.word	0x40026010
 800202c:	200001d4 	.word	0x200001d4
 8002030:	40026028 	.word	0x40026028

08002034 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002034:	b480      	push	{r7}
 8002036:	b085      	sub	sp, #20
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a0b      	ldr	r2, [pc, #44]	; (8002070 <HAL_TIM_Base_MspInit+0x3c>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d10d      	bne.n	8002062 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002046:	2300      	movs	r3, #0
 8002048:	60fb      	str	r3, [r7, #12]
 800204a:	4b0a      	ldr	r3, [pc, #40]	; (8002074 <HAL_TIM_Base_MspInit+0x40>)
 800204c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204e:	4a09      	ldr	r2, [pc, #36]	; (8002074 <HAL_TIM_Base_MspInit+0x40>)
 8002050:	f043 0302 	orr.w	r3, r3, #2
 8002054:	6413      	str	r3, [r2, #64]	; 0x40
 8002056:	4b07      	ldr	r3, [pc, #28]	; (8002074 <HAL_TIM_Base_MspInit+0x40>)
 8002058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205a:	f003 0302 	and.w	r3, r3, #2
 800205e:	60fb      	str	r3, [r7, #12]
 8002060:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002062:	bf00      	nop
 8002064:	3714      	adds	r7, #20
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	40000400 	.word	0x40000400
 8002074:	40023800 	.word	0x40023800

08002078 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b088      	sub	sp, #32
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002080:	f107 030c 	add.w	r3, r7, #12
 8002084:	2200      	movs	r2, #0
 8002086:	601a      	str	r2, [r3, #0]
 8002088:	605a      	str	r2, [r3, #4]
 800208a:	609a      	str	r2, [r3, #8]
 800208c:	60da      	str	r2, [r3, #12]
 800208e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a12      	ldr	r2, [pc, #72]	; (80020e0 <HAL_TIM_MspPostInit+0x68>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d11e      	bne.n	80020d8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800209a:	2300      	movs	r3, #0
 800209c:	60bb      	str	r3, [r7, #8]
 800209e:	4b11      	ldr	r3, [pc, #68]	; (80020e4 <HAL_TIM_MspPostInit+0x6c>)
 80020a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a2:	4a10      	ldr	r2, [pc, #64]	; (80020e4 <HAL_TIM_MspPostInit+0x6c>)
 80020a4:	f043 0304 	orr.w	r3, r3, #4
 80020a8:	6313      	str	r3, [r2, #48]	; 0x30
 80020aa:	4b0e      	ldr	r3, [pc, #56]	; (80020e4 <HAL_TIM_MspPostInit+0x6c>)
 80020ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ae:	f003 0304 	and.w	r3, r3, #4
 80020b2:	60bb      	str	r3, [r7, #8]
 80020b4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8;
 80020b6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80020ba:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020bc:	2302      	movs	r3, #2
 80020be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c0:	2300      	movs	r3, #0
 80020c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c4:	2300      	movs	r3, #0
 80020c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80020c8:	2302      	movs	r3, #2
 80020ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020cc:	f107 030c 	add.w	r3, r7, #12
 80020d0:	4619      	mov	r1, r3
 80020d2:	4805      	ldr	r0, [pc, #20]	; (80020e8 <HAL_TIM_MspPostInit+0x70>)
 80020d4:	f001 fd14 	bl	8003b00 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80020d8:	bf00      	nop
 80020da:	3720      	adds	r7, #32
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	40000400 	.word	0x40000400
 80020e4:	40023800 	.word	0x40023800
 80020e8:	40020800 	.word	0x40020800

080020ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b08c      	sub	sp, #48	; 0x30
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f4:	f107 031c 	add.w	r3, r7, #28
 80020f8:	2200      	movs	r2, #0
 80020fa:	601a      	str	r2, [r3, #0]
 80020fc:	605a      	str	r2, [r3, #4]
 80020fe:	609a      	str	r2, [r3, #8]
 8002100:	60da      	str	r2, [r3, #12]
 8002102:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a90      	ldr	r2, [pc, #576]	; (800234c <HAL_UART_MspInit+0x260>)
 800210a:	4293      	cmp	r3, r2
 800210c:	f040 8083 	bne.w	8002216 <HAL_UART_MspInit+0x12a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002110:	2300      	movs	r3, #0
 8002112:	61bb      	str	r3, [r7, #24]
 8002114:	4b8e      	ldr	r3, [pc, #568]	; (8002350 <HAL_UART_MspInit+0x264>)
 8002116:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002118:	4a8d      	ldr	r2, [pc, #564]	; (8002350 <HAL_UART_MspInit+0x264>)
 800211a:	f043 0310 	orr.w	r3, r3, #16
 800211e:	6453      	str	r3, [r2, #68]	; 0x44
 8002120:	4b8b      	ldr	r3, [pc, #556]	; (8002350 <HAL_UART_MspInit+0x264>)
 8002122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002124:	f003 0310 	and.w	r3, r3, #16
 8002128:	61bb      	str	r3, [r7, #24]
 800212a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800212c:	2300      	movs	r3, #0
 800212e:	617b      	str	r3, [r7, #20]
 8002130:	4b87      	ldr	r3, [pc, #540]	; (8002350 <HAL_UART_MspInit+0x264>)
 8002132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002134:	4a86      	ldr	r2, [pc, #536]	; (8002350 <HAL_UART_MspInit+0x264>)
 8002136:	f043 0301 	orr.w	r3, r3, #1
 800213a:	6313      	str	r3, [r2, #48]	; 0x30
 800213c:	4b84      	ldr	r3, [pc, #528]	; (8002350 <HAL_UART_MspInit+0x264>)
 800213e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002140:	f003 0301 	and.w	r3, r3, #1
 8002144:	617b      	str	r3, [r7, #20]
 8002146:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002148:	2300      	movs	r3, #0
 800214a:	613b      	str	r3, [r7, #16]
 800214c:	4b80      	ldr	r3, [pc, #512]	; (8002350 <HAL_UART_MspInit+0x264>)
 800214e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002150:	4a7f      	ldr	r2, [pc, #508]	; (8002350 <HAL_UART_MspInit+0x264>)
 8002152:	f043 0302 	orr.w	r3, r3, #2
 8002156:	6313      	str	r3, [r2, #48]	; 0x30
 8002158:	4b7d      	ldr	r3, [pc, #500]	; (8002350 <HAL_UART_MspInit+0x264>)
 800215a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215c:	f003 0302 	and.w	r3, r3, #2
 8002160:	613b      	str	r3, [r7, #16]
 8002162:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002164:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002168:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800216a:	2302      	movs	r3, #2
 800216c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216e:	2300      	movs	r3, #0
 8002170:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002172:	2303      	movs	r3, #3
 8002174:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002176:	2307      	movs	r3, #7
 8002178:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800217a:	f107 031c 	add.w	r3, r7, #28
 800217e:	4619      	mov	r1, r3
 8002180:	4874      	ldr	r0, [pc, #464]	; (8002354 <HAL_UART_MspInit+0x268>)
 8002182:	f001 fcbd 	bl	8003b00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002186:	2380      	movs	r3, #128	; 0x80
 8002188:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800218a:	2302      	movs	r3, #2
 800218c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218e:	2300      	movs	r3, #0
 8002190:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002192:	2303      	movs	r3, #3
 8002194:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002196:	2307      	movs	r3, #7
 8002198:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800219a:	f107 031c 	add.w	r3, r7, #28
 800219e:	4619      	mov	r1, r3
 80021a0:	486d      	ldr	r0, [pc, #436]	; (8002358 <HAL_UART_MspInit+0x26c>)
 80021a2:	f001 fcad 	bl	8003b00 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80021a6:	4b6d      	ldr	r3, [pc, #436]	; (800235c <HAL_UART_MspInit+0x270>)
 80021a8:	4a6d      	ldr	r2, [pc, #436]	; (8002360 <HAL_UART_MspInit+0x274>)
 80021aa:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80021ac:	4b6b      	ldr	r3, [pc, #428]	; (800235c <HAL_UART_MspInit+0x270>)
 80021ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80021b2:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80021b4:	4b69      	ldr	r3, [pc, #420]	; (800235c <HAL_UART_MspInit+0x270>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021ba:	4b68      	ldr	r3, [pc, #416]	; (800235c <HAL_UART_MspInit+0x270>)
 80021bc:	2200      	movs	r2, #0
 80021be:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80021c0:	4b66      	ldr	r3, [pc, #408]	; (800235c <HAL_UART_MspInit+0x270>)
 80021c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021c6:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021c8:	4b64      	ldr	r3, [pc, #400]	; (800235c <HAL_UART_MspInit+0x270>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021ce:	4b63      	ldr	r3, [pc, #396]	; (800235c <HAL_UART_MspInit+0x270>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80021d4:	4b61      	ldr	r3, [pc, #388]	; (800235c <HAL_UART_MspInit+0x270>)
 80021d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021da:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80021dc:	4b5f      	ldr	r3, [pc, #380]	; (800235c <HAL_UART_MspInit+0x270>)
 80021de:	2200      	movs	r2, #0
 80021e0:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80021e2:	4b5e      	ldr	r3, [pc, #376]	; (800235c <HAL_UART_MspInit+0x270>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80021e8:	485c      	ldr	r0, [pc, #368]	; (800235c <HAL_UART_MspInit+0x270>)
 80021ea:	f001 f879 	bl	80032e0 <HAL_DMA_Init>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d001      	beq.n	80021f8 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 80021f4:	f7ff fc8a 	bl	8001b0c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	4a58      	ldr	r2, [pc, #352]	; (800235c <HAL_UART_MspInit+0x270>)
 80021fc:	639a      	str	r2, [r3, #56]	; 0x38
 80021fe:	4a57      	ldr	r2, [pc, #348]	; (800235c <HAL_UART_MspInit+0x270>)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002204:	2200      	movs	r2, #0
 8002206:	2100      	movs	r1, #0
 8002208:	2025      	movs	r0, #37	; 0x25
 800220a:	f001 f832 	bl	8003272 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800220e:	2025      	movs	r0, #37	; 0x25
 8002210:	f001 f84b 	bl	80032aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002214:	e096      	b.n	8002344 <HAL_UART_MspInit+0x258>
  else if(huart->Instance==USART2)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a52      	ldr	r2, [pc, #328]	; (8002364 <HAL_UART_MspInit+0x278>)
 800221c:	4293      	cmp	r3, r2
 800221e:	f040 8091 	bne.w	8002344 <HAL_UART_MspInit+0x258>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002222:	2300      	movs	r3, #0
 8002224:	60fb      	str	r3, [r7, #12]
 8002226:	4b4a      	ldr	r3, [pc, #296]	; (8002350 <HAL_UART_MspInit+0x264>)
 8002228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222a:	4a49      	ldr	r2, [pc, #292]	; (8002350 <HAL_UART_MspInit+0x264>)
 800222c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002230:	6413      	str	r3, [r2, #64]	; 0x40
 8002232:	4b47      	ldr	r3, [pc, #284]	; (8002350 <HAL_UART_MspInit+0x264>)
 8002234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800223a:	60fb      	str	r3, [r7, #12]
 800223c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800223e:	2300      	movs	r3, #0
 8002240:	60bb      	str	r3, [r7, #8]
 8002242:	4b43      	ldr	r3, [pc, #268]	; (8002350 <HAL_UART_MspInit+0x264>)
 8002244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002246:	4a42      	ldr	r2, [pc, #264]	; (8002350 <HAL_UART_MspInit+0x264>)
 8002248:	f043 0301 	orr.w	r3, r3, #1
 800224c:	6313      	str	r3, [r2, #48]	; 0x30
 800224e:	4b40      	ldr	r3, [pc, #256]	; (8002350 <HAL_UART_MspInit+0x264>)
 8002250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002252:	f003 0301 	and.w	r3, r3, #1
 8002256:	60bb      	str	r3, [r7, #8]
 8002258:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800225a:	230c      	movs	r3, #12
 800225c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800225e:	2302      	movs	r3, #2
 8002260:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002262:	2300      	movs	r3, #0
 8002264:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002266:	2303      	movs	r3, #3
 8002268:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800226a:	2307      	movs	r3, #7
 800226c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800226e:	f107 031c 	add.w	r3, r7, #28
 8002272:	4619      	mov	r1, r3
 8002274:	4837      	ldr	r0, [pc, #220]	; (8002354 <HAL_UART_MspInit+0x268>)
 8002276:	f001 fc43 	bl	8003b00 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800227a:	4b3b      	ldr	r3, [pc, #236]	; (8002368 <HAL_UART_MspInit+0x27c>)
 800227c:	4a3b      	ldr	r2, [pc, #236]	; (800236c <HAL_UART_MspInit+0x280>)
 800227e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002280:	4b39      	ldr	r3, [pc, #228]	; (8002368 <HAL_UART_MspInit+0x27c>)
 8002282:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002286:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002288:	4b37      	ldr	r3, [pc, #220]	; (8002368 <HAL_UART_MspInit+0x27c>)
 800228a:	2200      	movs	r2, #0
 800228c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800228e:	4b36      	ldr	r3, [pc, #216]	; (8002368 <HAL_UART_MspInit+0x27c>)
 8002290:	2200      	movs	r2, #0
 8002292:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002294:	4b34      	ldr	r3, [pc, #208]	; (8002368 <HAL_UART_MspInit+0x27c>)
 8002296:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800229a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800229c:	4b32      	ldr	r3, [pc, #200]	; (8002368 <HAL_UART_MspInit+0x27c>)
 800229e:	2200      	movs	r2, #0
 80022a0:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80022a2:	4b31      	ldr	r3, [pc, #196]	; (8002368 <HAL_UART_MspInit+0x27c>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80022a8:	4b2f      	ldr	r3, [pc, #188]	; (8002368 <HAL_UART_MspInit+0x27c>)
 80022aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022ae:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80022b0:	4b2d      	ldr	r3, [pc, #180]	; (8002368 <HAL_UART_MspInit+0x27c>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80022b6:	4b2c      	ldr	r3, [pc, #176]	; (8002368 <HAL_UART_MspInit+0x27c>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80022bc:	482a      	ldr	r0, [pc, #168]	; (8002368 <HAL_UART_MspInit+0x27c>)
 80022be:	f001 f80f 	bl	80032e0 <HAL_DMA_Init>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d001      	beq.n	80022cc <HAL_UART_MspInit+0x1e0>
      Error_Handler();
 80022c8:	f7ff fc20 	bl	8001b0c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	4a26      	ldr	r2, [pc, #152]	; (8002368 <HAL_UART_MspInit+0x27c>)
 80022d0:	639a      	str	r2, [r3, #56]	; 0x38
 80022d2:	4a25      	ldr	r2, [pc, #148]	; (8002368 <HAL_UART_MspInit+0x27c>)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80022d8:	4b25      	ldr	r3, [pc, #148]	; (8002370 <HAL_UART_MspInit+0x284>)
 80022da:	4a26      	ldr	r2, [pc, #152]	; (8002374 <HAL_UART_MspInit+0x288>)
 80022dc:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80022de:	4b24      	ldr	r3, [pc, #144]	; (8002370 <HAL_UART_MspInit+0x284>)
 80022e0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80022e4:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80022e6:	4b22      	ldr	r3, [pc, #136]	; (8002370 <HAL_UART_MspInit+0x284>)
 80022e8:	2240      	movs	r2, #64	; 0x40
 80022ea:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80022ec:	4b20      	ldr	r3, [pc, #128]	; (8002370 <HAL_UART_MspInit+0x284>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80022f2:	4b1f      	ldr	r3, [pc, #124]	; (8002370 <HAL_UART_MspInit+0x284>)
 80022f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022f8:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80022fa:	4b1d      	ldr	r3, [pc, #116]	; (8002370 <HAL_UART_MspInit+0x284>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002300:	4b1b      	ldr	r3, [pc, #108]	; (8002370 <HAL_UART_MspInit+0x284>)
 8002302:	2200      	movs	r2, #0
 8002304:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002306:	4b1a      	ldr	r3, [pc, #104]	; (8002370 <HAL_UART_MspInit+0x284>)
 8002308:	2200      	movs	r2, #0
 800230a:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800230c:	4b18      	ldr	r3, [pc, #96]	; (8002370 <HAL_UART_MspInit+0x284>)
 800230e:	2200      	movs	r2, #0
 8002310:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002312:	4b17      	ldr	r3, [pc, #92]	; (8002370 <HAL_UART_MspInit+0x284>)
 8002314:	2200      	movs	r2, #0
 8002316:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002318:	4815      	ldr	r0, [pc, #84]	; (8002370 <HAL_UART_MspInit+0x284>)
 800231a:	f000 ffe1 	bl	80032e0 <HAL_DMA_Init>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d001      	beq.n	8002328 <HAL_UART_MspInit+0x23c>
      Error_Handler();
 8002324:	f7ff fbf2 	bl	8001b0c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	4a11      	ldr	r2, [pc, #68]	; (8002370 <HAL_UART_MspInit+0x284>)
 800232c:	635a      	str	r2, [r3, #52]	; 0x34
 800232e:	4a10      	ldr	r2, [pc, #64]	; (8002370 <HAL_UART_MspInit+0x284>)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002334:	2200      	movs	r2, #0
 8002336:	2100      	movs	r1, #0
 8002338:	2026      	movs	r0, #38	; 0x26
 800233a:	f000 ff9a 	bl	8003272 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800233e:	2026      	movs	r0, #38	; 0x26
 8002340:	f000 ffb3 	bl	80032aa <HAL_NVIC_EnableIRQ>
}
 8002344:	bf00      	nop
 8002346:	3730      	adds	r7, #48	; 0x30
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	40011000 	.word	0x40011000
 8002350:	40023800 	.word	0x40023800
 8002354:	40020000 	.word	0x40020000
 8002358:	40020400 	.word	0x40020400
 800235c:	20000304 	.word	0x20000304
 8002360:	40026440 	.word	0x40026440
 8002364:	40004400 	.word	0x40004400
 8002368:	20000364 	.word	0x20000364
 800236c:	40026088 	.word	0x40026088
 8002370:	200003c4 	.word	0x200003c4
 8002374:	400260a0 	.word	0x400260a0

08002378 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800237c:	e7fe      	b.n	800237c <NMI_Handler+0x4>

0800237e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800237e:	b480      	push	{r7}
 8002380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002382:	e7fe      	b.n	8002382 <HardFault_Handler+0x4>

08002384 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002384:	b480      	push	{r7}
 8002386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002388:	e7fe      	b.n	8002388 <MemManage_Handler+0x4>

0800238a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800238a:	b480      	push	{r7}
 800238c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800238e:	e7fe      	b.n	800238e <BusFault_Handler+0x4>

08002390 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002390:	b480      	push	{r7}
 8002392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002394:	e7fe      	b.n	8002394 <UsageFault_Handler+0x4>

08002396 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002396:	b480      	push	{r7}
 8002398:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800239a:	bf00      	nop
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023a8:	bf00      	nop
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr

080023b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023b2:	b480      	push	{r7}
 80023b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023b6:	bf00      	nop
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr

080023c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023c4:	f000 f934 	bl	8002630 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023c8:	bf00      	nop
 80023ca:	bd80      	pop	{r7, pc}

080023cc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80023d0:	4802      	ldr	r0, [pc, #8]	; (80023dc <DMA1_Stream0_IRQHandler+0x10>)
 80023d2:	f001 f91d 	bl	8003610 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80023d6:	bf00      	nop
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	20000174 	.word	0x20000174

080023e0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80023e4:	4802      	ldr	r0, [pc, #8]	; (80023f0 <DMA1_Stream1_IRQHandler+0x10>)
 80023e6:	f001 f913 	bl	8003610 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80023ea:	bf00      	nop
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	200001d4 	.word	0x200001d4

080023f4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80023f8:	4802      	ldr	r0, [pc, #8]	; (8002404 <DMA1_Stream5_IRQHandler+0x10>)
 80023fa:	f001 f909 	bl	8003610 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80023fe:	bf00      	nop
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	20000364 	.word	0x20000364

08002408 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800240c:	4802      	ldr	r0, [pc, #8]	; (8002418 <DMA1_Stream6_IRQHandler+0x10>)
 800240e:	f001 f8ff 	bl	8003610 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002412:	bf00      	nop
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	200003c4 	.word	0x200003c4

0800241c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002420:	4802      	ldr	r0, [pc, #8]	; (800242c <ADC_IRQHandler+0x10>)
 8002422:	f000 f968 	bl	80026f6 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002426:	bf00      	nop
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	20000078 	.word	0x20000078

08002430 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002434:	4802      	ldr	r0, [pc, #8]	; (8002440 <I2C1_EV_IRQHandler+0x10>)
 8002436:	f002 f965 	bl	8004704 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800243a:	bf00      	nop
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	20000120 	.word	0x20000120

08002444 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002448:	4802      	ldr	r0, [pc, #8]	; (8002454 <I2C1_ER_IRQHandler+0x10>)
 800244a:	f002 faae 	bl	80049aa <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800244e:	bf00      	nop
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	20000120 	.word	0x20000120

08002458 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800245c:	4802      	ldr	r0, [pc, #8]	; (8002468 <USART1_IRQHandler+0x10>)
 800245e:	f005 fd0f 	bl	8007e80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002462:	bf00      	nop
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	2000027c 	.word	0x2000027c

0800246c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002470:	4802      	ldr	r0, [pc, #8]	; (800247c <USART2_IRQHandler+0x10>)
 8002472:	f005 fd05 	bl	8007e80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002476:	bf00      	nop
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	200002c0 	.word	0x200002c0

08002480 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002484:	4802      	ldr	r0, [pc, #8]	; (8002490 <DMA2_Stream0_IRQHandler+0x10>)
 8002486:	f001 f8c3 	bl	8003610 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800248a:	bf00      	nop
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	200000c0 	.word	0x200000c0

08002494 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002498:	4802      	ldr	r0, [pc, #8]	; (80024a4 <DMA2_Stream2_IRQHandler+0x10>)
 800249a:	f001 f8b9 	bl	8003610 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800249e:	bf00      	nop
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	20000304 	.word	0x20000304

080024a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b086      	sub	sp, #24
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024b0:	4a14      	ldr	r2, [pc, #80]	; (8002504 <_sbrk+0x5c>)
 80024b2:	4b15      	ldr	r3, [pc, #84]	; (8002508 <_sbrk+0x60>)
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024bc:	4b13      	ldr	r3, [pc, #76]	; (800250c <_sbrk+0x64>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d102      	bne.n	80024ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024c4:	4b11      	ldr	r3, [pc, #68]	; (800250c <_sbrk+0x64>)
 80024c6:	4a12      	ldr	r2, [pc, #72]	; (8002510 <_sbrk+0x68>)
 80024c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024ca:	4b10      	ldr	r3, [pc, #64]	; (800250c <_sbrk+0x64>)
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4413      	add	r3, r2
 80024d2:	693a      	ldr	r2, [r7, #16]
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d207      	bcs.n	80024e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024d8:	f006 fe9e 	bl	8009218 <__errno>
 80024dc:	4603      	mov	r3, r0
 80024de:	220c      	movs	r2, #12
 80024e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024e2:	f04f 33ff 	mov.w	r3, #4294967295
 80024e6:	e009      	b.n	80024fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024e8:	4b08      	ldr	r3, [pc, #32]	; (800250c <_sbrk+0x64>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024ee:	4b07      	ldr	r3, [pc, #28]	; (800250c <_sbrk+0x64>)
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4413      	add	r3, r2
 80024f6:	4a05      	ldr	r2, [pc, #20]	; (800250c <_sbrk+0x64>)
 80024f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024fa:	68fb      	ldr	r3, [r7, #12]
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3718      	adds	r7, #24
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}
 8002504:	20020000 	.word	0x20020000
 8002508:	00000400 	.word	0x00000400
 800250c:	20000458 	.word	0x20000458
 8002510:	200005a8 	.word	0x200005a8

08002514 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002518:	4b06      	ldr	r3, [pc, #24]	; (8002534 <SystemInit+0x20>)
 800251a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800251e:	4a05      	ldr	r2, [pc, #20]	; (8002534 <SystemInit+0x20>)
 8002520:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002524:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002528:	bf00      	nop
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	e000ed00 	.word	0xe000ed00

08002538 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002538:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002570 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800253c:	480d      	ldr	r0, [pc, #52]	; (8002574 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800253e:	490e      	ldr	r1, [pc, #56]	; (8002578 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002540:	4a0e      	ldr	r2, [pc, #56]	; (800257c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002542:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002544:	e002      	b.n	800254c <LoopCopyDataInit>

08002546 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002546:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002548:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800254a:	3304      	adds	r3, #4

0800254c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800254c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800254e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002550:	d3f9      	bcc.n	8002546 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002552:	4a0b      	ldr	r2, [pc, #44]	; (8002580 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002554:	4c0b      	ldr	r4, [pc, #44]	; (8002584 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002556:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002558:	e001      	b.n	800255e <LoopFillZerobss>

0800255a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800255a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800255c:	3204      	adds	r2, #4

0800255e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800255e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002560:	d3fb      	bcc.n	800255a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002562:	f7ff ffd7 	bl	8002514 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002566:	f006 fe5d 	bl	8009224 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800256a:	f7fe ff0b 	bl	8001384 <main>
  bx  lr    
 800256e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002570:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002574:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002578:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800257c:	080092b8 	.word	0x080092b8
  ldr r2, =_sbss
 8002580:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8002584:	200005a8 	.word	0x200005a8

08002588 <DMA1_Stream2_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002588:	e7fe      	b.n	8002588 <DMA1_Stream2_IRQHandler>
	...

0800258c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002590:	4b0e      	ldr	r3, [pc, #56]	; (80025cc <HAL_Init+0x40>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a0d      	ldr	r2, [pc, #52]	; (80025cc <HAL_Init+0x40>)
 8002596:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800259a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800259c:	4b0b      	ldr	r3, [pc, #44]	; (80025cc <HAL_Init+0x40>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a0a      	ldr	r2, [pc, #40]	; (80025cc <HAL_Init+0x40>)
 80025a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025a8:	4b08      	ldr	r3, [pc, #32]	; (80025cc <HAL_Init+0x40>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a07      	ldr	r2, [pc, #28]	; (80025cc <HAL_Init+0x40>)
 80025ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025b4:	2003      	movs	r0, #3
 80025b6:	f000 fe51 	bl	800325c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025ba:	2000      	movs	r0, #0
 80025bc:	f000 f808 	bl	80025d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025c0:	f7ff fbd4 	bl	8001d6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025c4:	2300      	movs	r3, #0
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	40023c00 	.word	0x40023c00

080025d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80025d8:	4b12      	ldr	r3, [pc, #72]	; (8002624 <HAL_InitTick+0x54>)
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	4b12      	ldr	r3, [pc, #72]	; (8002628 <HAL_InitTick+0x58>)
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	4619      	mov	r1, r3
 80025e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80025ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80025ee:	4618      	mov	r0, r3
 80025f0:	f000 fe69 	bl	80032c6 <HAL_SYSTICK_Config>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d001      	beq.n	80025fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e00e      	b.n	800261c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2b0f      	cmp	r3, #15
 8002602:	d80a      	bhi.n	800261a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002604:	2200      	movs	r2, #0
 8002606:	6879      	ldr	r1, [r7, #4]
 8002608:	f04f 30ff 	mov.w	r0, #4294967295
 800260c:	f000 fe31 	bl	8003272 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002610:	4a06      	ldr	r2, [pc, #24]	; (800262c <HAL_InitTick+0x5c>)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002616:	2300      	movs	r3, #0
 8002618:	e000      	b.n	800261c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
}
 800261c:	4618      	mov	r0, r3
 800261e:	3708      	adds	r7, #8
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}
 8002624:	20000000 	.word	0x20000000
 8002628:	20000008 	.word	0x20000008
 800262c:	20000004 	.word	0x20000004

08002630 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002630:	b480      	push	{r7}
 8002632:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002634:	4b06      	ldr	r3, [pc, #24]	; (8002650 <HAL_IncTick+0x20>)
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	461a      	mov	r2, r3
 800263a:	4b06      	ldr	r3, [pc, #24]	; (8002654 <HAL_IncTick+0x24>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4413      	add	r3, r2
 8002640:	4a04      	ldr	r2, [pc, #16]	; (8002654 <HAL_IncTick+0x24>)
 8002642:	6013      	str	r3, [r2, #0]
}
 8002644:	bf00      	nop
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr
 800264e:	bf00      	nop
 8002650:	20000008 	.word	0x20000008
 8002654:	2000045c 	.word	0x2000045c

08002658 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002658:	b480      	push	{r7}
 800265a:	af00      	add	r7, sp, #0
  return uwTick;
 800265c:	4b03      	ldr	r3, [pc, #12]	; (800266c <HAL_GetTick+0x14>)
 800265e:	681b      	ldr	r3, [r3, #0]
}
 8002660:	4618      	mov	r0, r3
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	2000045c 	.word	0x2000045c

08002670 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b084      	sub	sp, #16
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002678:	2300      	movs	r3, #0
 800267a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d101      	bne.n	8002686 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e033      	b.n	80026ee <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268a:	2b00      	cmp	r3, #0
 800268c:	d109      	bne.n	80026a2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f7ff fb94 	bl	8001dbc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2200      	movs	r2, #0
 8002698:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2200      	movs	r2, #0
 800269e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a6:	f003 0310 	and.w	r3, r3, #16
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d118      	bne.n	80026e0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80026b6:	f023 0302 	bic.w	r3, r3, #2
 80026ba:	f043 0202 	orr.w	r2, r3, #2
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f000 fb72 	bl	8002dac <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2200      	movs	r2, #0
 80026cc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d2:	f023 0303 	bic.w	r3, r3, #3
 80026d6:	f043 0201 	orr.w	r2, r3, #1
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	641a      	str	r2, [r3, #64]	; 0x40
 80026de:	e001      	b.n	80026e4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2200      	movs	r2, #0
 80026e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80026ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3710      	adds	r7, #16
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}

080026f6 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80026f6:	b580      	push	{r7, lr}
 80026f8:	b086      	sub	sp, #24
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80026fe:	2300      	movs	r3, #0
 8002700:	617b      	str	r3, [r7, #20]
 8002702:	2300      	movs	r3, #0
 8002704:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	f003 0302 	and.w	r3, r3, #2
 800271c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	f003 0320 	and.w	r3, r3, #32
 8002724:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d049      	beq.n	80027c0 <HAL_ADC_IRQHandler+0xca>
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d046      	beq.n	80027c0 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002736:	f003 0310 	and.w	r3, r3, #16
 800273a:	2b00      	cmp	r3, #0
 800273c:	d105      	bne.n	800274a <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002742:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002754:	2b00      	cmp	r3, #0
 8002756:	d12b      	bne.n	80027b0 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800275c:	2b00      	cmp	r3, #0
 800275e:	d127      	bne.n	80027b0 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002766:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800276a:	2b00      	cmp	r3, #0
 800276c:	d006      	beq.n	800277c <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002778:	2b00      	cmp	r3, #0
 800277a:	d119      	bne.n	80027b0 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	685a      	ldr	r2, [r3, #4]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f022 0220 	bic.w	r2, r2, #32
 800278a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002790:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d105      	bne.n	80027b0 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a8:	f043 0201 	orr.w	r2, r3, #1
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	f000 f9a1 	bl	8002af8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f06f 0212 	mvn.w	r2, #18
 80027be:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f003 0304 	and.w	r3, r3, #4
 80027c6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027ce:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d057      	beq.n	8002886 <HAL_ADC_IRQHandler+0x190>
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d054      	beq.n	8002886 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e0:	f003 0310 	and.w	r3, r3, #16
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d105      	bne.n	80027f4 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ec:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d139      	bne.n	8002876 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002808:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800280c:	2b00      	cmp	r3, #0
 800280e:	d006      	beq.n	800281e <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800281a:	2b00      	cmp	r3, #0
 800281c:	d12b      	bne.n	8002876 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002828:	2b00      	cmp	r3, #0
 800282a:	d124      	bne.n	8002876 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002836:	2b00      	cmp	r3, #0
 8002838:	d11d      	bne.n	8002876 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800283e:	2b00      	cmp	r3, #0
 8002840:	d119      	bne.n	8002876 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	685a      	ldr	r2, [r3, #4]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002850:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002856:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002862:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002866:	2b00      	cmp	r3, #0
 8002868:	d105      	bne.n	8002876 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286e:	f043 0201 	orr.w	r2, r3, #1
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f000 fc16 	bl	80030a8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f06f 020c 	mvn.w	r2, #12
 8002884:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	f003 0301 	and.w	r3, r3, #1
 800288c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002894:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d017      	beq.n	80028cc <HAL_ADC_IRQHandler+0x1d6>
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d014      	beq.n	80028cc <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 0301 	and.w	r3, r3, #1
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d10d      	bne.n	80028cc <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f000 f92f 	bl	8002b20 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f06f 0201 	mvn.w	r2, #1
 80028ca:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f003 0320 	and.w	r3, r3, #32
 80028d2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80028da:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d015      	beq.n	800290e <HAL_ADC_IRQHandler+0x218>
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d012      	beq.n	800290e <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ec:	f043 0202 	orr.w	r2, r3, #2
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f06f 0220 	mvn.w	r2, #32
 80028fc:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f000 f918 	bl	8002b34 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f06f 0220 	mvn.w	r2, #32
 800290c:	601a      	str	r2, [r3, #0]
  }
}
 800290e:	bf00      	nop
 8002910:	3718      	adds	r7, #24
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
	...

08002918 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b086      	sub	sp, #24
 800291c:	af00      	add	r7, sp, #0
 800291e:	60f8      	str	r0, [r7, #12]
 8002920:	60b9      	str	r1, [r7, #8]
 8002922:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002924:	2300      	movs	r3, #0
 8002926:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800292e:	2b01      	cmp	r3, #1
 8002930:	d101      	bne.n	8002936 <HAL_ADC_Start_DMA+0x1e>
 8002932:	2302      	movs	r3, #2
 8002934:	e0ce      	b.n	8002ad4 <HAL_ADC_Start_DMA+0x1bc>
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2201      	movs	r2, #1
 800293a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	f003 0301 	and.w	r3, r3, #1
 8002948:	2b01      	cmp	r3, #1
 800294a:	d018      	beq.n	800297e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	689a      	ldr	r2, [r3, #8]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f042 0201 	orr.w	r2, r2, #1
 800295a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800295c:	4b5f      	ldr	r3, [pc, #380]	; (8002adc <HAL_ADC_Start_DMA+0x1c4>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a5f      	ldr	r2, [pc, #380]	; (8002ae0 <HAL_ADC_Start_DMA+0x1c8>)
 8002962:	fba2 2303 	umull	r2, r3, r2, r3
 8002966:	0c9a      	lsrs	r2, r3, #18
 8002968:	4613      	mov	r3, r2
 800296a:	005b      	lsls	r3, r3, #1
 800296c:	4413      	add	r3, r2
 800296e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002970:	e002      	b.n	8002978 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	3b01      	subs	r3, #1
 8002976:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d1f9      	bne.n	8002972 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002988:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800298c:	d107      	bne.n	800299e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	689a      	ldr	r2, [r3, #8]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800299c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	f003 0301 	and.w	r3, r3, #1
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	f040 8086 	bne.w	8002aba <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80029b6:	f023 0301 	bic.w	r3, r3, #1
 80029ba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d007      	beq.n	80029e0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80029d8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029ec:	d106      	bne.n	80029fc <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029f2:	f023 0206 	bic.w	r2, r3, #6
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	645a      	str	r2, [r3, #68]	; 0x44
 80029fa:	e002      	b.n	8002a02 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2200      	movs	r2, #0
 8002a00:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2200      	movs	r2, #0
 8002a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a0a:	4b36      	ldr	r3, [pc, #216]	; (8002ae4 <HAL_ADC_Start_DMA+0x1cc>)
 8002a0c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a12:	4a35      	ldr	r2, [pc, #212]	; (8002ae8 <HAL_ADC_Start_DMA+0x1d0>)
 8002a14:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a1a:	4a34      	ldr	r2, [pc, #208]	; (8002aec <HAL_ADC_Start_DMA+0x1d4>)
 8002a1c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a22:	4a33      	ldr	r2, [pc, #204]	; (8002af0 <HAL_ADC_Start_DMA+0x1d8>)
 8002a24:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002a2e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	685a      	ldr	r2, [r3, #4]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002a3e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	689a      	ldr	r2, [r3, #8]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a4e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	334c      	adds	r3, #76	; 0x4c
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	68ba      	ldr	r2, [r7, #8]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	f000 fcec 	bl	800343c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f003 031f 	and.w	r3, r3, #31
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d10f      	bne.n	8002a90 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d129      	bne.n	8002ad2 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	689a      	ldr	r2, [r3, #8]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002a8c:	609a      	str	r2, [r3, #8]
 8002a8e:	e020      	b.n	8002ad2 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a17      	ldr	r2, [pc, #92]	; (8002af4 <HAL_ADC_Start_DMA+0x1dc>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d11b      	bne.n	8002ad2 <HAL_ADC_Start_DMA+0x1ba>
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d114      	bne.n	8002ad2 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	689a      	ldr	r2, [r3, #8]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002ab6:	609a      	str	r2, [r3, #8]
 8002ab8:	e00b      	b.n	8002ad2 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002abe:	f043 0210 	orr.w	r2, r3, #16
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aca:	f043 0201 	orr.w	r2, r3, #1
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002ad2:	2300      	movs	r3, #0
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3718      	adds	r7, #24
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	20000000 	.word	0x20000000
 8002ae0:	431bde83 	.word	0x431bde83
 8002ae4:	40012300 	.word	0x40012300
 8002ae8:	08002fa5 	.word	0x08002fa5
 8002aec:	0800305f 	.word	0x0800305f
 8002af0:	0800307b 	.word	0x0800307b
 8002af4:	40012000 	.word	0x40012000

08002af8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002b00:	bf00      	nop
 8002b02:	370c      	adds	r7, #12
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr

08002b0c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002b14:	bf00      	nop
 8002b16:	370c      	adds	r7, #12
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr

08002b20 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b083      	sub	sp, #12
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002b28:	bf00      	nop
 8002b2a:	370c      	adds	r7, #12
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr

08002b34 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002b3c:	bf00      	nop
 8002b3e:	370c      	adds	r7, #12
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr

08002b48 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b085      	sub	sp, #20
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002b52:	2300      	movs	r3, #0
 8002b54:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d101      	bne.n	8002b64 <HAL_ADC_ConfigChannel+0x1c>
 8002b60:	2302      	movs	r3, #2
 8002b62:	e113      	b.n	8002d8c <HAL_ADC_ConfigChannel+0x244>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2201      	movs	r2, #1
 8002b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2b09      	cmp	r3, #9
 8002b72:	d925      	bls.n	8002bc0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	68d9      	ldr	r1, [r3, #12]
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	b29b      	uxth	r3, r3
 8002b80:	461a      	mov	r2, r3
 8002b82:	4613      	mov	r3, r2
 8002b84:	005b      	lsls	r3, r3, #1
 8002b86:	4413      	add	r3, r2
 8002b88:	3b1e      	subs	r3, #30
 8002b8a:	2207      	movs	r2, #7
 8002b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b90:	43da      	mvns	r2, r3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	400a      	ands	r2, r1
 8002b98:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	68d9      	ldr	r1, [r3, #12]
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	689a      	ldr	r2, [r3, #8]
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	b29b      	uxth	r3, r3
 8002baa:	4618      	mov	r0, r3
 8002bac:	4603      	mov	r3, r0
 8002bae:	005b      	lsls	r3, r3, #1
 8002bb0:	4403      	add	r3, r0
 8002bb2:	3b1e      	subs	r3, #30
 8002bb4:	409a      	lsls	r2, r3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	430a      	orrs	r2, r1
 8002bbc:	60da      	str	r2, [r3, #12]
 8002bbe:	e022      	b.n	8002c06 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	6919      	ldr	r1, [r3, #16]
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	b29b      	uxth	r3, r3
 8002bcc:	461a      	mov	r2, r3
 8002bce:	4613      	mov	r3, r2
 8002bd0:	005b      	lsls	r3, r3, #1
 8002bd2:	4413      	add	r3, r2
 8002bd4:	2207      	movs	r2, #7
 8002bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bda:	43da      	mvns	r2, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	400a      	ands	r2, r1
 8002be2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	6919      	ldr	r1, [r3, #16]
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	689a      	ldr	r2, [r3, #8]
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	005b      	lsls	r3, r3, #1
 8002bfa:	4403      	add	r3, r0
 8002bfc:	409a      	lsls	r2, r3
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	430a      	orrs	r2, r1
 8002c04:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	2b06      	cmp	r3, #6
 8002c0c:	d824      	bhi.n	8002c58 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	685a      	ldr	r2, [r3, #4]
 8002c18:	4613      	mov	r3, r2
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	4413      	add	r3, r2
 8002c1e:	3b05      	subs	r3, #5
 8002c20:	221f      	movs	r2, #31
 8002c22:	fa02 f303 	lsl.w	r3, r2, r3
 8002c26:	43da      	mvns	r2, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	400a      	ands	r2, r1
 8002c2e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	685a      	ldr	r2, [r3, #4]
 8002c42:	4613      	mov	r3, r2
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	4413      	add	r3, r2
 8002c48:	3b05      	subs	r3, #5
 8002c4a:	fa00 f203 	lsl.w	r2, r0, r3
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	430a      	orrs	r2, r1
 8002c54:	635a      	str	r2, [r3, #52]	; 0x34
 8002c56:	e04c      	b.n	8002cf2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	2b0c      	cmp	r3, #12
 8002c5e:	d824      	bhi.n	8002caa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	685a      	ldr	r2, [r3, #4]
 8002c6a:	4613      	mov	r3, r2
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	4413      	add	r3, r2
 8002c70:	3b23      	subs	r3, #35	; 0x23
 8002c72:	221f      	movs	r2, #31
 8002c74:	fa02 f303 	lsl.w	r3, r2, r3
 8002c78:	43da      	mvns	r2, r3
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	400a      	ands	r2, r1
 8002c80:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	4618      	mov	r0, r3
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	685a      	ldr	r2, [r3, #4]
 8002c94:	4613      	mov	r3, r2
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	4413      	add	r3, r2
 8002c9a:	3b23      	subs	r3, #35	; 0x23
 8002c9c:	fa00 f203 	lsl.w	r2, r0, r3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	430a      	orrs	r2, r1
 8002ca6:	631a      	str	r2, [r3, #48]	; 0x30
 8002ca8:	e023      	b.n	8002cf2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	685a      	ldr	r2, [r3, #4]
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	4413      	add	r3, r2
 8002cba:	3b41      	subs	r3, #65	; 0x41
 8002cbc:	221f      	movs	r2, #31
 8002cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc2:	43da      	mvns	r2, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	400a      	ands	r2, r1
 8002cca:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	4618      	mov	r0, r3
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	685a      	ldr	r2, [r3, #4]
 8002cde:	4613      	mov	r3, r2
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	4413      	add	r3, r2
 8002ce4:	3b41      	subs	r3, #65	; 0x41
 8002ce6:	fa00 f203 	lsl.w	r2, r0, r3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	430a      	orrs	r2, r1
 8002cf0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002cf2:	4b29      	ldr	r3, [pc, #164]	; (8002d98 <HAL_ADC_ConfigChannel+0x250>)
 8002cf4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a28      	ldr	r2, [pc, #160]	; (8002d9c <HAL_ADC_ConfigChannel+0x254>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d10f      	bne.n	8002d20 <HAL_ADC_ConfigChannel+0x1d8>
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	2b12      	cmp	r3, #18
 8002d06:	d10b      	bne.n	8002d20 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a1d      	ldr	r2, [pc, #116]	; (8002d9c <HAL_ADC_ConfigChannel+0x254>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d12b      	bne.n	8002d82 <HAL_ADC_ConfigChannel+0x23a>
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a1c      	ldr	r2, [pc, #112]	; (8002da0 <HAL_ADC_ConfigChannel+0x258>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d003      	beq.n	8002d3c <HAL_ADC_ConfigChannel+0x1f4>
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2b11      	cmp	r3, #17
 8002d3a:	d122      	bne.n	8002d82 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a11      	ldr	r2, [pc, #68]	; (8002da0 <HAL_ADC_ConfigChannel+0x258>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d111      	bne.n	8002d82 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002d5e:	4b11      	ldr	r3, [pc, #68]	; (8002da4 <HAL_ADC_ConfigChannel+0x25c>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a11      	ldr	r2, [pc, #68]	; (8002da8 <HAL_ADC_ConfigChannel+0x260>)
 8002d64:	fba2 2303 	umull	r2, r3, r2, r3
 8002d68:	0c9a      	lsrs	r2, r3, #18
 8002d6a:	4613      	mov	r3, r2
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	4413      	add	r3, r2
 8002d70:	005b      	lsls	r3, r3, #1
 8002d72:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002d74:	e002      	b.n	8002d7c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	3b01      	subs	r3, #1
 8002d7a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d1f9      	bne.n	8002d76 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002d8a:	2300      	movs	r3, #0
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3714      	adds	r7, #20
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr
 8002d98:	40012300 	.word	0x40012300
 8002d9c:	40012000 	.word	0x40012000
 8002da0:	10000012 	.word	0x10000012
 8002da4:	20000000 	.word	0x20000000
 8002da8:	431bde83 	.word	0x431bde83

08002dac <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b085      	sub	sp, #20
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002db4:	4b79      	ldr	r3, [pc, #484]	; (8002f9c <ADC_Init+0x1f0>)
 8002db6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	685a      	ldr	r2, [r3, #4]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	431a      	orrs	r2, r3
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	685a      	ldr	r2, [r3, #4]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002de0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	6859      	ldr	r1, [r3, #4]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	691b      	ldr	r3, [r3, #16]
 8002dec:	021a      	lsls	r2, r3, #8
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	430a      	orrs	r2, r1
 8002df4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	685a      	ldr	r2, [r3, #4]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002e04:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	6859      	ldr	r1, [r3, #4]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	689a      	ldr	r2, [r3, #8]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	430a      	orrs	r2, r1
 8002e16:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	689a      	ldr	r2, [r3, #8]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e26:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	6899      	ldr	r1, [r3, #8]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	68da      	ldr	r2, [r3, #12]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	430a      	orrs	r2, r1
 8002e38:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e3e:	4a58      	ldr	r2, [pc, #352]	; (8002fa0 <ADC_Init+0x1f4>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d022      	beq.n	8002e8a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	689a      	ldr	r2, [r3, #8]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e52:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	6899      	ldr	r1, [r3, #8]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	430a      	orrs	r2, r1
 8002e64:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	689a      	ldr	r2, [r3, #8]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002e74:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	6899      	ldr	r1, [r3, #8]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	430a      	orrs	r2, r1
 8002e86:	609a      	str	r2, [r3, #8]
 8002e88:	e00f      	b.n	8002eaa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	689a      	ldr	r2, [r3, #8]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e98:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	689a      	ldr	r2, [r3, #8]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002ea8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	689a      	ldr	r2, [r3, #8]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f022 0202 	bic.w	r2, r2, #2
 8002eb8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	6899      	ldr	r1, [r3, #8]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	7e1b      	ldrb	r3, [r3, #24]
 8002ec4:	005a      	lsls	r2, r3, #1
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	430a      	orrs	r2, r1
 8002ecc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d01b      	beq.n	8002f10 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	685a      	ldr	r2, [r3, #4]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ee6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	685a      	ldr	r2, [r3, #4]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002ef6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	6859      	ldr	r1, [r3, #4]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f02:	3b01      	subs	r3, #1
 8002f04:	035a      	lsls	r2, r3, #13
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	430a      	orrs	r2, r1
 8002f0c:	605a      	str	r2, [r3, #4]
 8002f0e:	e007      	b.n	8002f20 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	685a      	ldr	r2, [r3, #4]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f1e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002f2e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	69db      	ldr	r3, [r3, #28]
 8002f3a:	3b01      	subs	r3, #1
 8002f3c:	051a      	lsls	r2, r3, #20
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	430a      	orrs	r2, r1
 8002f44:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	689a      	ldr	r2, [r3, #8]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002f54:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	6899      	ldr	r1, [r3, #8]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002f62:	025a      	lsls	r2, r3, #9
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	430a      	orrs	r2, r1
 8002f6a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	689a      	ldr	r2, [r3, #8]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f7a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	6899      	ldr	r1, [r3, #8]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	695b      	ldr	r3, [r3, #20]
 8002f86:	029a      	lsls	r2, r3, #10
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	430a      	orrs	r2, r1
 8002f8e:	609a      	str	r2, [r3, #8]
}
 8002f90:	bf00      	nop
 8002f92:	3714      	adds	r7, #20
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr
 8002f9c:	40012300 	.word	0x40012300
 8002fa0:	0f000001 	.word	0x0f000001

08002fa4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b084      	sub	sp, #16
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fb0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d13c      	bne.n	8003038 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d12b      	bne.n	8003030 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d127      	bne.n	8003030 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d006      	beq.n	8002ffc <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d119      	bne.n	8003030 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	685a      	ldr	r2, [r3, #4]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f022 0220 	bic.w	r2, r2, #32
 800300a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003010:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003020:	2b00      	cmp	r3, #0
 8003022:	d105      	bne.n	8003030 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003028:	f043 0201 	orr.w	r2, r3, #1
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003030:	68f8      	ldr	r0, [r7, #12]
 8003032:	f7ff fd61 	bl	8002af8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003036:	e00e      	b.n	8003056 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303c:	f003 0310 	and.w	r3, r3, #16
 8003040:	2b00      	cmp	r3, #0
 8003042:	d003      	beq.n	800304c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003044:	68f8      	ldr	r0, [r7, #12]
 8003046:	f7ff fd75 	bl	8002b34 <HAL_ADC_ErrorCallback>
}
 800304a:	e004      	b.n	8003056 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	4798      	blx	r3
}
 8003056:	bf00      	nop
 8003058:	3710      	adds	r7, #16
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}

0800305e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800305e:	b580      	push	{r7, lr}
 8003060:	b084      	sub	sp, #16
 8003062:	af00      	add	r7, sp, #0
 8003064:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800306a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800306c:	68f8      	ldr	r0, [r7, #12]
 800306e:	f7ff fd4d 	bl	8002b0c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003072:	bf00      	nop
 8003074:	3710      	adds	r7, #16
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}

0800307a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800307a:	b580      	push	{r7, lr}
 800307c:	b084      	sub	sp, #16
 800307e:	af00      	add	r7, sp, #0
 8003080:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003086:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2240      	movs	r2, #64	; 0x40
 800308c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003092:	f043 0204 	orr.w	r2, r3, #4
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800309a:	68f8      	ldr	r0, [r7, #12]
 800309c:	f7ff fd4a 	bl	8002b34 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80030a0:	bf00      	nop
 80030a2:	3710      	adds	r7, #16
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b083      	sub	sp, #12
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80030b0:	bf00      	nop
 80030b2:	370c      	adds	r7, #12
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr

080030bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030bc:	b480      	push	{r7}
 80030be:	b085      	sub	sp, #20
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f003 0307 	and.w	r3, r3, #7
 80030ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030cc:	4b0c      	ldr	r3, [pc, #48]	; (8003100 <__NVIC_SetPriorityGrouping+0x44>)
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030d2:	68ba      	ldr	r2, [r7, #8]
 80030d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80030d8:	4013      	ands	r3, r2
 80030da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80030e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030ee:	4a04      	ldr	r2, [pc, #16]	; (8003100 <__NVIC_SetPriorityGrouping+0x44>)
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	60d3      	str	r3, [r2, #12]
}
 80030f4:	bf00      	nop
 80030f6:	3714      	adds	r7, #20
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr
 8003100:	e000ed00 	.word	0xe000ed00

08003104 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003104:	b480      	push	{r7}
 8003106:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003108:	4b04      	ldr	r3, [pc, #16]	; (800311c <__NVIC_GetPriorityGrouping+0x18>)
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	0a1b      	lsrs	r3, r3, #8
 800310e:	f003 0307 	and.w	r3, r3, #7
}
 8003112:	4618      	mov	r0, r3
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr
 800311c:	e000ed00 	.word	0xe000ed00

08003120 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
 8003126:	4603      	mov	r3, r0
 8003128:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800312a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800312e:	2b00      	cmp	r3, #0
 8003130:	db0b      	blt.n	800314a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003132:	79fb      	ldrb	r3, [r7, #7]
 8003134:	f003 021f 	and.w	r2, r3, #31
 8003138:	4907      	ldr	r1, [pc, #28]	; (8003158 <__NVIC_EnableIRQ+0x38>)
 800313a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800313e:	095b      	lsrs	r3, r3, #5
 8003140:	2001      	movs	r0, #1
 8003142:	fa00 f202 	lsl.w	r2, r0, r2
 8003146:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800314a:	bf00      	nop
 800314c:	370c      	adds	r7, #12
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr
 8003156:	bf00      	nop
 8003158:	e000e100 	.word	0xe000e100

0800315c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	4603      	mov	r3, r0
 8003164:	6039      	str	r1, [r7, #0]
 8003166:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003168:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800316c:	2b00      	cmp	r3, #0
 800316e:	db0a      	blt.n	8003186 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	b2da      	uxtb	r2, r3
 8003174:	490c      	ldr	r1, [pc, #48]	; (80031a8 <__NVIC_SetPriority+0x4c>)
 8003176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800317a:	0112      	lsls	r2, r2, #4
 800317c:	b2d2      	uxtb	r2, r2
 800317e:	440b      	add	r3, r1
 8003180:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003184:	e00a      	b.n	800319c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	b2da      	uxtb	r2, r3
 800318a:	4908      	ldr	r1, [pc, #32]	; (80031ac <__NVIC_SetPriority+0x50>)
 800318c:	79fb      	ldrb	r3, [r7, #7]
 800318e:	f003 030f 	and.w	r3, r3, #15
 8003192:	3b04      	subs	r3, #4
 8003194:	0112      	lsls	r2, r2, #4
 8003196:	b2d2      	uxtb	r2, r2
 8003198:	440b      	add	r3, r1
 800319a:	761a      	strb	r2, [r3, #24]
}
 800319c:	bf00      	nop
 800319e:	370c      	adds	r7, #12
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr
 80031a8:	e000e100 	.word	0xe000e100
 80031ac:	e000ed00 	.word	0xe000ed00

080031b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b089      	sub	sp, #36	; 0x24
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	60f8      	str	r0, [r7, #12]
 80031b8:	60b9      	str	r1, [r7, #8]
 80031ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	f003 0307 	and.w	r3, r3, #7
 80031c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031c4:	69fb      	ldr	r3, [r7, #28]
 80031c6:	f1c3 0307 	rsb	r3, r3, #7
 80031ca:	2b04      	cmp	r3, #4
 80031cc:	bf28      	it	cs
 80031ce:	2304      	movcs	r3, #4
 80031d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	3304      	adds	r3, #4
 80031d6:	2b06      	cmp	r3, #6
 80031d8:	d902      	bls.n	80031e0 <NVIC_EncodePriority+0x30>
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	3b03      	subs	r3, #3
 80031de:	e000      	b.n	80031e2 <NVIC_EncodePriority+0x32>
 80031e0:	2300      	movs	r3, #0
 80031e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031e4:	f04f 32ff 	mov.w	r2, #4294967295
 80031e8:	69bb      	ldr	r3, [r7, #24]
 80031ea:	fa02 f303 	lsl.w	r3, r2, r3
 80031ee:	43da      	mvns	r2, r3
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	401a      	ands	r2, r3
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031f8:	f04f 31ff 	mov.w	r1, #4294967295
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003202:	43d9      	mvns	r1, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003208:	4313      	orrs	r3, r2
         );
}
 800320a:	4618      	mov	r0, r3
 800320c:	3724      	adds	r7, #36	; 0x24
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr
	...

08003218 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b082      	sub	sp, #8
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	3b01      	subs	r3, #1
 8003224:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003228:	d301      	bcc.n	800322e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800322a:	2301      	movs	r3, #1
 800322c:	e00f      	b.n	800324e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800322e:	4a0a      	ldr	r2, [pc, #40]	; (8003258 <SysTick_Config+0x40>)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	3b01      	subs	r3, #1
 8003234:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003236:	210f      	movs	r1, #15
 8003238:	f04f 30ff 	mov.w	r0, #4294967295
 800323c:	f7ff ff8e 	bl	800315c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003240:	4b05      	ldr	r3, [pc, #20]	; (8003258 <SysTick_Config+0x40>)
 8003242:	2200      	movs	r2, #0
 8003244:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003246:	4b04      	ldr	r3, [pc, #16]	; (8003258 <SysTick_Config+0x40>)
 8003248:	2207      	movs	r2, #7
 800324a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800324c:	2300      	movs	r3, #0
}
 800324e:	4618      	mov	r0, r3
 8003250:	3708      	adds	r7, #8
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	e000e010 	.word	0xe000e010

0800325c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b082      	sub	sp, #8
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	f7ff ff29 	bl	80030bc <__NVIC_SetPriorityGrouping>
}
 800326a:	bf00      	nop
 800326c:	3708      	adds	r7, #8
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}

08003272 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003272:	b580      	push	{r7, lr}
 8003274:	b086      	sub	sp, #24
 8003276:	af00      	add	r7, sp, #0
 8003278:	4603      	mov	r3, r0
 800327a:	60b9      	str	r1, [r7, #8]
 800327c:	607a      	str	r2, [r7, #4]
 800327e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003280:	2300      	movs	r3, #0
 8003282:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003284:	f7ff ff3e 	bl	8003104 <__NVIC_GetPriorityGrouping>
 8003288:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	68b9      	ldr	r1, [r7, #8]
 800328e:	6978      	ldr	r0, [r7, #20]
 8003290:	f7ff ff8e 	bl	80031b0 <NVIC_EncodePriority>
 8003294:	4602      	mov	r2, r0
 8003296:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800329a:	4611      	mov	r1, r2
 800329c:	4618      	mov	r0, r3
 800329e:	f7ff ff5d 	bl	800315c <__NVIC_SetPriority>
}
 80032a2:	bf00      	nop
 80032a4:	3718      	adds	r7, #24
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}

080032aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032aa:	b580      	push	{r7, lr}
 80032ac:	b082      	sub	sp, #8
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	4603      	mov	r3, r0
 80032b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032b8:	4618      	mov	r0, r3
 80032ba:	f7ff ff31 	bl	8003120 <__NVIC_EnableIRQ>
}
 80032be:	bf00      	nop
 80032c0:	3708      	adds	r7, #8
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}

080032c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032c6:	b580      	push	{r7, lr}
 80032c8:	b082      	sub	sp, #8
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f7ff ffa2 	bl	8003218 <SysTick_Config>
 80032d4:	4603      	mov	r3, r0
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3708      	adds	r7, #8
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
	...

080032e0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b086      	sub	sp, #24
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80032e8:	2300      	movs	r3, #0
 80032ea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80032ec:	f7ff f9b4 	bl	8002658 <HAL_GetTick>
 80032f0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d101      	bne.n	80032fc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e099      	b.n	8003430 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2202      	movs	r2, #2
 8003300:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2200      	movs	r2, #0
 8003308:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f022 0201 	bic.w	r2, r2, #1
 800331a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800331c:	e00f      	b.n	800333e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800331e:	f7ff f99b 	bl	8002658 <HAL_GetTick>
 8003322:	4602      	mov	r2, r0
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	1ad3      	subs	r3, r2, r3
 8003328:	2b05      	cmp	r3, #5
 800332a:	d908      	bls.n	800333e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2220      	movs	r2, #32
 8003330:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2203      	movs	r2, #3
 8003336:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800333a:	2303      	movs	r3, #3
 800333c:	e078      	b.n	8003430 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0301 	and.w	r3, r3, #1
 8003348:	2b00      	cmp	r3, #0
 800334a:	d1e8      	bne.n	800331e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003354:	697a      	ldr	r2, [r7, #20]
 8003356:	4b38      	ldr	r3, [pc, #224]	; (8003438 <HAL_DMA_Init+0x158>)
 8003358:	4013      	ands	r3, r2
 800335a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	685a      	ldr	r2, [r3, #4]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800336a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	691b      	ldr	r3, [r3, #16]
 8003370:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003376:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	699b      	ldr	r3, [r3, #24]
 800337c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003382:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6a1b      	ldr	r3, [r3, #32]
 8003388:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800338a:	697a      	ldr	r2, [r7, #20]
 800338c:	4313      	orrs	r3, r2
 800338e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003394:	2b04      	cmp	r3, #4
 8003396:	d107      	bne.n	80033a8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a0:	4313      	orrs	r3, r2
 80033a2:	697a      	ldr	r2, [r7, #20]
 80033a4:	4313      	orrs	r3, r2
 80033a6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	697a      	ldr	r2, [r7, #20]
 80033ae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	695b      	ldr	r3, [r3, #20]
 80033b6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	f023 0307 	bic.w	r3, r3, #7
 80033be:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c4:	697a      	ldr	r2, [r7, #20]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ce:	2b04      	cmp	r3, #4
 80033d0:	d117      	bne.n	8003402 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d6:	697a      	ldr	r2, [r7, #20]
 80033d8:	4313      	orrs	r3, r2
 80033da:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d00e      	beq.n	8003402 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f000 fb0f 	bl	8003a08 <DMA_CheckFifoParam>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d008      	beq.n	8003402 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2240      	movs	r2, #64	; 0x40
 80033f4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2201      	movs	r2, #1
 80033fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80033fe:	2301      	movs	r3, #1
 8003400:	e016      	b.n	8003430 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	697a      	ldr	r2, [r7, #20]
 8003408:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f000 fac6 	bl	800399c <DMA_CalcBaseAndBitshift>
 8003410:	4603      	mov	r3, r0
 8003412:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003418:	223f      	movs	r2, #63	; 0x3f
 800341a:	409a      	lsls	r2, r3
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2200      	movs	r2, #0
 8003424:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2201      	movs	r2, #1
 800342a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800342e:	2300      	movs	r3, #0
}
 8003430:	4618      	mov	r0, r3
 8003432:	3718      	adds	r7, #24
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}
 8003438:	f010803f 	.word	0xf010803f

0800343c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b086      	sub	sp, #24
 8003440:	af00      	add	r7, sp, #0
 8003442:	60f8      	str	r0, [r7, #12]
 8003444:	60b9      	str	r1, [r7, #8]
 8003446:	607a      	str	r2, [r7, #4]
 8003448:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800344a:	2300      	movs	r3, #0
 800344c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003452:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800345a:	2b01      	cmp	r3, #1
 800345c:	d101      	bne.n	8003462 <HAL_DMA_Start_IT+0x26>
 800345e:	2302      	movs	r3, #2
 8003460:	e040      	b.n	80034e4 <HAL_DMA_Start_IT+0xa8>
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2201      	movs	r2, #1
 8003466:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003470:	b2db      	uxtb	r3, r3
 8003472:	2b01      	cmp	r3, #1
 8003474:	d12f      	bne.n	80034d6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2202      	movs	r2, #2
 800347a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2200      	movs	r2, #0
 8003482:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	68b9      	ldr	r1, [r7, #8]
 800348a:	68f8      	ldr	r0, [r7, #12]
 800348c:	f000 fa58 	bl	8003940 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003494:	223f      	movs	r2, #63	; 0x3f
 8003496:	409a      	lsls	r2, r3
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f042 0216 	orr.w	r2, r2, #22
 80034aa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d007      	beq.n	80034c4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f042 0208 	orr.w	r2, r2, #8
 80034c2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f042 0201 	orr.w	r2, r2, #1
 80034d2:	601a      	str	r2, [r3, #0]
 80034d4:	e005      	b.n	80034e2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2200      	movs	r2, #0
 80034da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80034de:	2302      	movs	r3, #2
 80034e0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80034e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3718      	adds	r7, #24
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}

080034ec <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b084      	sub	sp, #16
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034f8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80034fa:	f7ff f8ad 	bl	8002658 <HAL_GetTick>
 80034fe:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003506:	b2db      	uxtb	r3, r3
 8003508:	2b02      	cmp	r3, #2
 800350a:	d008      	beq.n	800351e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2280      	movs	r2, #128	; 0x80
 8003510:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e052      	b.n	80035c4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f022 0216 	bic.w	r2, r2, #22
 800352c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	695a      	ldr	r2, [r3, #20]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800353c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003542:	2b00      	cmp	r3, #0
 8003544:	d103      	bne.n	800354e <HAL_DMA_Abort+0x62>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800354a:	2b00      	cmp	r3, #0
 800354c:	d007      	beq.n	800355e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f022 0208 	bic.w	r2, r2, #8
 800355c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f022 0201 	bic.w	r2, r2, #1
 800356c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800356e:	e013      	b.n	8003598 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003570:	f7ff f872 	bl	8002658 <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	2b05      	cmp	r3, #5
 800357c:	d90c      	bls.n	8003598 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2220      	movs	r2, #32
 8003582:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2203      	movs	r2, #3
 8003588:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2200      	movs	r2, #0
 8003590:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003594:	2303      	movs	r3, #3
 8003596:	e015      	b.n	80035c4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0301 	and.w	r3, r3, #1
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d1e4      	bne.n	8003570 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035aa:	223f      	movs	r2, #63	; 0x3f
 80035ac:	409a      	lsls	r2, r3
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2201      	movs	r2, #1
 80035b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2200      	movs	r2, #0
 80035be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80035c2:	2300      	movs	r3, #0
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3710      	adds	r7, #16
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}

080035cc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b083      	sub	sp, #12
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	2b02      	cmp	r3, #2
 80035de:	d004      	beq.n	80035ea <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2280      	movs	r2, #128	; 0x80
 80035e4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e00c      	b.n	8003604 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2205      	movs	r2, #5
 80035ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f022 0201 	bic.w	r2, r2, #1
 8003600:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003602:	2300      	movs	r3, #0
}
 8003604:	4618      	mov	r0, r3
 8003606:	370c      	adds	r7, #12
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr

08003610 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b086      	sub	sp, #24
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003618:	2300      	movs	r3, #0
 800361a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800361c:	4b8e      	ldr	r3, [pc, #568]	; (8003858 <HAL_DMA_IRQHandler+0x248>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a8e      	ldr	r2, [pc, #568]	; (800385c <HAL_DMA_IRQHandler+0x24c>)
 8003622:	fba2 2303 	umull	r2, r3, r2, r3
 8003626:	0a9b      	lsrs	r3, r3, #10
 8003628:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800362e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800363a:	2208      	movs	r2, #8
 800363c:	409a      	lsls	r2, r3
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	4013      	ands	r3, r2
 8003642:	2b00      	cmp	r3, #0
 8003644:	d01a      	beq.n	800367c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0304 	and.w	r3, r3, #4
 8003650:	2b00      	cmp	r3, #0
 8003652:	d013      	beq.n	800367c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f022 0204 	bic.w	r2, r2, #4
 8003662:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003668:	2208      	movs	r2, #8
 800366a:	409a      	lsls	r2, r3
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003674:	f043 0201 	orr.w	r2, r3, #1
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003680:	2201      	movs	r2, #1
 8003682:	409a      	lsls	r2, r3
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	4013      	ands	r3, r2
 8003688:	2b00      	cmp	r3, #0
 800368a:	d012      	beq.n	80036b2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	695b      	ldr	r3, [r3, #20]
 8003692:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003696:	2b00      	cmp	r3, #0
 8003698:	d00b      	beq.n	80036b2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800369e:	2201      	movs	r2, #1
 80036a0:	409a      	lsls	r2, r3
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036aa:	f043 0202 	orr.w	r2, r3, #2
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036b6:	2204      	movs	r2, #4
 80036b8:	409a      	lsls	r2, r3
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	4013      	ands	r3, r2
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d012      	beq.n	80036e8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 0302 	and.w	r3, r3, #2
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d00b      	beq.n	80036e8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036d4:	2204      	movs	r2, #4
 80036d6:	409a      	lsls	r2, r3
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036e0:	f043 0204 	orr.w	r2, r3, #4
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ec:	2210      	movs	r2, #16
 80036ee:	409a      	lsls	r2, r3
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	4013      	ands	r3, r2
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d043      	beq.n	8003780 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0308 	and.w	r3, r3, #8
 8003702:	2b00      	cmp	r3, #0
 8003704:	d03c      	beq.n	8003780 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800370a:	2210      	movs	r2, #16
 800370c:	409a      	lsls	r2, r3
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800371c:	2b00      	cmp	r3, #0
 800371e:	d018      	beq.n	8003752 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d108      	bne.n	8003740 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003732:	2b00      	cmp	r3, #0
 8003734:	d024      	beq.n	8003780 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	4798      	blx	r3
 800373e:	e01f      	b.n	8003780 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003744:	2b00      	cmp	r3, #0
 8003746:	d01b      	beq.n	8003780 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	4798      	blx	r3
 8003750:	e016      	b.n	8003780 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800375c:	2b00      	cmp	r3, #0
 800375e:	d107      	bne.n	8003770 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f022 0208 	bic.w	r2, r2, #8
 800376e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003774:	2b00      	cmp	r3, #0
 8003776:	d003      	beq.n	8003780 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003784:	2220      	movs	r2, #32
 8003786:	409a      	lsls	r2, r3
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	4013      	ands	r3, r2
 800378c:	2b00      	cmp	r3, #0
 800378e:	f000 808f 	beq.w	80038b0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 0310 	and.w	r3, r3, #16
 800379c:	2b00      	cmp	r3, #0
 800379e:	f000 8087 	beq.w	80038b0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037a6:	2220      	movs	r2, #32
 80037a8:	409a      	lsls	r2, r3
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	2b05      	cmp	r3, #5
 80037b8:	d136      	bne.n	8003828 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f022 0216 	bic.w	r2, r2, #22
 80037c8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	695a      	ldr	r2, [r3, #20]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80037d8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d103      	bne.n	80037ea <HAL_DMA_IRQHandler+0x1da>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d007      	beq.n	80037fa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f022 0208 	bic.w	r2, r2, #8
 80037f8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037fe:	223f      	movs	r2, #63	; 0x3f
 8003800:	409a      	lsls	r2, r3
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2201      	movs	r2, #1
 800380a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2200      	movs	r2, #0
 8003812:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800381a:	2b00      	cmp	r3, #0
 800381c:	d07e      	beq.n	800391c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	4798      	blx	r3
        }
        return;
 8003826:	e079      	b.n	800391c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003832:	2b00      	cmp	r3, #0
 8003834:	d01d      	beq.n	8003872 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003840:	2b00      	cmp	r3, #0
 8003842:	d10d      	bne.n	8003860 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003848:	2b00      	cmp	r3, #0
 800384a:	d031      	beq.n	80038b0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	4798      	blx	r3
 8003854:	e02c      	b.n	80038b0 <HAL_DMA_IRQHandler+0x2a0>
 8003856:	bf00      	nop
 8003858:	20000000 	.word	0x20000000
 800385c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003864:	2b00      	cmp	r3, #0
 8003866:	d023      	beq.n	80038b0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	4798      	blx	r3
 8003870:	e01e      	b.n	80038b0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800387c:	2b00      	cmp	r3, #0
 800387e:	d10f      	bne.n	80038a0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f022 0210 	bic.w	r2, r2, #16
 800388e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2201      	movs	r2, #1
 8003894:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2200      	movs	r2, #0
 800389c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d003      	beq.n	80038b0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d032      	beq.n	800391e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038bc:	f003 0301 	and.w	r3, r3, #1
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d022      	beq.n	800390a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2205      	movs	r2, #5
 80038c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f022 0201 	bic.w	r2, r2, #1
 80038da:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	3301      	adds	r3, #1
 80038e0:	60bb      	str	r3, [r7, #8]
 80038e2:	697a      	ldr	r2, [r7, #20]
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d307      	bcc.n	80038f8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0301 	and.w	r3, r3, #1
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d1f2      	bne.n	80038dc <HAL_DMA_IRQHandler+0x2cc>
 80038f6:	e000      	b.n	80038fa <HAL_DMA_IRQHandler+0x2ea>
          break;
 80038f8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2201      	movs	r2, #1
 80038fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800390e:	2b00      	cmp	r3, #0
 8003910:	d005      	beq.n	800391e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	4798      	blx	r3
 800391a:	e000      	b.n	800391e <HAL_DMA_IRQHandler+0x30e>
        return;
 800391c:	bf00      	nop
    }
  }
}
 800391e:	3718      	adds	r7, #24
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}

08003924 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003924:	b480      	push	{r7}
 8003926:	b083      	sub	sp, #12
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003932:	b2db      	uxtb	r3, r3
}
 8003934:	4618      	mov	r0, r3
 8003936:	370c      	adds	r7, #12
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr

08003940 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003940:	b480      	push	{r7}
 8003942:	b085      	sub	sp, #20
 8003944:	af00      	add	r7, sp, #0
 8003946:	60f8      	str	r0, [r7, #12]
 8003948:	60b9      	str	r1, [r7, #8]
 800394a:	607a      	str	r2, [r7, #4]
 800394c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800395c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	683a      	ldr	r2, [r7, #0]
 8003964:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	2b40      	cmp	r3, #64	; 0x40
 800396c:	d108      	bne.n	8003980 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	68ba      	ldr	r2, [r7, #8]
 800397c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800397e:	e007      	b.n	8003990 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	68ba      	ldr	r2, [r7, #8]
 8003986:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	60da      	str	r2, [r3, #12]
}
 8003990:	bf00      	nop
 8003992:	3714      	adds	r7, #20
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr

0800399c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800399c:	b480      	push	{r7}
 800399e:	b085      	sub	sp, #20
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	3b10      	subs	r3, #16
 80039ac:	4a14      	ldr	r2, [pc, #80]	; (8003a00 <DMA_CalcBaseAndBitshift+0x64>)
 80039ae:	fba2 2303 	umull	r2, r3, r2, r3
 80039b2:	091b      	lsrs	r3, r3, #4
 80039b4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80039b6:	4a13      	ldr	r2, [pc, #76]	; (8003a04 <DMA_CalcBaseAndBitshift+0x68>)
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	4413      	add	r3, r2
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	461a      	mov	r2, r3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2b03      	cmp	r3, #3
 80039c8:	d909      	bls.n	80039de <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80039d2:	f023 0303 	bic.w	r3, r3, #3
 80039d6:	1d1a      	adds	r2, r3, #4
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	659a      	str	r2, [r3, #88]	; 0x58
 80039dc:	e007      	b.n	80039ee <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80039e6:	f023 0303 	bic.w	r3, r3, #3
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3714      	adds	r7, #20
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr
 80039fe:	bf00      	nop
 8003a00:	aaaaaaab 	.word	0xaaaaaaab
 8003a04:	080092a0 	.word	0x080092a0

08003a08 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b085      	sub	sp, #20
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a10:	2300      	movs	r3, #0
 8003a12:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a18:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	699b      	ldr	r3, [r3, #24]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d11f      	bne.n	8003a62 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	2b03      	cmp	r3, #3
 8003a26:	d856      	bhi.n	8003ad6 <DMA_CheckFifoParam+0xce>
 8003a28:	a201      	add	r2, pc, #4	; (adr r2, 8003a30 <DMA_CheckFifoParam+0x28>)
 8003a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a2e:	bf00      	nop
 8003a30:	08003a41 	.word	0x08003a41
 8003a34:	08003a53 	.word	0x08003a53
 8003a38:	08003a41 	.word	0x08003a41
 8003a3c:	08003ad7 	.word	0x08003ad7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d046      	beq.n	8003ada <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a50:	e043      	b.n	8003ada <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a56:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a5a:	d140      	bne.n	8003ade <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a60:	e03d      	b.n	8003ade <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	699b      	ldr	r3, [r3, #24]
 8003a66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a6a:	d121      	bne.n	8003ab0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	2b03      	cmp	r3, #3
 8003a70:	d837      	bhi.n	8003ae2 <DMA_CheckFifoParam+0xda>
 8003a72:	a201      	add	r2, pc, #4	; (adr r2, 8003a78 <DMA_CheckFifoParam+0x70>)
 8003a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a78:	08003a89 	.word	0x08003a89
 8003a7c:	08003a8f 	.word	0x08003a8f
 8003a80:	08003a89 	.word	0x08003a89
 8003a84:	08003aa1 	.word	0x08003aa1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	73fb      	strb	r3, [r7, #15]
      break;
 8003a8c:	e030      	b.n	8003af0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a92:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d025      	beq.n	8003ae6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a9e:	e022      	b.n	8003ae6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003aa8:	d11f      	bne.n	8003aea <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003aae:	e01c      	b.n	8003aea <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	2b02      	cmp	r3, #2
 8003ab4:	d903      	bls.n	8003abe <DMA_CheckFifoParam+0xb6>
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	2b03      	cmp	r3, #3
 8003aba:	d003      	beq.n	8003ac4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003abc:	e018      	b.n	8003af0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	73fb      	strb	r3, [r7, #15]
      break;
 8003ac2:	e015      	b.n	8003af0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d00e      	beq.n	8003aee <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	73fb      	strb	r3, [r7, #15]
      break;
 8003ad4:	e00b      	b.n	8003aee <DMA_CheckFifoParam+0xe6>
      break;
 8003ad6:	bf00      	nop
 8003ad8:	e00a      	b.n	8003af0 <DMA_CheckFifoParam+0xe8>
      break;
 8003ada:	bf00      	nop
 8003adc:	e008      	b.n	8003af0 <DMA_CheckFifoParam+0xe8>
      break;
 8003ade:	bf00      	nop
 8003ae0:	e006      	b.n	8003af0 <DMA_CheckFifoParam+0xe8>
      break;
 8003ae2:	bf00      	nop
 8003ae4:	e004      	b.n	8003af0 <DMA_CheckFifoParam+0xe8>
      break;
 8003ae6:	bf00      	nop
 8003ae8:	e002      	b.n	8003af0 <DMA_CheckFifoParam+0xe8>
      break;   
 8003aea:	bf00      	nop
 8003aec:	e000      	b.n	8003af0 <DMA_CheckFifoParam+0xe8>
      break;
 8003aee:	bf00      	nop
    }
  } 
  
  return status; 
 8003af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3714      	adds	r7, #20
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr
 8003afe:	bf00      	nop

08003b00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b089      	sub	sp, #36	; 0x24
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
 8003b08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003b12:	2300      	movs	r3, #0
 8003b14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b16:	2300      	movs	r3, #0
 8003b18:	61fb      	str	r3, [r7, #28]
 8003b1a:	e159      	b.n	8003dd0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	fa02 f303 	lsl.w	r3, r2, r3
 8003b24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	697a      	ldr	r2, [r7, #20]
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b30:	693a      	ldr	r2, [r7, #16]
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	429a      	cmp	r2, r3
 8003b36:	f040 8148 	bne.w	8003dca <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	f003 0303 	and.w	r3, r3, #3
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d005      	beq.n	8003b52 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b4e:	2b02      	cmp	r3, #2
 8003b50:	d130      	bne.n	8003bb4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b58:	69fb      	ldr	r3, [r7, #28]
 8003b5a:	005b      	lsls	r3, r3, #1
 8003b5c:	2203      	movs	r2, #3
 8003b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b62:	43db      	mvns	r3, r3
 8003b64:	69ba      	ldr	r2, [r7, #24]
 8003b66:	4013      	ands	r3, r2
 8003b68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	68da      	ldr	r2, [r3, #12]
 8003b6e:	69fb      	ldr	r3, [r7, #28]
 8003b70:	005b      	lsls	r3, r3, #1
 8003b72:	fa02 f303 	lsl.w	r3, r2, r3
 8003b76:	69ba      	ldr	r2, [r7, #24]
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	69ba      	ldr	r2, [r7, #24]
 8003b80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b88:	2201      	movs	r2, #1
 8003b8a:	69fb      	ldr	r3, [r7, #28]
 8003b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b90:	43db      	mvns	r3, r3
 8003b92:	69ba      	ldr	r2, [r7, #24]
 8003b94:	4013      	ands	r3, r2
 8003b96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	091b      	lsrs	r3, r3, #4
 8003b9e:	f003 0201 	and.w	r2, r3, #1
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba8:	69ba      	ldr	r2, [r7, #24]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	69ba      	ldr	r2, [r7, #24]
 8003bb2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	f003 0303 	and.w	r3, r3, #3
 8003bbc:	2b03      	cmp	r3, #3
 8003bbe:	d017      	beq.n	8003bf0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	005b      	lsls	r3, r3, #1
 8003bca:	2203      	movs	r2, #3
 8003bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd0:	43db      	mvns	r3, r3
 8003bd2:	69ba      	ldr	r2, [r7, #24]
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	689a      	ldr	r2, [r3, #8]
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	005b      	lsls	r3, r3, #1
 8003be0:	fa02 f303 	lsl.w	r3, r2, r3
 8003be4:	69ba      	ldr	r2, [r7, #24]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	69ba      	ldr	r2, [r7, #24]
 8003bee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	f003 0303 	and.w	r3, r3, #3
 8003bf8:	2b02      	cmp	r3, #2
 8003bfa:	d123      	bne.n	8003c44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	08da      	lsrs	r2, r3, #3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	3208      	adds	r2, #8
 8003c04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003c0a:	69fb      	ldr	r3, [r7, #28]
 8003c0c:	f003 0307 	and.w	r3, r3, #7
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	220f      	movs	r2, #15
 8003c14:	fa02 f303 	lsl.w	r3, r2, r3
 8003c18:	43db      	mvns	r3, r3
 8003c1a:	69ba      	ldr	r2, [r7, #24]
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	691a      	ldr	r2, [r3, #16]
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	f003 0307 	and.w	r3, r3, #7
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c30:	69ba      	ldr	r2, [r7, #24]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	08da      	lsrs	r2, r3, #3
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	3208      	adds	r2, #8
 8003c3e:	69b9      	ldr	r1, [r7, #24]
 8003c40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003c4a:	69fb      	ldr	r3, [r7, #28]
 8003c4c:	005b      	lsls	r3, r3, #1
 8003c4e:	2203      	movs	r2, #3
 8003c50:	fa02 f303 	lsl.w	r3, r2, r3
 8003c54:	43db      	mvns	r3, r3
 8003c56:	69ba      	ldr	r2, [r7, #24]
 8003c58:	4013      	ands	r3, r2
 8003c5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	f003 0203 	and.w	r2, r3, #3
 8003c64:	69fb      	ldr	r3, [r7, #28]
 8003c66:	005b      	lsls	r3, r3, #1
 8003c68:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6c:	69ba      	ldr	r2, [r7, #24]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	69ba      	ldr	r2, [r7, #24]
 8003c76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	f000 80a2 	beq.w	8003dca <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c86:	2300      	movs	r3, #0
 8003c88:	60fb      	str	r3, [r7, #12]
 8003c8a:	4b57      	ldr	r3, [pc, #348]	; (8003de8 <HAL_GPIO_Init+0x2e8>)
 8003c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c8e:	4a56      	ldr	r2, [pc, #344]	; (8003de8 <HAL_GPIO_Init+0x2e8>)
 8003c90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c94:	6453      	str	r3, [r2, #68]	; 0x44
 8003c96:	4b54      	ldr	r3, [pc, #336]	; (8003de8 <HAL_GPIO_Init+0x2e8>)
 8003c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c9e:	60fb      	str	r3, [r7, #12]
 8003ca0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003ca2:	4a52      	ldr	r2, [pc, #328]	; (8003dec <HAL_GPIO_Init+0x2ec>)
 8003ca4:	69fb      	ldr	r3, [r7, #28]
 8003ca6:	089b      	lsrs	r3, r3, #2
 8003ca8:	3302      	adds	r3, #2
 8003caa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003cb0:	69fb      	ldr	r3, [r7, #28]
 8003cb2:	f003 0303 	and.w	r3, r3, #3
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	220f      	movs	r2, #15
 8003cba:	fa02 f303 	lsl.w	r3, r2, r3
 8003cbe:	43db      	mvns	r3, r3
 8003cc0:	69ba      	ldr	r2, [r7, #24]
 8003cc2:	4013      	ands	r3, r2
 8003cc4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	4a49      	ldr	r2, [pc, #292]	; (8003df0 <HAL_GPIO_Init+0x2f0>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d019      	beq.n	8003d02 <HAL_GPIO_Init+0x202>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	4a48      	ldr	r2, [pc, #288]	; (8003df4 <HAL_GPIO_Init+0x2f4>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d013      	beq.n	8003cfe <HAL_GPIO_Init+0x1fe>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4a47      	ldr	r2, [pc, #284]	; (8003df8 <HAL_GPIO_Init+0x2f8>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d00d      	beq.n	8003cfa <HAL_GPIO_Init+0x1fa>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	4a46      	ldr	r2, [pc, #280]	; (8003dfc <HAL_GPIO_Init+0x2fc>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d007      	beq.n	8003cf6 <HAL_GPIO_Init+0x1f6>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	4a45      	ldr	r2, [pc, #276]	; (8003e00 <HAL_GPIO_Init+0x300>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d101      	bne.n	8003cf2 <HAL_GPIO_Init+0x1f2>
 8003cee:	2304      	movs	r3, #4
 8003cf0:	e008      	b.n	8003d04 <HAL_GPIO_Init+0x204>
 8003cf2:	2307      	movs	r3, #7
 8003cf4:	e006      	b.n	8003d04 <HAL_GPIO_Init+0x204>
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	e004      	b.n	8003d04 <HAL_GPIO_Init+0x204>
 8003cfa:	2302      	movs	r3, #2
 8003cfc:	e002      	b.n	8003d04 <HAL_GPIO_Init+0x204>
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e000      	b.n	8003d04 <HAL_GPIO_Init+0x204>
 8003d02:	2300      	movs	r3, #0
 8003d04:	69fa      	ldr	r2, [r7, #28]
 8003d06:	f002 0203 	and.w	r2, r2, #3
 8003d0a:	0092      	lsls	r2, r2, #2
 8003d0c:	4093      	lsls	r3, r2
 8003d0e:	69ba      	ldr	r2, [r7, #24]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d14:	4935      	ldr	r1, [pc, #212]	; (8003dec <HAL_GPIO_Init+0x2ec>)
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	089b      	lsrs	r3, r3, #2
 8003d1a:	3302      	adds	r3, #2
 8003d1c:	69ba      	ldr	r2, [r7, #24]
 8003d1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d22:	4b38      	ldr	r3, [pc, #224]	; (8003e04 <HAL_GPIO_Init+0x304>)
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	43db      	mvns	r3, r3
 8003d2c:	69ba      	ldr	r2, [r7, #24]
 8003d2e:	4013      	ands	r3, r2
 8003d30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d003      	beq.n	8003d46 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003d3e:	69ba      	ldr	r2, [r7, #24]
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003d46:	4a2f      	ldr	r2, [pc, #188]	; (8003e04 <HAL_GPIO_Init+0x304>)
 8003d48:	69bb      	ldr	r3, [r7, #24]
 8003d4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d4c:	4b2d      	ldr	r3, [pc, #180]	; (8003e04 <HAL_GPIO_Init+0x304>)
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	43db      	mvns	r3, r3
 8003d56:	69ba      	ldr	r2, [r7, #24]
 8003d58:	4013      	ands	r3, r2
 8003d5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d003      	beq.n	8003d70 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003d68:	69ba      	ldr	r2, [r7, #24]
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003d70:	4a24      	ldr	r2, [pc, #144]	; (8003e04 <HAL_GPIO_Init+0x304>)
 8003d72:	69bb      	ldr	r3, [r7, #24]
 8003d74:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003d76:	4b23      	ldr	r3, [pc, #140]	; (8003e04 <HAL_GPIO_Init+0x304>)
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	43db      	mvns	r3, r3
 8003d80:	69ba      	ldr	r2, [r7, #24]
 8003d82:	4013      	ands	r3, r2
 8003d84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d003      	beq.n	8003d9a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003d92:	69ba      	ldr	r2, [r7, #24]
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d9a:	4a1a      	ldr	r2, [pc, #104]	; (8003e04 <HAL_GPIO_Init+0x304>)
 8003d9c:	69bb      	ldr	r3, [r7, #24]
 8003d9e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003da0:	4b18      	ldr	r3, [pc, #96]	; (8003e04 <HAL_GPIO_Init+0x304>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	43db      	mvns	r3, r3
 8003daa:	69ba      	ldr	r2, [r7, #24]
 8003dac:	4013      	ands	r3, r2
 8003dae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d003      	beq.n	8003dc4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003dbc:	69ba      	ldr	r2, [r7, #24]
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003dc4:	4a0f      	ldr	r2, [pc, #60]	; (8003e04 <HAL_GPIO_Init+0x304>)
 8003dc6:	69bb      	ldr	r3, [r7, #24]
 8003dc8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003dca:	69fb      	ldr	r3, [r7, #28]
 8003dcc:	3301      	adds	r3, #1
 8003dce:	61fb      	str	r3, [r7, #28]
 8003dd0:	69fb      	ldr	r3, [r7, #28]
 8003dd2:	2b0f      	cmp	r3, #15
 8003dd4:	f67f aea2 	bls.w	8003b1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003dd8:	bf00      	nop
 8003dda:	bf00      	nop
 8003ddc:	3724      	adds	r7, #36	; 0x24
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr
 8003de6:	bf00      	nop
 8003de8:	40023800 	.word	0x40023800
 8003dec:	40013800 	.word	0x40013800
 8003df0:	40020000 	.word	0x40020000
 8003df4:	40020400 	.word	0x40020400
 8003df8:	40020800 	.word	0x40020800
 8003dfc:	40020c00 	.word	0x40020c00
 8003e00:	40021000 	.word	0x40021000
 8003e04:	40013c00 	.word	0x40013c00

08003e08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b083      	sub	sp, #12
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	460b      	mov	r3, r1
 8003e12:	807b      	strh	r3, [r7, #2]
 8003e14:	4613      	mov	r3, r2
 8003e16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e18:	787b      	ldrb	r3, [r7, #1]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d003      	beq.n	8003e26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e1e:	887a      	ldrh	r2, [r7, #2]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003e24:	e003      	b.n	8003e2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003e26:	887b      	ldrh	r3, [r7, #2]
 8003e28:	041a      	lsls	r2, r3, #16
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	619a      	str	r2, [r3, #24]
}
 8003e2e:	bf00      	nop
 8003e30:	370c      	adds	r7, #12
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr
	...

08003e3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d101      	bne.n	8003e4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e12b      	b.n	80040a6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d106      	bne.n	8003e68 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f7fe f82a 	bl	8001ebc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2224      	movs	r2, #36	; 0x24
 8003e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f022 0201 	bic.w	r2, r2, #1
 8003e7e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e8e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e9e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003ea0:	f003 f8ae 	bl	8007000 <HAL_RCC_GetPCLK1Freq>
 8003ea4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	4a81      	ldr	r2, [pc, #516]	; (80040b0 <HAL_I2C_Init+0x274>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d807      	bhi.n	8003ec0 <HAL_I2C_Init+0x84>
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	4a80      	ldr	r2, [pc, #512]	; (80040b4 <HAL_I2C_Init+0x278>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	bf94      	ite	ls
 8003eb8:	2301      	movls	r3, #1
 8003eba:	2300      	movhi	r3, #0
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	e006      	b.n	8003ece <HAL_I2C_Init+0x92>
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	4a7d      	ldr	r2, [pc, #500]	; (80040b8 <HAL_I2C_Init+0x27c>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	bf94      	ite	ls
 8003ec8:	2301      	movls	r3, #1
 8003eca:	2300      	movhi	r3, #0
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d001      	beq.n	8003ed6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e0e7      	b.n	80040a6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	4a78      	ldr	r2, [pc, #480]	; (80040bc <HAL_I2C_Init+0x280>)
 8003eda:	fba2 2303 	umull	r2, r3, r2, r3
 8003ede:	0c9b      	lsrs	r3, r3, #18
 8003ee0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	68ba      	ldr	r2, [r7, #8]
 8003ef2:	430a      	orrs	r2, r1
 8003ef4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	6a1b      	ldr	r3, [r3, #32]
 8003efc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	4a6a      	ldr	r2, [pc, #424]	; (80040b0 <HAL_I2C_Init+0x274>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d802      	bhi.n	8003f10 <HAL_I2C_Init+0xd4>
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	3301      	adds	r3, #1
 8003f0e:	e009      	b.n	8003f24 <HAL_I2C_Init+0xe8>
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003f16:	fb02 f303 	mul.w	r3, r2, r3
 8003f1a:	4a69      	ldr	r2, [pc, #420]	; (80040c0 <HAL_I2C_Init+0x284>)
 8003f1c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f20:	099b      	lsrs	r3, r3, #6
 8003f22:	3301      	adds	r3, #1
 8003f24:	687a      	ldr	r2, [r7, #4]
 8003f26:	6812      	ldr	r2, [r2, #0]
 8003f28:	430b      	orrs	r3, r1
 8003f2a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	69db      	ldr	r3, [r3, #28]
 8003f32:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003f36:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	495c      	ldr	r1, [pc, #368]	; (80040b0 <HAL_I2C_Init+0x274>)
 8003f40:	428b      	cmp	r3, r1
 8003f42:	d819      	bhi.n	8003f78 <HAL_I2C_Init+0x13c>
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	1e59      	subs	r1, r3, #1
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	005b      	lsls	r3, r3, #1
 8003f4e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f52:	1c59      	adds	r1, r3, #1
 8003f54:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003f58:	400b      	ands	r3, r1
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d00a      	beq.n	8003f74 <HAL_I2C_Init+0x138>
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	1e59      	subs	r1, r3, #1
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	005b      	lsls	r3, r3, #1
 8003f68:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f6c:	3301      	adds	r3, #1
 8003f6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f72:	e051      	b.n	8004018 <HAL_I2C_Init+0x1dc>
 8003f74:	2304      	movs	r3, #4
 8003f76:	e04f      	b.n	8004018 <HAL_I2C_Init+0x1dc>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d111      	bne.n	8003fa4 <HAL_I2C_Init+0x168>
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	1e58      	subs	r0, r3, #1
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6859      	ldr	r1, [r3, #4]
 8003f88:	460b      	mov	r3, r1
 8003f8a:	005b      	lsls	r3, r3, #1
 8003f8c:	440b      	add	r3, r1
 8003f8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f92:	3301      	adds	r3, #1
 8003f94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	bf0c      	ite	eq
 8003f9c:	2301      	moveq	r3, #1
 8003f9e:	2300      	movne	r3, #0
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	e012      	b.n	8003fca <HAL_I2C_Init+0x18e>
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	1e58      	subs	r0, r3, #1
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6859      	ldr	r1, [r3, #4]
 8003fac:	460b      	mov	r3, r1
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	440b      	add	r3, r1
 8003fb2:	0099      	lsls	r1, r3, #2
 8003fb4:	440b      	add	r3, r1
 8003fb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fba:	3301      	adds	r3, #1
 8003fbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	bf0c      	ite	eq
 8003fc4:	2301      	moveq	r3, #1
 8003fc6:	2300      	movne	r3, #0
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d001      	beq.n	8003fd2 <HAL_I2C_Init+0x196>
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e022      	b.n	8004018 <HAL_I2C_Init+0x1dc>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d10e      	bne.n	8003ff8 <HAL_I2C_Init+0x1bc>
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	1e58      	subs	r0, r3, #1
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6859      	ldr	r1, [r3, #4]
 8003fe2:	460b      	mov	r3, r1
 8003fe4:	005b      	lsls	r3, r3, #1
 8003fe6:	440b      	add	r3, r1
 8003fe8:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fec:	3301      	adds	r3, #1
 8003fee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ff2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ff6:	e00f      	b.n	8004018 <HAL_I2C_Init+0x1dc>
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	1e58      	subs	r0, r3, #1
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6859      	ldr	r1, [r3, #4]
 8004000:	460b      	mov	r3, r1
 8004002:	009b      	lsls	r3, r3, #2
 8004004:	440b      	add	r3, r1
 8004006:	0099      	lsls	r1, r3, #2
 8004008:	440b      	add	r3, r1
 800400a:	fbb0 f3f3 	udiv	r3, r0, r3
 800400e:	3301      	adds	r3, #1
 8004010:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004014:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004018:	6879      	ldr	r1, [r7, #4]
 800401a:	6809      	ldr	r1, [r1, #0]
 800401c:	4313      	orrs	r3, r2
 800401e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	69da      	ldr	r2, [r3, #28]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6a1b      	ldr	r3, [r3, #32]
 8004032:	431a      	orrs	r2, r3
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	430a      	orrs	r2, r1
 800403a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004046:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800404a:	687a      	ldr	r2, [r7, #4]
 800404c:	6911      	ldr	r1, [r2, #16]
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	68d2      	ldr	r2, [r2, #12]
 8004052:	4311      	orrs	r1, r2
 8004054:	687a      	ldr	r2, [r7, #4]
 8004056:	6812      	ldr	r2, [r2, #0]
 8004058:	430b      	orrs	r3, r1
 800405a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	68db      	ldr	r3, [r3, #12]
 8004062:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	695a      	ldr	r2, [r3, #20]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	699b      	ldr	r3, [r3, #24]
 800406e:	431a      	orrs	r2, r3
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	430a      	orrs	r2, r1
 8004076:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f042 0201 	orr.w	r2, r2, #1
 8004086:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2200      	movs	r2, #0
 800408c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2220      	movs	r2, #32
 8004092:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2200      	movs	r2, #0
 800409a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80040a4:	2300      	movs	r3, #0
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3710      	adds	r7, #16
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	bf00      	nop
 80040b0:	000186a0 	.word	0x000186a0
 80040b4:	001e847f 	.word	0x001e847f
 80040b8:	003d08ff 	.word	0x003d08ff
 80040bc:	431bde83 	.word	0x431bde83
 80040c0:	10624dd3 	.word	0x10624dd3

080040c4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b088      	sub	sp, #32
 80040c8:	af02      	add	r7, sp, #8
 80040ca:	60f8      	str	r0, [r7, #12]
 80040cc:	4608      	mov	r0, r1
 80040ce:	4611      	mov	r1, r2
 80040d0:	461a      	mov	r2, r3
 80040d2:	4603      	mov	r3, r0
 80040d4:	817b      	strh	r3, [r7, #10]
 80040d6:	460b      	mov	r3, r1
 80040d8:	813b      	strh	r3, [r7, #8]
 80040da:	4613      	mov	r3, r2
 80040dc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80040de:	f7fe fabb 	bl	8002658 <HAL_GetTick>
 80040e2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	2b20      	cmp	r3, #32
 80040ee:	f040 80d9 	bne.w	80042a4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	9300      	str	r3, [sp, #0]
 80040f6:	2319      	movs	r3, #25
 80040f8:	2201      	movs	r2, #1
 80040fa:	496d      	ldr	r1, [pc, #436]	; (80042b0 <HAL_I2C_Mem_Write+0x1ec>)
 80040fc:	68f8      	ldr	r0, [r7, #12]
 80040fe:	f002 f8e5 	bl	80062cc <I2C_WaitOnFlagUntilTimeout>
 8004102:	4603      	mov	r3, r0
 8004104:	2b00      	cmp	r3, #0
 8004106:	d001      	beq.n	800410c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004108:	2302      	movs	r3, #2
 800410a:	e0cc      	b.n	80042a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004112:	2b01      	cmp	r3, #1
 8004114:	d101      	bne.n	800411a <HAL_I2C_Mem_Write+0x56>
 8004116:	2302      	movs	r3, #2
 8004118:	e0c5      	b.n	80042a6 <HAL_I2C_Mem_Write+0x1e2>
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2201      	movs	r2, #1
 800411e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 0301 	and.w	r3, r3, #1
 800412c:	2b01      	cmp	r3, #1
 800412e:	d007      	beq.n	8004140 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f042 0201 	orr.w	r2, r2, #1
 800413e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800414e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2221      	movs	r2, #33	; 0x21
 8004154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2240      	movs	r2, #64	; 0x40
 800415c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2200      	movs	r2, #0
 8004164:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	6a3a      	ldr	r2, [r7, #32]
 800416a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004170:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004176:	b29a      	uxth	r2, r3
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	4a4d      	ldr	r2, [pc, #308]	; (80042b4 <HAL_I2C_Mem_Write+0x1f0>)
 8004180:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004182:	88f8      	ldrh	r0, [r7, #6]
 8004184:	893a      	ldrh	r2, [r7, #8]
 8004186:	8979      	ldrh	r1, [r7, #10]
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	9301      	str	r3, [sp, #4]
 800418c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800418e:	9300      	str	r3, [sp, #0]
 8004190:	4603      	mov	r3, r0
 8004192:	68f8      	ldr	r0, [r7, #12]
 8004194:	f001 fe74 	bl	8005e80 <I2C_RequestMemoryWrite>
 8004198:	4603      	mov	r3, r0
 800419a:	2b00      	cmp	r3, #0
 800419c:	d052      	beq.n	8004244 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e081      	b.n	80042a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041a2:	697a      	ldr	r2, [r7, #20]
 80041a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80041a6:	68f8      	ldr	r0, [r7, #12]
 80041a8:	f002 f966 	bl	8006478 <I2C_WaitOnTXEFlagUntilTimeout>
 80041ac:	4603      	mov	r3, r0
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d00d      	beq.n	80041ce <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b6:	2b04      	cmp	r3, #4
 80041b8:	d107      	bne.n	80041ca <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041c8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e06b      	b.n	80042a6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d2:	781a      	ldrb	r2, [r3, #0]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041de:	1c5a      	adds	r2, r3, #1
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041e8:	3b01      	subs	r3, #1
 80041ea:	b29a      	uxth	r2, r3
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	3b01      	subs	r3, #1
 80041f8:	b29a      	uxth	r2, r3
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	695b      	ldr	r3, [r3, #20]
 8004204:	f003 0304 	and.w	r3, r3, #4
 8004208:	2b04      	cmp	r3, #4
 800420a:	d11b      	bne.n	8004244 <HAL_I2C_Mem_Write+0x180>
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004210:	2b00      	cmp	r3, #0
 8004212:	d017      	beq.n	8004244 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004218:	781a      	ldrb	r2, [r3, #0]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004224:	1c5a      	adds	r2, r3, #1
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800422e:	3b01      	subs	r3, #1
 8004230:	b29a      	uxth	r2, r3
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800423a:	b29b      	uxth	r3, r3
 800423c:	3b01      	subs	r3, #1
 800423e:	b29a      	uxth	r2, r3
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004248:	2b00      	cmp	r3, #0
 800424a:	d1aa      	bne.n	80041a2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800424c:	697a      	ldr	r2, [r7, #20]
 800424e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004250:	68f8      	ldr	r0, [r7, #12]
 8004252:	f002 f952 	bl	80064fa <I2C_WaitOnBTFFlagUntilTimeout>
 8004256:	4603      	mov	r3, r0
 8004258:	2b00      	cmp	r3, #0
 800425a:	d00d      	beq.n	8004278 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004260:	2b04      	cmp	r3, #4
 8004262:	d107      	bne.n	8004274 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004272:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e016      	b.n	80042a6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004286:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2220      	movs	r2, #32
 800428c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2200      	movs	r2, #0
 8004294:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2200      	movs	r2, #0
 800429c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80042a0:	2300      	movs	r3, #0
 80042a2:	e000      	b.n	80042a6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80042a4:	2302      	movs	r3, #2
  }
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3718      	adds	r7, #24
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}
 80042ae:	bf00      	nop
 80042b0:	00100002 	.word	0x00100002
 80042b4:	ffff0000 	.word	0xffff0000

080042b8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b08c      	sub	sp, #48	; 0x30
 80042bc:	af02      	add	r7, sp, #8
 80042be:	60f8      	str	r0, [r7, #12]
 80042c0:	4608      	mov	r0, r1
 80042c2:	4611      	mov	r1, r2
 80042c4:	461a      	mov	r2, r3
 80042c6:	4603      	mov	r3, r0
 80042c8:	817b      	strh	r3, [r7, #10]
 80042ca:	460b      	mov	r3, r1
 80042cc:	813b      	strh	r3, [r7, #8]
 80042ce:	4613      	mov	r3, r2
 80042d0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80042d2:	f7fe f9c1 	bl	8002658 <HAL_GetTick>
 80042d6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	2b20      	cmp	r3, #32
 80042e2:	f040 8208 	bne.w	80046f6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80042e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e8:	9300      	str	r3, [sp, #0]
 80042ea:	2319      	movs	r3, #25
 80042ec:	2201      	movs	r2, #1
 80042ee:	497b      	ldr	r1, [pc, #492]	; (80044dc <HAL_I2C_Mem_Read+0x224>)
 80042f0:	68f8      	ldr	r0, [r7, #12]
 80042f2:	f001 ffeb 	bl	80062cc <I2C_WaitOnFlagUntilTimeout>
 80042f6:	4603      	mov	r3, r0
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d001      	beq.n	8004300 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80042fc:	2302      	movs	r3, #2
 80042fe:	e1fb      	b.n	80046f8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004306:	2b01      	cmp	r3, #1
 8004308:	d101      	bne.n	800430e <HAL_I2C_Mem_Read+0x56>
 800430a:	2302      	movs	r3, #2
 800430c:	e1f4      	b.n	80046f8 <HAL_I2C_Mem_Read+0x440>
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2201      	movs	r2, #1
 8004312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 0301 	and.w	r3, r3, #1
 8004320:	2b01      	cmp	r3, #1
 8004322:	d007      	beq.n	8004334 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f042 0201 	orr.w	r2, r2, #1
 8004332:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004342:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2222      	movs	r2, #34	; 0x22
 8004348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2240      	movs	r2, #64	; 0x40
 8004350:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2200      	movs	r2, #0
 8004358:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800435e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004364:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800436a:	b29a      	uxth	r2, r3
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	4a5b      	ldr	r2, [pc, #364]	; (80044e0 <HAL_I2C_Mem_Read+0x228>)
 8004374:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004376:	88f8      	ldrh	r0, [r7, #6]
 8004378:	893a      	ldrh	r2, [r7, #8]
 800437a:	8979      	ldrh	r1, [r7, #10]
 800437c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437e:	9301      	str	r3, [sp, #4]
 8004380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004382:	9300      	str	r3, [sp, #0]
 8004384:	4603      	mov	r3, r0
 8004386:	68f8      	ldr	r0, [r7, #12]
 8004388:	f001 fe10 	bl	8005fac <I2C_RequestMemoryRead>
 800438c:	4603      	mov	r3, r0
 800438e:	2b00      	cmp	r3, #0
 8004390:	d001      	beq.n	8004396 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e1b0      	b.n	80046f8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800439a:	2b00      	cmp	r3, #0
 800439c:	d113      	bne.n	80043c6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800439e:	2300      	movs	r3, #0
 80043a0:	623b      	str	r3, [r7, #32]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	695b      	ldr	r3, [r3, #20]
 80043a8:	623b      	str	r3, [r7, #32]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	699b      	ldr	r3, [r3, #24]
 80043b0:	623b      	str	r3, [r7, #32]
 80043b2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043c2:	601a      	str	r2, [r3, #0]
 80043c4:	e184      	b.n	80046d0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d11b      	bne.n	8004406 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043dc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043de:	2300      	movs	r3, #0
 80043e0:	61fb      	str	r3, [r7, #28]
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	695b      	ldr	r3, [r3, #20]
 80043e8:	61fb      	str	r3, [r7, #28]
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	699b      	ldr	r3, [r3, #24]
 80043f0:	61fb      	str	r3, [r7, #28]
 80043f2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004402:	601a      	str	r2, [r3, #0]
 8004404:	e164      	b.n	80046d0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800440a:	2b02      	cmp	r3, #2
 800440c:	d11b      	bne.n	8004446 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800441c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800442c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800442e:	2300      	movs	r3, #0
 8004430:	61bb      	str	r3, [r7, #24]
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	695b      	ldr	r3, [r3, #20]
 8004438:	61bb      	str	r3, [r7, #24]
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	699b      	ldr	r3, [r3, #24]
 8004440:	61bb      	str	r3, [r7, #24]
 8004442:	69bb      	ldr	r3, [r7, #24]
 8004444:	e144      	b.n	80046d0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004446:	2300      	movs	r3, #0
 8004448:	617b      	str	r3, [r7, #20]
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	695b      	ldr	r3, [r3, #20]
 8004450:	617b      	str	r3, [r7, #20]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	699b      	ldr	r3, [r3, #24]
 8004458:	617b      	str	r3, [r7, #20]
 800445a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800445c:	e138      	b.n	80046d0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004462:	2b03      	cmp	r3, #3
 8004464:	f200 80f1 	bhi.w	800464a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800446c:	2b01      	cmp	r3, #1
 800446e:	d123      	bne.n	80044b8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004470:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004472:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004474:	68f8      	ldr	r0, [r7, #12]
 8004476:	f002 f8b3 	bl	80065e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800447a:	4603      	mov	r3, r0
 800447c:	2b00      	cmp	r3, #0
 800447e:	d001      	beq.n	8004484 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	e139      	b.n	80046f8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	691a      	ldr	r2, [r3, #16]
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448e:	b2d2      	uxtb	r2, r2
 8004490:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004496:	1c5a      	adds	r2, r3, #1
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044a0:	3b01      	subs	r3, #1
 80044a2:	b29a      	uxth	r2, r3
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044ac:	b29b      	uxth	r3, r3
 80044ae:	3b01      	subs	r3, #1
 80044b0:	b29a      	uxth	r2, r3
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80044b6:	e10b      	b.n	80046d0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044bc:	2b02      	cmp	r3, #2
 80044be:	d14e      	bne.n	800455e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80044c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c2:	9300      	str	r3, [sp, #0]
 80044c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044c6:	2200      	movs	r2, #0
 80044c8:	4906      	ldr	r1, [pc, #24]	; (80044e4 <HAL_I2C_Mem_Read+0x22c>)
 80044ca:	68f8      	ldr	r0, [r7, #12]
 80044cc:	f001 fefe 	bl	80062cc <I2C_WaitOnFlagUntilTimeout>
 80044d0:	4603      	mov	r3, r0
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d008      	beq.n	80044e8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	e10e      	b.n	80046f8 <HAL_I2C_Mem_Read+0x440>
 80044da:	bf00      	nop
 80044dc:	00100002 	.word	0x00100002
 80044e0:	ffff0000 	.word	0xffff0000
 80044e4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	691a      	ldr	r2, [r3, #16]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004502:	b2d2      	uxtb	r2, r2
 8004504:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800450a:	1c5a      	adds	r2, r3, #1
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004514:	3b01      	subs	r3, #1
 8004516:	b29a      	uxth	r2, r3
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004520:	b29b      	uxth	r3, r3
 8004522:	3b01      	subs	r3, #1
 8004524:	b29a      	uxth	r2, r3
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	691a      	ldr	r2, [r3, #16]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004534:	b2d2      	uxtb	r2, r2
 8004536:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453c:	1c5a      	adds	r2, r3, #1
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004546:	3b01      	subs	r3, #1
 8004548:	b29a      	uxth	r2, r3
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004552:	b29b      	uxth	r3, r3
 8004554:	3b01      	subs	r3, #1
 8004556:	b29a      	uxth	r2, r3
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800455c:	e0b8      	b.n	80046d0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800455e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004560:	9300      	str	r3, [sp, #0]
 8004562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004564:	2200      	movs	r2, #0
 8004566:	4966      	ldr	r1, [pc, #408]	; (8004700 <HAL_I2C_Mem_Read+0x448>)
 8004568:	68f8      	ldr	r0, [r7, #12]
 800456a:	f001 feaf 	bl	80062cc <I2C_WaitOnFlagUntilTimeout>
 800456e:	4603      	mov	r3, r0
 8004570:	2b00      	cmp	r3, #0
 8004572:	d001      	beq.n	8004578 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	e0bf      	b.n	80046f8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004586:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	691a      	ldr	r2, [r3, #16]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004592:	b2d2      	uxtb	r2, r2
 8004594:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459a:	1c5a      	adds	r2, r3, #1
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045a4:	3b01      	subs	r3, #1
 80045a6:	b29a      	uxth	r2, r3
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045b0:	b29b      	uxth	r3, r3
 80045b2:	3b01      	subs	r3, #1
 80045b4:	b29a      	uxth	r2, r3
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80045ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045bc:	9300      	str	r3, [sp, #0]
 80045be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045c0:	2200      	movs	r2, #0
 80045c2:	494f      	ldr	r1, [pc, #316]	; (8004700 <HAL_I2C_Mem_Read+0x448>)
 80045c4:	68f8      	ldr	r0, [r7, #12]
 80045c6:	f001 fe81 	bl	80062cc <I2C_WaitOnFlagUntilTimeout>
 80045ca:	4603      	mov	r3, r0
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d001      	beq.n	80045d4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	e091      	b.n	80046f8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	691a      	ldr	r2, [r3, #16]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ee:	b2d2      	uxtb	r2, r2
 80045f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f6:	1c5a      	adds	r2, r3, #1
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004600:	3b01      	subs	r3, #1
 8004602:	b29a      	uxth	r2, r3
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800460c:	b29b      	uxth	r3, r3
 800460e:	3b01      	subs	r3, #1
 8004610:	b29a      	uxth	r2, r3
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	691a      	ldr	r2, [r3, #16]
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004620:	b2d2      	uxtb	r2, r2
 8004622:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004628:	1c5a      	adds	r2, r3, #1
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004632:	3b01      	subs	r3, #1
 8004634:	b29a      	uxth	r2, r3
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800463e:	b29b      	uxth	r3, r3
 8004640:	3b01      	subs	r3, #1
 8004642:	b29a      	uxth	r2, r3
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004648:	e042      	b.n	80046d0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800464a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800464c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800464e:	68f8      	ldr	r0, [r7, #12]
 8004650:	f001 ffc6 	bl	80065e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004654:	4603      	mov	r3, r0
 8004656:	2b00      	cmp	r3, #0
 8004658:	d001      	beq.n	800465e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	e04c      	b.n	80046f8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	691a      	ldr	r2, [r3, #16]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004668:	b2d2      	uxtb	r2, r2
 800466a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004670:	1c5a      	adds	r2, r3, #1
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800467a:	3b01      	subs	r3, #1
 800467c:	b29a      	uxth	r2, r3
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004686:	b29b      	uxth	r3, r3
 8004688:	3b01      	subs	r3, #1
 800468a:	b29a      	uxth	r2, r3
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	695b      	ldr	r3, [r3, #20]
 8004696:	f003 0304 	and.w	r3, r3, #4
 800469a:	2b04      	cmp	r3, #4
 800469c:	d118      	bne.n	80046d0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	691a      	ldr	r2, [r3, #16]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a8:	b2d2      	uxtb	r2, r2
 80046aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b0:	1c5a      	adds	r2, r3, #1
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046ba:	3b01      	subs	r3, #1
 80046bc:	b29a      	uxth	r2, r3
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046c6:	b29b      	uxth	r3, r3
 80046c8:	3b01      	subs	r3, #1
 80046ca:	b29a      	uxth	r2, r3
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	f47f aec2 	bne.w	800445e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2220      	movs	r2, #32
 80046de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2200      	movs	r2, #0
 80046e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2200      	movs	r2, #0
 80046ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80046f2:	2300      	movs	r3, #0
 80046f4:	e000      	b.n	80046f8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80046f6:	2302      	movs	r3, #2
  }
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3728      	adds	r7, #40	; 0x28
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}
 8004700:	00010004 	.word	0x00010004

08004704 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b088      	sub	sp, #32
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800470c:	2300      	movs	r3, #0
 800470e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800471c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004724:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800472c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800472e:	7bfb      	ldrb	r3, [r7, #15]
 8004730:	2b10      	cmp	r3, #16
 8004732:	d003      	beq.n	800473c <HAL_I2C_EV_IRQHandler+0x38>
 8004734:	7bfb      	ldrb	r3, [r7, #15]
 8004736:	2b40      	cmp	r3, #64	; 0x40
 8004738:	f040 80b1 	bne.w	800489e <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	699b      	ldr	r3, [r3, #24]
 8004742:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	695b      	ldr	r3, [r3, #20]
 800474a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800474c:	69fb      	ldr	r3, [r7, #28]
 800474e:	f003 0301 	and.w	r3, r3, #1
 8004752:	2b00      	cmp	r3, #0
 8004754:	d10d      	bne.n	8004772 <HAL_I2C_EV_IRQHandler+0x6e>
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800475c:	d003      	beq.n	8004766 <HAL_I2C_EV_IRQHandler+0x62>
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004764:	d101      	bne.n	800476a <HAL_I2C_EV_IRQHandler+0x66>
 8004766:	2301      	movs	r3, #1
 8004768:	e000      	b.n	800476c <HAL_I2C_EV_IRQHandler+0x68>
 800476a:	2300      	movs	r3, #0
 800476c:	2b01      	cmp	r3, #1
 800476e:	f000 8114 	beq.w	800499a <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004772:	69fb      	ldr	r3, [r7, #28]
 8004774:	f003 0301 	and.w	r3, r3, #1
 8004778:	2b00      	cmp	r3, #0
 800477a:	d00b      	beq.n	8004794 <HAL_I2C_EV_IRQHandler+0x90>
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004782:	2b00      	cmp	r3, #0
 8004784:	d006      	beq.n	8004794 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f001 ffaf 	bl	80066ea <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	f000 fd5e 	bl	800524e <I2C_Master_SB>
 8004792:	e083      	b.n	800489c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004794:	69fb      	ldr	r3, [r7, #28]
 8004796:	f003 0308 	and.w	r3, r3, #8
 800479a:	2b00      	cmp	r3, #0
 800479c:	d008      	beq.n	80047b0 <HAL_I2C_EV_IRQHandler+0xac>
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d003      	beq.n	80047b0 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	f000 fdd6 	bl	800535a <I2C_Master_ADD10>
 80047ae:	e075      	b.n	800489c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80047b0:	69fb      	ldr	r3, [r7, #28]
 80047b2:	f003 0302 	and.w	r3, r3, #2
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d008      	beq.n	80047cc <HAL_I2C_EV_IRQHandler+0xc8>
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d003      	beq.n	80047cc <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	f000 fdf2 	bl	80053ae <I2C_Master_ADDR>
 80047ca:	e067      	b.n	800489c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80047cc:	69bb      	ldr	r3, [r7, #24]
 80047ce:	f003 0304 	and.w	r3, r3, #4
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d036      	beq.n	8004844 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047e4:	f000 80db 	beq.w	800499e <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80047e8:	69fb      	ldr	r3, [r7, #28]
 80047ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d00d      	beq.n	800480e <HAL_I2C_EV_IRQHandler+0x10a>
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d008      	beq.n	800480e <HAL_I2C_EV_IRQHandler+0x10a>
 80047fc:	69fb      	ldr	r3, [r7, #28]
 80047fe:	f003 0304 	and.w	r3, r3, #4
 8004802:	2b00      	cmp	r3, #0
 8004804:	d103      	bne.n	800480e <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f000 f9d6 	bl	8004bb8 <I2C_MasterTransmit_TXE>
 800480c:	e046      	b.n	800489c <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800480e:	69fb      	ldr	r3, [r7, #28]
 8004810:	f003 0304 	and.w	r3, r3, #4
 8004814:	2b00      	cmp	r3, #0
 8004816:	f000 80c2 	beq.w	800499e <HAL_I2C_EV_IRQHandler+0x29a>
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004820:	2b00      	cmp	r3, #0
 8004822:	f000 80bc 	beq.w	800499e <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004826:	7bbb      	ldrb	r3, [r7, #14]
 8004828:	2b21      	cmp	r3, #33	; 0x21
 800482a:	d103      	bne.n	8004834 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f000 fa5f 	bl	8004cf0 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004832:	e0b4      	b.n	800499e <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8004834:	7bfb      	ldrb	r3, [r7, #15]
 8004836:	2b40      	cmp	r3, #64	; 0x40
 8004838:	f040 80b1 	bne.w	800499e <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	f000 facd 	bl	8004ddc <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004842:	e0ac      	b.n	800499e <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800484e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004852:	f000 80a4 	beq.w	800499e <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004856:	69fb      	ldr	r3, [r7, #28]
 8004858:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800485c:	2b00      	cmp	r3, #0
 800485e:	d00d      	beq.n	800487c <HAL_I2C_EV_IRQHandler+0x178>
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004866:	2b00      	cmp	r3, #0
 8004868:	d008      	beq.n	800487c <HAL_I2C_EV_IRQHandler+0x178>
 800486a:	69fb      	ldr	r3, [r7, #28]
 800486c:	f003 0304 	and.w	r3, r3, #4
 8004870:	2b00      	cmp	r3, #0
 8004872:	d103      	bne.n	800487c <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	f000 fb45 	bl	8004f04 <I2C_MasterReceive_RXNE>
 800487a:	e00f      	b.n	800489c <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800487c:	69fb      	ldr	r3, [r7, #28]
 800487e:	f003 0304 	and.w	r3, r3, #4
 8004882:	2b00      	cmp	r3, #0
 8004884:	f000 808b 	beq.w	800499e <HAL_I2C_EV_IRQHandler+0x29a>
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800488e:	2b00      	cmp	r3, #0
 8004890:	f000 8085 	beq.w	800499e <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004894:	6878      	ldr	r0, [r7, #4]
 8004896:	f000 fbf0 	bl	800507a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800489a:	e080      	b.n	800499e <HAL_I2C_EV_IRQHandler+0x29a>
 800489c:	e07f      	b.n	800499e <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d004      	beq.n	80048b0 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	695b      	ldr	r3, [r3, #20]
 80048ac:	61fb      	str	r3, [r7, #28]
 80048ae:	e007      	b.n	80048c0 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	699b      	ldr	r3, [r3, #24]
 80048b6:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	695b      	ldr	r3, [r3, #20]
 80048be:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80048c0:	69fb      	ldr	r3, [r7, #28]
 80048c2:	f003 0302 	and.w	r3, r3, #2
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d011      	beq.n	80048ee <HAL_I2C_EV_IRQHandler+0x1ea>
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d00c      	beq.n	80048ee <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d003      	beq.n	80048e4 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	699b      	ldr	r3, [r3, #24]
 80048e2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80048e4:	69b9      	ldr	r1, [r7, #24]
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f000 ffb0 	bl	800584c <I2C_Slave_ADDR>
 80048ec:	e05a      	b.n	80049a4 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80048ee:	69fb      	ldr	r3, [r7, #28]
 80048f0:	f003 0310 	and.w	r3, r3, #16
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d008      	beq.n	800490a <HAL_I2C_EV_IRQHandler+0x206>
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d003      	beq.n	800490a <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f000 ffea 	bl	80058dc <I2C_Slave_STOPF>
 8004908:	e04c      	b.n	80049a4 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800490a:	7bbb      	ldrb	r3, [r7, #14]
 800490c:	2b21      	cmp	r3, #33	; 0x21
 800490e:	d002      	beq.n	8004916 <HAL_I2C_EV_IRQHandler+0x212>
 8004910:	7bbb      	ldrb	r3, [r7, #14]
 8004912:	2b29      	cmp	r3, #41	; 0x29
 8004914:	d120      	bne.n	8004958 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004916:	69fb      	ldr	r3, [r7, #28]
 8004918:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800491c:	2b00      	cmp	r3, #0
 800491e:	d00d      	beq.n	800493c <HAL_I2C_EV_IRQHandler+0x238>
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004926:	2b00      	cmp	r3, #0
 8004928:	d008      	beq.n	800493c <HAL_I2C_EV_IRQHandler+0x238>
 800492a:	69fb      	ldr	r3, [r7, #28]
 800492c:	f003 0304 	and.w	r3, r3, #4
 8004930:	2b00      	cmp	r3, #0
 8004932:	d103      	bne.n	800493c <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	f000 fecb 	bl	80056d0 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800493a:	e032      	b.n	80049a2 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800493c:	69fb      	ldr	r3, [r7, #28]
 800493e:	f003 0304 	and.w	r3, r3, #4
 8004942:	2b00      	cmp	r3, #0
 8004944:	d02d      	beq.n	80049a2 <HAL_I2C_EV_IRQHandler+0x29e>
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800494c:	2b00      	cmp	r3, #0
 800494e:	d028      	beq.n	80049a2 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	f000 fefa 	bl	800574a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004956:	e024      	b.n	80049a2 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004958:	69fb      	ldr	r3, [r7, #28]
 800495a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800495e:	2b00      	cmp	r3, #0
 8004960:	d00d      	beq.n	800497e <HAL_I2C_EV_IRQHandler+0x27a>
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004968:	2b00      	cmp	r3, #0
 800496a:	d008      	beq.n	800497e <HAL_I2C_EV_IRQHandler+0x27a>
 800496c:	69fb      	ldr	r3, [r7, #28]
 800496e:	f003 0304 	and.w	r3, r3, #4
 8004972:	2b00      	cmp	r3, #0
 8004974:	d103      	bne.n	800497e <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f000 ff08 	bl	800578c <I2C_SlaveReceive_RXNE>
 800497c:	e012      	b.n	80049a4 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800497e:	69fb      	ldr	r3, [r7, #28]
 8004980:	f003 0304 	and.w	r3, r3, #4
 8004984:	2b00      	cmp	r3, #0
 8004986:	d00d      	beq.n	80049a4 <HAL_I2C_EV_IRQHandler+0x2a0>
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800498e:	2b00      	cmp	r3, #0
 8004990:	d008      	beq.n	80049a4 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f000 ff38 	bl	8005808 <I2C_SlaveReceive_BTF>
 8004998:	e004      	b.n	80049a4 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 800499a:	bf00      	nop
 800499c:	e002      	b.n	80049a4 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800499e:	bf00      	nop
 80049a0:	e000      	b.n	80049a4 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80049a2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80049a4:	3720      	adds	r7, #32
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}

080049aa <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80049aa:	b580      	push	{r7, lr}
 80049ac:	b08a      	sub	sp, #40	; 0x28
 80049ae:	af00      	add	r7, sp, #0
 80049b0:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	695b      	ldr	r3, [r3, #20]
 80049b8:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80049c2:	2300      	movs	r3, #0
 80049c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049cc:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80049ce:	6a3b      	ldr	r3, [r7, #32]
 80049d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d00d      	beq.n	80049f4 <HAL_I2C_ER_IRQHandler+0x4a>
 80049d8:	69fb      	ldr	r3, [r7, #28]
 80049da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d008      	beq.n	80049f4 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 80049e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e4:	f043 0301 	orr.w	r3, r3, #1
 80049e8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80049f2:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80049f4:	6a3b      	ldr	r3, [r7, #32]
 80049f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d00d      	beq.n	8004a1a <HAL_I2C_ER_IRQHandler+0x70>
 80049fe:	69fb      	ldr	r3, [r7, #28]
 8004a00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d008      	beq.n	8004a1a <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8004a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0a:	f043 0302 	orr.w	r3, r3, #2
 8004a0e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8004a18:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004a1a:	6a3b      	ldr	r3, [r7, #32]
 8004a1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d03e      	beq.n	8004aa2 <HAL_I2C_ER_IRQHandler+0xf8>
 8004a24:	69fb      	ldr	r3, [r7, #28]
 8004a26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d039      	beq.n	8004aa2 <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 8004a2e:	7efb      	ldrb	r3, [r7, #27]
 8004a30:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a36:	b29b      	uxth	r3, r3
 8004a38:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a40:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a46:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004a48:	7ebb      	ldrb	r3, [r7, #26]
 8004a4a:	2b20      	cmp	r3, #32
 8004a4c:	d112      	bne.n	8004a74 <HAL_I2C_ER_IRQHandler+0xca>
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d10f      	bne.n	8004a74 <HAL_I2C_ER_IRQHandler+0xca>
 8004a54:	7cfb      	ldrb	r3, [r7, #19]
 8004a56:	2b21      	cmp	r3, #33	; 0x21
 8004a58:	d008      	beq.n	8004a6c <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004a5a:	7cfb      	ldrb	r3, [r7, #19]
 8004a5c:	2b29      	cmp	r3, #41	; 0x29
 8004a5e:	d005      	beq.n	8004a6c <HAL_I2C_ER_IRQHandler+0xc2>
 8004a60:	7cfb      	ldrb	r3, [r7, #19]
 8004a62:	2b28      	cmp	r3, #40	; 0x28
 8004a64:	d106      	bne.n	8004a74 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2b21      	cmp	r3, #33	; 0x21
 8004a6a:	d103      	bne.n	8004a74 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f001 f865 	bl	8005b3c <I2C_Slave_AF>
 8004a72:	e016      	b.n	8004aa2 <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a7c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8004a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a80:	f043 0304 	orr.w	r3, r3, #4
 8004a84:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004a86:	7efb      	ldrb	r3, [r7, #27]
 8004a88:	2b10      	cmp	r3, #16
 8004a8a:	d002      	beq.n	8004a92 <HAL_I2C_ER_IRQHandler+0xe8>
 8004a8c:	7efb      	ldrb	r3, [r7, #27]
 8004a8e:	2b40      	cmp	r3, #64	; 0x40
 8004a90:	d107      	bne.n	8004aa2 <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004aa0:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004aa2:	6a3b      	ldr	r3, [r7, #32]
 8004aa4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d00d      	beq.n	8004ac8 <HAL_I2C_ER_IRQHandler+0x11e>
 8004aac:	69fb      	ldr	r3, [r7, #28]
 8004aae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d008      	beq.n	8004ac8 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8004ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab8:	f043 0308 	orr.w	r3, r3, #8
 8004abc:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8004ac6:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d008      	beq.n	8004ae0 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad4:	431a      	orrs	r2, r3
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f001 f89e 	bl	8005c1c <I2C_ITError>
  }
}
 8004ae0:	bf00      	nop
 8004ae2:	3728      	adds	r7, #40	; 0x28
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}

08004ae8 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b083      	sub	sp, #12
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004af0:	bf00      	nop
 8004af2:	370c      	adds	r7, #12
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr

08004afc <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b083      	sub	sp, #12
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004b04:	bf00      	nop
 8004b06:	370c      	adds	r7, #12
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr

08004b10 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b083      	sub	sp, #12
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004b18:	bf00      	nop
 8004b1a:	370c      	adds	r7, #12
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b22:	4770      	bx	lr

08004b24 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b083      	sub	sp, #12
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004b2c:	bf00      	nop
 8004b2e:	370c      	adds	r7, #12
 8004b30:	46bd      	mov	sp, r7
 8004b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b36:	4770      	bx	lr

08004b38 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b083      	sub	sp, #12
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	460b      	mov	r3, r1
 8004b42:	70fb      	strb	r3, [r7, #3]
 8004b44:	4613      	mov	r3, r2
 8004b46:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004b48:	bf00      	nop
 8004b4a:	370c      	adds	r7, #12
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b52:	4770      	bx	lr

08004b54 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b083      	sub	sp, #12
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004b5c:	bf00      	nop
 8004b5e:	370c      	adds	r7, #12
 8004b60:	46bd      	mov	sp, r7
 8004b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b66:	4770      	bx	lr

08004b68 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b083      	sub	sp, #12
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004b70:	bf00      	nop
 8004b72:	370c      	adds	r7, #12
 8004b74:	46bd      	mov	sp, r7
 8004b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7a:	4770      	bx	lr

08004b7c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b083      	sub	sp, #12
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004b84:	bf00      	nop
 8004b86:	370c      	adds	r7, #12
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr

08004b90 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b083      	sub	sp, #12
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004b98:	bf00      	nop
 8004b9a:	370c      	adds	r7, #12
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba2:	4770      	bx	lr

08004ba4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b083      	sub	sp, #12
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004bac:	bf00      	nop
 8004bae:	370c      	adds	r7, #12
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr

08004bb8 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b084      	sub	sp, #16
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bc6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004bce:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bd4:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d150      	bne.n	8004c80 <I2C_MasterTransmit_TXE+0xc8>
 8004bde:	7bfb      	ldrb	r3, [r7, #15]
 8004be0:	2b21      	cmp	r3, #33	; 0x21
 8004be2:	d14d      	bne.n	8004c80 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	2b08      	cmp	r3, #8
 8004be8:	d01d      	beq.n	8004c26 <I2C_MasterTransmit_TXE+0x6e>
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	2b20      	cmp	r3, #32
 8004bee:	d01a      	beq.n	8004c26 <I2C_MasterTransmit_TXE+0x6e>
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004bf6:	d016      	beq.n	8004c26 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	685a      	ldr	r2, [r3, #4]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004c06:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2211      	movs	r2, #17
 8004c0c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2200      	movs	r2, #0
 8004c12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2220      	movs	r2, #32
 8004c1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f7ff ff62 	bl	8004ae8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004c24:	e060      	b.n	8004ce8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	685a      	ldr	r2, [r3, #4]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004c34:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c44:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2220      	movs	r2, #32
 8004c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c5a:	b2db      	uxtb	r3, r3
 8004c5c:	2b40      	cmp	r3, #64	; 0x40
 8004c5e:	d107      	bne.n	8004c70 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2200      	movs	r2, #0
 8004c64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	f7ff ff7d 	bl	8004b68 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004c6e:	e03b      	b.n	8004ce8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2200      	movs	r2, #0
 8004c74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	f7ff ff35 	bl	8004ae8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004c7e:	e033      	b.n	8004ce8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004c80:	7bfb      	ldrb	r3, [r7, #15]
 8004c82:	2b21      	cmp	r3, #33	; 0x21
 8004c84:	d005      	beq.n	8004c92 <I2C_MasterTransmit_TXE+0xda>
 8004c86:	7bbb      	ldrb	r3, [r7, #14]
 8004c88:	2b40      	cmp	r3, #64	; 0x40
 8004c8a:	d12d      	bne.n	8004ce8 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004c8c:	7bfb      	ldrb	r3, [r7, #15]
 8004c8e:	2b22      	cmp	r3, #34	; 0x22
 8004c90:	d12a      	bne.n	8004ce8 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d108      	bne.n	8004cae <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	685a      	ldr	r2, [r3, #4]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004caa:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004cac:	e01c      	b.n	8004ce8 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004cb4:	b2db      	uxtb	r3, r3
 8004cb6:	2b40      	cmp	r3, #64	; 0x40
 8004cb8:	d103      	bne.n	8004cc2 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f000 f88e 	bl	8004ddc <I2C_MemoryTransmit_TXE_BTF>
}
 8004cc0:	e012      	b.n	8004ce8 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc6:	781a      	ldrb	r2, [r3, #0]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd2:	1c5a      	adds	r2, r3, #1
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	3b01      	subs	r3, #1
 8004ce0:	b29a      	uxth	r2, r3
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004ce6:	e7ff      	b.n	8004ce8 <I2C_MasterTransmit_TXE+0x130>
 8004ce8:	bf00      	nop
 8004cea:	3710      	adds	r7, #16
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}

08004cf0 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b084      	sub	sp, #16
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cfc:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d04:	b2db      	uxtb	r3, r3
 8004d06:	2b21      	cmp	r3, #33	; 0x21
 8004d08:	d164      	bne.n	8004dd4 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d012      	beq.n	8004d3a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d18:	781a      	ldrb	r2, [r3, #0]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d24:	1c5a      	adds	r2, r3, #1
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	3b01      	subs	r3, #1
 8004d32:	b29a      	uxth	r2, r3
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004d38:	e04c      	b.n	8004dd4 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2b08      	cmp	r3, #8
 8004d3e:	d01d      	beq.n	8004d7c <I2C_MasterTransmit_BTF+0x8c>
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2b20      	cmp	r3, #32
 8004d44:	d01a      	beq.n	8004d7c <I2C_MasterTransmit_BTF+0x8c>
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004d4c:	d016      	beq.n	8004d7c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	685a      	ldr	r2, [r3, #4]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004d5c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2211      	movs	r2, #17
 8004d62:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2200      	movs	r2, #0
 8004d68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2220      	movs	r2, #32
 8004d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f7ff feb7 	bl	8004ae8 <HAL_I2C_MasterTxCpltCallback>
}
 8004d7a:	e02b      	b.n	8004dd4 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	685a      	ldr	r2, [r3, #4]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004d8a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d9a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2220      	movs	r2, #32
 8004da6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004db0:	b2db      	uxtb	r3, r3
 8004db2:	2b40      	cmp	r3, #64	; 0x40
 8004db4:	d107      	bne.n	8004dc6 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2200      	movs	r2, #0
 8004dba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f7ff fed2 	bl	8004b68 <HAL_I2C_MemTxCpltCallback>
}
 8004dc4:	e006      	b.n	8004dd4 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f7ff fe8a 	bl	8004ae8 <HAL_I2C_MasterTxCpltCallback>
}
 8004dd4:	bf00      	nop
 8004dd6:	3710      	adds	r7, #16
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}

08004ddc <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b084      	sub	sp, #16
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dea:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d11d      	bne.n	8004e30 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d10b      	bne.n	8004e14 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e00:	b2da      	uxtb	r2, r3
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e0c:	1c9a      	adds	r2, r3, #2
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004e12:	e073      	b.n	8004efc <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	121b      	asrs	r3, r3, #8
 8004e1c:	b2da      	uxtb	r2, r3
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e28:	1c5a      	adds	r2, r3, #1
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004e2e:	e065      	b.n	8004efc <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d10b      	bne.n	8004e50 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e3c:	b2da      	uxtb	r2, r3
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e48:	1c5a      	adds	r2, r3, #1
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004e4e:	e055      	b.n	8004efc <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e54:	2b02      	cmp	r3, #2
 8004e56:	d151      	bne.n	8004efc <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004e58:	7bfb      	ldrb	r3, [r7, #15]
 8004e5a:	2b22      	cmp	r3, #34	; 0x22
 8004e5c:	d10d      	bne.n	8004e7a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	681a      	ldr	r2, [r3, #0]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e6c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e72:	1c5a      	adds	r2, r3, #1
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004e78:	e040      	b.n	8004efc <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d015      	beq.n	8004eb0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004e84:	7bfb      	ldrb	r3, [r7, #15]
 8004e86:	2b21      	cmp	r3, #33	; 0x21
 8004e88:	d112      	bne.n	8004eb0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e8e:	781a      	ldrb	r2, [r3, #0]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9a:	1c5a      	adds	r2, r3, #1
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	3b01      	subs	r3, #1
 8004ea8:	b29a      	uxth	r2, r3
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004eae:	e025      	b.n	8004efc <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eb4:	b29b      	uxth	r3, r3
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d120      	bne.n	8004efc <I2C_MemoryTransmit_TXE_BTF+0x120>
 8004eba:	7bfb      	ldrb	r3, [r7, #15]
 8004ebc:	2b21      	cmp	r3, #33	; 0x21
 8004ebe:	d11d      	bne.n	8004efc <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	685a      	ldr	r2, [r3, #4]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004ece:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	681a      	ldr	r2, [r3, #0]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ede:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2220      	movs	r2, #32
 8004eea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f7ff fe36 	bl	8004b68 <HAL_I2C_MemTxCpltCallback>
}
 8004efc:	bf00      	nop
 8004efe:	3710      	adds	r7, #16
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}

08004f04 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b084      	sub	sp, #16
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f12:	b2db      	uxtb	r3, r3
 8004f14:	2b22      	cmp	r3, #34	; 0x22
 8004f16:	f040 80ac 	bne.w	8005072 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2b03      	cmp	r3, #3
 8004f26:	d921      	bls.n	8004f6c <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	691a      	ldr	r2, [r3, #16]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f32:	b2d2      	uxtb	r2, r2
 8004f34:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f3a:	1c5a      	adds	r2, r3, #1
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f44:	b29b      	uxth	r3, r3
 8004f46:	3b01      	subs	r3, #1
 8004f48:	b29a      	uxth	r2, r3
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	2b03      	cmp	r3, #3
 8004f56:	f040 808c 	bne.w	8005072 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	685a      	ldr	r2, [r3, #4]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f68:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8004f6a:	e082      	b.n	8005072 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f70:	2b02      	cmp	r3, #2
 8004f72:	d075      	beq.n	8005060 <I2C_MasterReceive_RXNE+0x15c>
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d002      	beq.n	8004f80 <I2C_MasterReceive_RXNE+0x7c>
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d16f      	bne.n	8005060 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	f001 fafb 	bl	800657c <I2C_WaitOnSTOPRequestThroughIT>
 8004f86:	4603      	mov	r3, r0
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d142      	bne.n	8005012 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	681a      	ldr	r2, [r3, #0]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f9a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	685a      	ldr	r2, [r3, #4]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004faa:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	691a      	ldr	r2, [r3, #16]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb6:	b2d2      	uxtb	r2, r2
 8004fb8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fbe:	1c5a      	adds	r2, r3, #1
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	3b01      	subs	r3, #1
 8004fcc:	b29a      	uxth	r2, r3
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2220      	movs	r2, #32
 8004fd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004fe0:	b2db      	uxtb	r3, r3
 8004fe2:	2b40      	cmp	r3, #64	; 0x40
 8004fe4:	d10a      	bne.n	8004ffc <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	f7ff fdc1 	bl	8004b7c <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004ffa:	e03a      	b.n	8005072 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2200      	movs	r2, #0
 8005000:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2212      	movs	r2, #18
 8005008:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f7ff fd76 	bl	8004afc <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005010:	e02f      	b.n	8005072 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	685a      	ldr	r2, [r3, #4]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005020:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	691a      	ldr	r2, [r3, #16]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502c:	b2d2      	uxtb	r2, r2
 800502e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005034:	1c5a      	adds	r2, r3, #1
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800503e:	b29b      	uxth	r3, r3
 8005040:	3b01      	subs	r3, #1
 8005042:	b29a      	uxth	r2, r3
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2220      	movs	r2, #32
 800504c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2200      	movs	r2, #0
 8005054:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f7ff fd99 	bl	8004b90 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800505e:	e008      	b.n	8005072 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	685a      	ldr	r2, [r3, #4]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800506e:	605a      	str	r2, [r3, #4]
}
 8005070:	e7ff      	b.n	8005072 <I2C_MasterReceive_RXNE+0x16e>
 8005072:	bf00      	nop
 8005074:	3710      	adds	r7, #16
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}

0800507a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800507a:	b580      	push	{r7, lr}
 800507c:	b084      	sub	sp, #16
 800507e:	af00      	add	r7, sp, #0
 8005080:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005086:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800508c:	b29b      	uxth	r3, r3
 800508e:	2b04      	cmp	r3, #4
 8005090:	d11b      	bne.n	80050ca <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	685a      	ldr	r2, [r3, #4]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050a0:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	691a      	ldr	r2, [r3, #16]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ac:	b2d2      	uxtb	r2, r2
 80050ae:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b4:	1c5a      	adds	r2, r3, #1
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050be:	b29b      	uxth	r3, r3
 80050c0:	3b01      	subs	r3, #1
 80050c2:	b29a      	uxth	r2, r3
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80050c8:	e0bd      	b.n	8005246 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050ce:	b29b      	uxth	r3, r3
 80050d0:	2b03      	cmp	r3, #3
 80050d2:	d129      	bne.n	8005128 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	685a      	ldr	r2, [r3, #4]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050e2:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2b04      	cmp	r3, #4
 80050e8:	d00a      	beq.n	8005100 <I2C_MasterReceive_BTF+0x86>
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2b02      	cmp	r3, #2
 80050ee:	d007      	beq.n	8005100 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050fe:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	691a      	ldr	r2, [r3, #16]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800510a:	b2d2      	uxtb	r2, r2
 800510c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005112:	1c5a      	adds	r2, r3, #1
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800511c:	b29b      	uxth	r3, r3
 800511e:	3b01      	subs	r3, #1
 8005120:	b29a      	uxth	r2, r3
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005126:	e08e      	b.n	8005246 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800512c:	b29b      	uxth	r3, r3
 800512e:	2b02      	cmp	r3, #2
 8005130:	d176      	bne.n	8005220 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2b01      	cmp	r3, #1
 8005136:	d002      	beq.n	800513e <I2C_MasterReceive_BTF+0xc4>
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2b10      	cmp	r3, #16
 800513c:	d108      	bne.n	8005150 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800514c:	601a      	str	r2, [r3, #0]
 800514e:	e019      	b.n	8005184 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2b04      	cmp	r3, #4
 8005154:	d002      	beq.n	800515c <I2C_MasterReceive_BTF+0xe2>
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2b02      	cmp	r3, #2
 800515a:	d108      	bne.n	800516e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	681a      	ldr	r2, [r3, #0]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800516a:	601a      	str	r2, [r3, #0]
 800516c:	e00a      	b.n	8005184 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2b10      	cmp	r3, #16
 8005172:	d007      	beq.n	8005184 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	681a      	ldr	r2, [r3, #0]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005182:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	691a      	ldr	r2, [r3, #16]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800518e:	b2d2      	uxtb	r2, r2
 8005190:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005196:	1c5a      	adds	r2, r3, #1
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	3b01      	subs	r3, #1
 80051a4:	b29a      	uxth	r2, r3
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	691a      	ldr	r2, [r3, #16]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b4:	b2d2      	uxtb	r2, r2
 80051b6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051bc:	1c5a      	adds	r2, r3, #1
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	3b01      	subs	r3, #1
 80051ca:	b29a      	uxth	r2, r3
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	685a      	ldr	r2, [r3, #4]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80051de:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2220      	movs	r2, #32
 80051e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051ee:	b2db      	uxtb	r3, r3
 80051f0:	2b40      	cmp	r3, #64	; 0x40
 80051f2:	d10a      	bne.n	800520a <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2200      	movs	r2, #0
 80051f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2200      	movs	r2, #0
 8005200:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f7ff fcba 	bl	8004b7c <HAL_I2C_MemRxCpltCallback>
}
 8005208:	e01d      	b.n	8005246 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2200      	movs	r2, #0
 800520e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2212      	movs	r2, #18
 8005216:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	f7ff fc6f 	bl	8004afc <HAL_I2C_MasterRxCpltCallback>
}
 800521e:	e012      	b.n	8005246 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	691a      	ldr	r2, [r3, #16]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522a:	b2d2      	uxtb	r2, r2
 800522c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005232:	1c5a      	adds	r2, r3, #1
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800523c:	b29b      	uxth	r3, r3
 800523e:	3b01      	subs	r3, #1
 8005240:	b29a      	uxth	r2, r3
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005246:	bf00      	nop
 8005248:	3710      	adds	r7, #16
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}

0800524e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800524e:	b480      	push	{r7}
 8005250:	b083      	sub	sp, #12
 8005252:	af00      	add	r7, sp, #0
 8005254:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800525c:	b2db      	uxtb	r3, r3
 800525e:	2b40      	cmp	r3, #64	; 0x40
 8005260:	d117      	bne.n	8005292 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005266:	2b00      	cmp	r3, #0
 8005268:	d109      	bne.n	800527e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800526e:	b2db      	uxtb	r3, r3
 8005270:	461a      	mov	r2, r3
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800527a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800527c:	e067      	b.n	800534e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005282:	b2db      	uxtb	r3, r3
 8005284:	f043 0301 	orr.w	r3, r3, #1
 8005288:	b2da      	uxtb	r2, r3
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	611a      	str	r2, [r3, #16]
}
 8005290:	e05d      	b.n	800534e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	691b      	ldr	r3, [r3, #16]
 8005296:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800529a:	d133      	bne.n	8005304 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052a2:	b2db      	uxtb	r3, r3
 80052a4:	2b21      	cmp	r3, #33	; 0x21
 80052a6:	d109      	bne.n	80052bc <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052ac:	b2db      	uxtb	r3, r3
 80052ae:	461a      	mov	r2, r3
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80052b8:	611a      	str	r2, [r3, #16]
 80052ba:	e008      	b.n	80052ce <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	f043 0301 	orr.w	r3, r3, #1
 80052c6:	b2da      	uxtb	r2, r3
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d004      	beq.n	80052e0 <I2C_Master_SB+0x92>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d108      	bne.n	80052f2 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d032      	beq.n	800534e <I2C_Master_SB+0x100>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d02d      	beq.n	800534e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	685a      	ldr	r2, [r3, #4]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005300:	605a      	str	r2, [r3, #4]
}
 8005302:	e024      	b.n	800534e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005308:	2b00      	cmp	r3, #0
 800530a:	d10e      	bne.n	800532a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005310:	b29b      	uxth	r3, r3
 8005312:	11db      	asrs	r3, r3, #7
 8005314:	b2db      	uxtb	r3, r3
 8005316:	f003 0306 	and.w	r3, r3, #6
 800531a:	b2db      	uxtb	r3, r3
 800531c:	f063 030f 	orn	r3, r3, #15
 8005320:	b2da      	uxtb	r2, r3
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	611a      	str	r2, [r3, #16]
}
 8005328:	e011      	b.n	800534e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800532e:	2b01      	cmp	r3, #1
 8005330:	d10d      	bne.n	800534e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005336:	b29b      	uxth	r3, r3
 8005338:	11db      	asrs	r3, r3, #7
 800533a:	b2db      	uxtb	r3, r3
 800533c:	f003 0306 	and.w	r3, r3, #6
 8005340:	b2db      	uxtb	r3, r3
 8005342:	f063 030e 	orn	r3, r3, #14
 8005346:	b2da      	uxtb	r2, r3
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	611a      	str	r2, [r3, #16]
}
 800534e:	bf00      	nop
 8005350:	370c      	adds	r7, #12
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr

0800535a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800535a:	b480      	push	{r7}
 800535c:	b083      	sub	sp, #12
 800535e:	af00      	add	r7, sp, #0
 8005360:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005366:	b2da      	uxtb	r2, r3
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005372:	2b00      	cmp	r3, #0
 8005374:	d004      	beq.n	8005380 <I2C_Master_ADD10+0x26>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800537a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800537c:	2b00      	cmp	r3, #0
 800537e:	d108      	bne.n	8005392 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005384:	2b00      	cmp	r3, #0
 8005386:	d00c      	beq.n	80053a2 <I2C_Master_ADD10+0x48>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800538c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800538e:	2b00      	cmp	r3, #0
 8005390:	d007      	beq.n	80053a2 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	685a      	ldr	r2, [r3, #4]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053a0:	605a      	str	r2, [r3, #4]
  }
}
 80053a2:	bf00      	nop
 80053a4:	370c      	adds	r7, #12
 80053a6:	46bd      	mov	sp, r7
 80053a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ac:	4770      	bx	lr

080053ae <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80053ae:	b480      	push	{r7}
 80053b0:	b091      	sub	sp, #68	; 0x44
 80053b2:	af00      	add	r7, sp, #0
 80053b4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80053bc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053c4:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ca:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053d2:	b2db      	uxtb	r3, r3
 80053d4:	2b22      	cmp	r3, #34	; 0x22
 80053d6:	f040 8169 	bne.w	80056ac <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d10f      	bne.n	8005402 <I2C_Master_ADDR+0x54>
 80053e2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80053e6:	2b40      	cmp	r3, #64	; 0x40
 80053e8:	d10b      	bne.n	8005402 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053ea:	2300      	movs	r3, #0
 80053ec:	633b      	str	r3, [r7, #48]	; 0x30
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	695b      	ldr	r3, [r3, #20]
 80053f4:	633b      	str	r3, [r7, #48]	; 0x30
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	699b      	ldr	r3, [r3, #24]
 80053fc:	633b      	str	r3, [r7, #48]	; 0x30
 80053fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005400:	e160      	b.n	80056c4 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005406:	2b00      	cmp	r3, #0
 8005408:	d11d      	bne.n	8005446 <I2C_Master_ADDR+0x98>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	691b      	ldr	r3, [r3, #16]
 800540e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005412:	d118      	bne.n	8005446 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005414:	2300      	movs	r3, #0
 8005416:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	695b      	ldr	r3, [r3, #20]
 800541e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	699b      	ldr	r3, [r3, #24]
 8005426:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005428:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005438:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800543e:	1c5a      	adds	r2, r3, #1
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	651a      	str	r2, [r3, #80]	; 0x50
 8005444:	e13e      	b.n	80056c4 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800544a:	b29b      	uxth	r3, r3
 800544c:	2b00      	cmp	r3, #0
 800544e:	d113      	bne.n	8005478 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005450:	2300      	movs	r3, #0
 8005452:	62bb      	str	r3, [r7, #40]	; 0x28
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	695b      	ldr	r3, [r3, #20]
 800545a:	62bb      	str	r3, [r7, #40]	; 0x28
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	699b      	ldr	r3, [r3, #24]
 8005462:	62bb      	str	r3, [r7, #40]	; 0x28
 8005464:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005474:	601a      	str	r2, [r3, #0]
 8005476:	e115      	b.n	80056a4 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800547c:	b29b      	uxth	r3, r3
 800547e:	2b01      	cmp	r3, #1
 8005480:	f040 808a 	bne.w	8005598 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005486:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800548a:	d137      	bne.n	80054fc <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800549a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054aa:	d113      	bne.n	80054d4 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054ba:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054bc:	2300      	movs	r3, #0
 80054be:	627b      	str	r3, [r7, #36]	; 0x24
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	695b      	ldr	r3, [r3, #20]
 80054c6:	627b      	str	r3, [r7, #36]	; 0x24
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	699b      	ldr	r3, [r3, #24]
 80054ce:	627b      	str	r3, [r7, #36]	; 0x24
 80054d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d2:	e0e7      	b.n	80056a4 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054d4:	2300      	movs	r3, #0
 80054d6:	623b      	str	r3, [r7, #32]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	695b      	ldr	r3, [r3, #20]
 80054de:	623b      	str	r3, [r7, #32]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	699b      	ldr	r3, [r3, #24]
 80054e6:	623b      	str	r3, [r7, #32]
 80054e8:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	681a      	ldr	r2, [r3, #0]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054f8:	601a      	str	r2, [r3, #0]
 80054fa:	e0d3      	b.n	80056a4 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80054fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054fe:	2b08      	cmp	r3, #8
 8005500:	d02e      	beq.n	8005560 <I2C_Master_ADDR+0x1b2>
 8005502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005504:	2b20      	cmp	r3, #32
 8005506:	d02b      	beq.n	8005560 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800550a:	2b12      	cmp	r3, #18
 800550c:	d102      	bne.n	8005514 <I2C_Master_ADDR+0x166>
 800550e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005510:	2b01      	cmp	r3, #1
 8005512:	d125      	bne.n	8005560 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005516:	2b04      	cmp	r3, #4
 8005518:	d00e      	beq.n	8005538 <I2C_Master_ADDR+0x18a>
 800551a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800551c:	2b02      	cmp	r3, #2
 800551e:	d00b      	beq.n	8005538 <I2C_Master_ADDR+0x18a>
 8005520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005522:	2b10      	cmp	r3, #16
 8005524:	d008      	beq.n	8005538 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005534:	601a      	str	r2, [r3, #0]
 8005536:	e007      	b.n	8005548 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	681a      	ldr	r2, [r3, #0]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005546:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005548:	2300      	movs	r3, #0
 800554a:	61fb      	str	r3, [r7, #28]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	695b      	ldr	r3, [r3, #20]
 8005552:	61fb      	str	r3, [r7, #28]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	699b      	ldr	r3, [r3, #24]
 800555a:	61fb      	str	r3, [r7, #28]
 800555c:	69fb      	ldr	r3, [r7, #28]
 800555e:	e0a1      	b.n	80056a4 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	681a      	ldr	r2, [r3, #0]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800556e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005570:	2300      	movs	r3, #0
 8005572:	61bb      	str	r3, [r7, #24]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	695b      	ldr	r3, [r3, #20]
 800557a:	61bb      	str	r3, [r7, #24]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	699b      	ldr	r3, [r3, #24]
 8005582:	61bb      	str	r3, [r7, #24]
 8005584:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005594:	601a      	str	r2, [r3, #0]
 8005596:	e085      	b.n	80056a4 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800559c:	b29b      	uxth	r3, r3
 800559e:	2b02      	cmp	r3, #2
 80055a0:	d14d      	bne.n	800563e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80055a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055a4:	2b04      	cmp	r3, #4
 80055a6:	d016      	beq.n	80055d6 <I2C_Master_ADDR+0x228>
 80055a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055aa:	2b02      	cmp	r3, #2
 80055ac:	d013      	beq.n	80055d6 <I2C_Master_ADDR+0x228>
 80055ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055b0:	2b10      	cmp	r3, #16
 80055b2:	d010      	beq.n	80055d6 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055c2:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055d2:	601a      	str	r2, [r3, #0]
 80055d4:	e007      	b.n	80055e6 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80055e4:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055f4:	d117      	bne.n	8005626 <I2C_Master_ADDR+0x278>
 80055f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055f8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80055fc:	d00b      	beq.n	8005616 <I2C_Master_ADDR+0x268>
 80055fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005600:	2b01      	cmp	r3, #1
 8005602:	d008      	beq.n	8005616 <I2C_Master_ADDR+0x268>
 8005604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005606:	2b08      	cmp	r3, #8
 8005608:	d005      	beq.n	8005616 <I2C_Master_ADDR+0x268>
 800560a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800560c:	2b10      	cmp	r3, #16
 800560e:	d002      	beq.n	8005616 <I2C_Master_ADDR+0x268>
 8005610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005612:	2b20      	cmp	r3, #32
 8005614:	d107      	bne.n	8005626 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	685a      	ldr	r2, [r3, #4]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005624:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005626:	2300      	movs	r3, #0
 8005628:	617b      	str	r3, [r7, #20]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	695b      	ldr	r3, [r3, #20]
 8005630:	617b      	str	r3, [r7, #20]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	699b      	ldr	r3, [r3, #24]
 8005638:	617b      	str	r3, [r7, #20]
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	e032      	b.n	80056a4 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800564c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005658:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800565c:	d117      	bne.n	800568e <I2C_Master_ADDR+0x2e0>
 800565e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005660:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005664:	d00b      	beq.n	800567e <I2C_Master_ADDR+0x2d0>
 8005666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005668:	2b01      	cmp	r3, #1
 800566a:	d008      	beq.n	800567e <I2C_Master_ADDR+0x2d0>
 800566c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800566e:	2b08      	cmp	r3, #8
 8005670:	d005      	beq.n	800567e <I2C_Master_ADDR+0x2d0>
 8005672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005674:	2b10      	cmp	r3, #16
 8005676:	d002      	beq.n	800567e <I2C_Master_ADDR+0x2d0>
 8005678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800567a:	2b20      	cmp	r3, #32
 800567c:	d107      	bne.n	800568e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	685a      	ldr	r2, [r3, #4]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800568c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800568e:	2300      	movs	r3, #0
 8005690:	613b      	str	r3, [r7, #16]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	695b      	ldr	r3, [r3, #20]
 8005698:	613b      	str	r3, [r7, #16]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	699b      	ldr	r3, [r3, #24]
 80056a0:	613b      	str	r3, [r7, #16]
 80056a2:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2200      	movs	r2, #0
 80056a8:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80056aa:	e00b      	b.n	80056c4 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056ac:	2300      	movs	r3, #0
 80056ae:	60fb      	str	r3, [r7, #12]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	695b      	ldr	r3, [r3, #20]
 80056b6:	60fb      	str	r3, [r7, #12]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	699b      	ldr	r3, [r3, #24]
 80056be:	60fb      	str	r3, [r7, #12]
 80056c0:	68fb      	ldr	r3, [r7, #12]
}
 80056c2:	e7ff      	b.n	80056c4 <I2C_Master_ADDR+0x316>
 80056c4:	bf00      	nop
 80056c6:	3744      	adds	r7, #68	; 0x44
 80056c8:	46bd      	mov	sp, r7
 80056ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ce:	4770      	bx	lr

080056d0 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b084      	sub	sp, #16
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056de:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056e4:	b29b      	uxth	r3, r3
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d02b      	beq.n	8005742 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ee:	781a      	ldrb	r2, [r3, #0]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056fa:	1c5a      	adds	r2, r3, #1
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005704:	b29b      	uxth	r3, r3
 8005706:	3b01      	subs	r3, #1
 8005708:	b29a      	uxth	r2, r3
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005712:	b29b      	uxth	r3, r3
 8005714:	2b00      	cmp	r3, #0
 8005716:	d114      	bne.n	8005742 <I2C_SlaveTransmit_TXE+0x72>
 8005718:	7bfb      	ldrb	r3, [r7, #15]
 800571a:	2b29      	cmp	r3, #41	; 0x29
 800571c:	d111      	bne.n	8005742 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	685a      	ldr	r2, [r3, #4]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800572c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2221      	movs	r2, #33	; 0x21
 8005732:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2228      	movs	r2, #40	; 0x28
 8005738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f7ff f9e7 	bl	8004b10 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005742:	bf00      	nop
 8005744:	3710      	adds	r7, #16
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}

0800574a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800574a:	b480      	push	{r7}
 800574c:	b083      	sub	sp, #12
 800574e:	af00      	add	r7, sp, #0
 8005750:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005756:	b29b      	uxth	r3, r3
 8005758:	2b00      	cmp	r3, #0
 800575a:	d011      	beq.n	8005780 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005760:	781a      	ldrb	r2, [r3, #0]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800576c:	1c5a      	adds	r2, r3, #1
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005776:	b29b      	uxth	r3, r3
 8005778:	3b01      	subs	r3, #1
 800577a:	b29a      	uxth	r2, r3
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005780:	bf00      	nop
 8005782:	370c      	adds	r7, #12
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr

0800578c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b084      	sub	sp, #16
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800579a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057a0:	b29b      	uxth	r3, r3
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d02c      	beq.n	8005800 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	691a      	ldr	r2, [r3, #16]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b0:	b2d2      	uxtb	r2, r2
 80057b2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b8:	1c5a      	adds	r2, r3, #1
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057c2:	b29b      	uxth	r3, r3
 80057c4:	3b01      	subs	r3, #1
 80057c6:	b29a      	uxth	r2, r3
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057d0:	b29b      	uxth	r3, r3
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d114      	bne.n	8005800 <I2C_SlaveReceive_RXNE+0x74>
 80057d6:	7bfb      	ldrb	r3, [r7, #15]
 80057d8:	2b2a      	cmp	r3, #42	; 0x2a
 80057da:	d111      	bne.n	8005800 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	685a      	ldr	r2, [r3, #4]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057ea:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2222      	movs	r2, #34	; 0x22
 80057f0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2228      	movs	r2, #40	; 0x28
 80057f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f7ff f992 	bl	8004b24 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005800:	bf00      	nop
 8005802:	3710      	adds	r7, #16
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}

08005808 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005808:	b480      	push	{r7}
 800580a:	b083      	sub	sp, #12
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005814:	b29b      	uxth	r3, r3
 8005816:	2b00      	cmp	r3, #0
 8005818:	d012      	beq.n	8005840 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	691a      	ldr	r2, [r3, #16]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005824:	b2d2      	uxtb	r2, r2
 8005826:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800582c:	1c5a      	adds	r2, r3, #1
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005836:	b29b      	uxth	r3, r3
 8005838:	3b01      	subs	r3, #1
 800583a:	b29a      	uxth	r2, r3
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005840:	bf00      	nop
 8005842:	370c      	adds	r7, #12
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr

0800584c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b084      	sub	sp, #16
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
 8005854:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005856:	2300      	movs	r3, #0
 8005858:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005860:	b2db      	uxtb	r3, r3
 8005862:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005866:	2b28      	cmp	r3, #40	; 0x28
 8005868:	d125      	bne.n	80058b6 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	685a      	ldr	r2, [r3, #4]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005878:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	f003 0304 	and.w	r3, r3, #4
 8005880:	2b00      	cmp	r3, #0
 8005882:	d101      	bne.n	8005888 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005884:	2301      	movs	r3, #1
 8005886:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800588e:	2b00      	cmp	r3, #0
 8005890:	d103      	bne.n	800589a <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	68db      	ldr	r3, [r3, #12]
 8005896:	81bb      	strh	r3, [r7, #12]
 8005898:	e002      	b.n	80058a0 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	699b      	ldr	r3, [r3, #24]
 800589e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2200      	movs	r2, #0
 80058a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80058a8:	89ba      	ldrh	r2, [r7, #12]
 80058aa:	7bfb      	ldrb	r3, [r7, #15]
 80058ac:	4619      	mov	r1, r3
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f7ff f942 	bl	8004b38 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80058b4:	e00e      	b.n	80058d4 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058b6:	2300      	movs	r3, #0
 80058b8:	60bb      	str	r3, [r7, #8]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	695b      	ldr	r3, [r3, #20]
 80058c0:	60bb      	str	r3, [r7, #8]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	699b      	ldr	r3, [r3, #24]
 80058c8:	60bb      	str	r3, [r7, #8]
 80058ca:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2200      	movs	r2, #0
 80058d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80058d4:	bf00      	nop
 80058d6:	3710      	adds	r7, #16
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}

080058dc <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b084      	sub	sp, #16
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058ea:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	685a      	ldr	r2, [r3, #4]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80058fa:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80058fc:	2300      	movs	r3, #0
 80058fe:	60bb      	str	r3, [r7, #8]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	695b      	ldr	r3, [r3, #20]
 8005906:	60bb      	str	r3, [r7, #8]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	681a      	ldr	r2, [r3, #0]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f042 0201 	orr.w	r2, r2, #1
 8005916:	601a      	str	r2, [r3, #0]
 8005918:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	681a      	ldr	r2, [r3, #0]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005928:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005934:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005938:	d172      	bne.n	8005a20 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800593a:	7bfb      	ldrb	r3, [r7, #15]
 800593c:	2b22      	cmp	r3, #34	; 0x22
 800593e:	d002      	beq.n	8005946 <I2C_Slave_STOPF+0x6a>
 8005940:	7bfb      	ldrb	r3, [r7, #15]
 8005942:	2b2a      	cmp	r3, #42	; 0x2a
 8005944:	d135      	bne.n	80059b2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	b29a      	uxth	r2, r3
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005958:	b29b      	uxth	r3, r3
 800595a:	2b00      	cmp	r3, #0
 800595c:	d005      	beq.n	800596a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005962:	f043 0204 	orr.w	r2, r3, #4
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	685a      	ldr	r2, [r3, #4]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005978:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800597e:	4618      	mov	r0, r3
 8005980:	f7fd ffd0 	bl	8003924 <HAL_DMA_GetState>
 8005984:	4603      	mov	r3, r0
 8005986:	2b01      	cmp	r3, #1
 8005988:	d049      	beq.n	8005a1e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800598e:	4a69      	ldr	r2, [pc, #420]	; (8005b34 <I2C_Slave_STOPF+0x258>)
 8005990:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005996:	4618      	mov	r0, r3
 8005998:	f7fd fe18 	bl	80035cc <HAL_DMA_Abort_IT>
 800599c:	4603      	mov	r3, r0
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d03d      	beq.n	8005a1e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059a8:	687a      	ldr	r2, [r7, #4]
 80059aa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80059ac:	4610      	mov	r0, r2
 80059ae:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80059b0:	e035      	b.n	8005a1e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	b29a      	uxth	r2, r3
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059c4:	b29b      	uxth	r3, r3
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d005      	beq.n	80059d6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ce:	f043 0204 	orr.w	r2, r3, #4
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	685a      	ldr	r2, [r3, #4]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80059e4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059ea:	4618      	mov	r0, r3
 80059ec:	f7fd ff9a 	bl	8003924 <HAL_DMA_GetState>
 80059f0:	4603      	mov	r3, r0
 80059f2:	2b01      	cmp	r3, #1
 80059f4:	d014      	beq.n	8005a20 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059fa:	4a4e      	ldr	r2, [pc, #312]	; (8005b34 <I2C_Slave_STOPF+0x258>)
 80059fc:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a02:	4618      	mov	r0, r3
 8005a04:	f7fd fde2 	bl	80035cc <HAL_DMA_Abort_IT>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d008      	beq.n	8005a20 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a14:	687a      	ldr	r2, [r7, #4]
 8005a16:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005a18:	4610      	mov	r0, r2
 8005a1a:	4798      	blx	r3
 8005a1c:	e000      	b.n	8005a20 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005a1e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a24:	b29b      	uxth	r3, r3
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d03e      	beq.n	8005aa8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	695b      	ldr	r3, [r3, #20]
 8005a30:	f003 0304 	and.w	r3, r3, #4
 8005a34:	2b04      	cmp	r3, #4
 8005a36:	d112      	bne.n	8005a5e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	691a      	ldr	r2, [r3, #16]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a42:	b2d2      	uxtb	r2, r2
 8005a44:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a4a:	1c5a      	adds	r2, r3, #1
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a54:	b29b      	uxth	r3, r3
 8005a56:	3b01      	subs	r3, #1
 8005a58:	b29a      	uxth	r2, r3
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	695b      	ldr	r3, [r3, #20]
 8005a64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a68:	2b40      	cmp	r3, #64	; 0x40
 8005a6a:	d112      	bne.n	8005a92 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	691a      	ldr	r2, [r3, #16]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a76:	b2d2      	uxtb	r2, r2
 8005a78:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a7e:	1c5a      	adds	r2, r3, #1
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a88:	b29b      	uxth	r3, r3
 8005a8a:	3b01      	subs	r3, #1
 8005a8c:	b29a      	uxth	r2, r3
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a96:	b29b      	uxth	r3, r3
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d005      	beq.n	8005aa8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa0:	f043 0204 	orr.w	r2, r3, #4
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d003      	beq.n	8005ab8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	f000 f8b3 	bl	8005c1c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005ab6:	e039      	b.n	8005b2c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005ab8:	7bfb      	ldrb	r3, [r7, #15]
 8005aba:	2b2a      	cmp	r3, #42	; 0x2a
 8005abc:	d109      	bne.n	8005ad2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2228      	movs	r2, #40	; 0x28
 8005ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f7ff f829 	bl	8004b24 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ad8:	b2db      	uxtb	r3, r3
 8005ada:	2b28      	cmp	r3, #40	; 0x28
 8005adc:	d111      	bne.n	8005b02 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	4a15      	ldr	r2, [pc, #84]	; (8005b38 <I2C_Slave_STOPF+0x25c>)
 8005ae2:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2220      	movs	r2, #32
 8005aee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2200      	movs	r2, #0
 8005af6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f7ff f82a 	bl	8004b54 <HAL_I2C_ListenCpltCallback>
}
 8005b00:	e014      	b.n	8005b2c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b06:	2b22      	cmp	r3, #34	; 0x22
 8005b08:	d002      	beq.n	8005b10 <I2C_Slave_STOPF+0x234>
 8005b0a:	7bfb      	ldrb	r3, [r7, #15]
 8005b0c:	2b22      	cmp	r3, #34	; 0x22
 8005b0e:	d10d      	bne.n	8005b2c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2200      	movs	r2, #0
 8005b14:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2220      	movs	r2, #32
 8005b1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2200      	movs	r2, #0
 8005b22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f7fe fffc 	bl	8004b24 <HAL_I2C_SlaveRxCpltCallback>
}
 8005b2c:	bf00      	nop
 8005b2e:	3710      	adds	r7, #16
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bd80      	pop	{r7, pc}
 8005b34:	0800617d 	.word	0x0800617d
 8005b38:	ffff0000 	.word	0xffff0000

08005b3c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b084      	sub	sp, #16
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b4a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b50:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	2b08      	cmp	r3, #8
 8005b56:	d002      	beq.n	8005b5e <I2C_Slave_AF+0x22>
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	2b20      	cmp	r3, #32
 8005b5c:	d129      	bne.n	8005bb2 <I2C_Slave_AF+0x76>
 8005b5e:	7bfb      	ldrb	r3, [r7, #15]
 8005b60:	2b28      	cmp	r3, #40	; 0x28
 8005b62:	d126      	bne.n	8005bb2 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	4a2c      	ldr	r2, [pc, #176]	; (8005c18 <I2C_Slave_AF+0xdc>)
 8005b68:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	685a      	ldr	r2, [r3, #4]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005b78:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005b82:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b92:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2200      	movs	r2, #0
 8005b98:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2220      	movs	r2, #32
 8005b9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f7fe ffd2 	bl	8004b54 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005bb0:	e02e      	b.n	8005c10 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005bb2:	7bfb      	ldrb	r3, [r7, #15]
 8005bb4:	2b21      	cmp	r3, #33	; 0x21
 8005bb6:	d126      	bne.n	8005c06 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	4a17      	ldr	r2, [pc, #92]	; (8005c18 <I2C_Slave_AF+0xdc>)
 8005bbc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2221      	movs	r2, #33	; 0x21
 8005bc2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2220      	movs	r2, #32
 8005bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	685a      	ldr	r2, [r3, #4]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005be2:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005bec:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	681a      	ldr	r2, [r3, #0]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bfc:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f7fe ff86 	bl	8004b10 <HAL_I2C_SlaveTxCpltCallback>
}
 8005c04:	e004      	b.n	8005c10 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005c0e:	615a      	str	r2, [r3, #20]
}
 8005c10:	bf00      	nop
 8005c12:	3710      	adds	r7, #16
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}
 8005c18:	ffff0000 	.word	0xffff0000

08005c1c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b084      	sub	sp, #16
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c2a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c32:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005c34:	7bbb      	ldrb	r3, [r7, #14]
 8005c36:	2b10      	cmp	r3, #16
 8005c38:	d002      	beq.n	8005c40 <I2C_ITError+0x24>
 8005c3a:	7bbb      	ldrb	r3, [r7, #14]
 8005c3c:	2b40      	cmp	r3, #64	; 0x40
 8005c3e:	d10a      	bne.n	8005c56 <I2C_ITError+0x3a>
 8005c40:	7bfb      	ldrb	r3, [r7, #15]
 8005c42:	2b22      	cmp	r3, #34	; 0x22
 8005c44:	d107      	bne.n	8005c56 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	681a      	ldr	r2, [r3, #0]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c54:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005c56:	7bfb      	ldrb	r3, [r7, #15]
 8005c58:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005c5c:	2b28      	cmp	r3, #40	; 0x28
 8005c5e:	d107      	bne.n	8005c70 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2200      	movs	r2, #0
 8005c64:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2228      	movs	r2, #40	; 0x28
 8005c6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005c6e:	e015      	b.n	8005c9c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c7e:	d00a      	beq.n	8005c96 <I2C_ITError+0x7a>
 8005c80:	7bfb      	ldrb	r3, [r7, #15]
 8005c82:	2b60      	cmp	r3, #96	; 0x60
 8005c84:	d007      	beq.n	8005c96 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2220      	movs	r2, #32
 8005c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2200      	movs	r2, #0
 8005c92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ca6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005caa:	d162      	bne.n	8005d72 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	685a      	ldr	r2, [r3, #4]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005cba:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cc0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005cc4:	b2db      	uxtb	r3, r3
 8005cc6:	2b01      	cmp	r3, #1
 8005cc8:	d020      	beq.n	8005d0c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cce:	4a6a      	ldr	r2, [pc, #424]	; (8005e78 <I2C_ITError+0x25c>)
 8005cd0:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f7fd fc78 	bl	80035cc <HAL_DMA_Abort_IT>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	f000 8089 	beq.w	8005df6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	681a      	ldr	r2, [r3, #0]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f022 0201 	bic.w	r2, r2, #1
 8005cf2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2220      	movs	r2, #32
 8005cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d02:	687a      	ldr	r2, [r7, #4]
 8005d04:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005d06:	4610      	mov	r0, r2
 8005d08:	4798      	blx	r3
 8005d0a:	e074      	b.n	8005df6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d10:	4a59      	ldr	r2, [pc, #356]	; (8005e78 <I2C_ITError+0x25c>)
 8005d12:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f7fd fc57 	bl	80035cc <HAL_DMA_Abort_IT>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d068      	beq.n	8005df6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	695b      	ldr	r3, [r3, #20]
 8005d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d2e:	2b40      	cmp	r3, #64	; 0x40
 8005d30:	d10b      	bne.n	8005d4a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	691a      	ldr	r2, [r3, #16]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d3c:	b2d2      	uxtb	r2, r2
 8005d3e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d44:	1c5a      	adds	r2, r3, #1
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	681a      	ldr	r2, [r3, #0]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f022 0201 	bic.w	r2, r2, #1
 8005d58:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2220      	movs	r2, #32
 8005d5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d68:	687a      	ldr	r2, [r7, #4]
 8005d6a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005d6c:	4610      	mov	r0, r2
 8005d6e:	4798      	blx	r3
 8005d70:	e041      	b.n	8005df6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d78:	b2db      	uxtb	r3, r3
 8005d7a:	2b60      	cmp	r3, #96	; 0x60
 8005d7c:	d125      	bne.n	8005dca <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2220      	movs	r2, #32
 8005d82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	695b      	ldr	r3, [r3, #20]
 8005d92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d96:	2b40      	cmp	r3, #64	; 0x40
 8005d98:	d10b      	bne.n	8005db2 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	691a      	ldr	r2, [r3, #16]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da4:	b2d2      	uxtb	r2, r2
 8005da6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dac:	1c5a      	adds	r2, r3, #1
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	681a      	ldr	r2, [r3, #0]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f022 0201 	bic.w	r2, r2, #1
 8005dc0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f7fe feee 	bl	8004ba4 <HAL_I2C_AbortCpltCallback>
 8005dc8:	e015      	b.n	8005df6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	695b      	ldr	r3, [r3, #20]
 8005dd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dd4:	2b40      	cmp	r3, #64	; 0x40
 8005dd6:	d10b      	bne.n	8005df0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	691a      	ldr	r2, [r3, #16]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de2:	b2d2      	uxtb	r2, r2
 8005de4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dea:	1c5a      	adds	r2, r3, #1
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f7fe fecd 	bl	8004b90 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dfa:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	f003 0301 	and.w	r3, r3, #1
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d10e      	bne.n	8005e24 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d109      	bne.n	8005e24 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d104      	bne.n	8005e24 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d007      	beq.n	8005e34 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	685a      	ldr	r2, [r3, #4]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005e32:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e3a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e40:	f003 0304 	and.w	r3, r3, #4
 8005e44:	2b04      	cmp	r3, #4
 8005e46:	d113      	bne.n	8005e70 <I2C_ITError+0x254>
 8005e48:	7bfb      	ldrb	r3, [r7, #15]
 8005e4a:	2b28      	cmp	r3, #40	; 0x28
 8005e4c:	d110      	bne.n	8005e70 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	4a0a      	ldr	r2, [pc, #40]	; (8005e7c <I2C_ITError+0x260>)
 8005e52:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2200      	movs	r2, #0
 8005e58:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2220      	movs	r2, #32
 8005e5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2200      	movs	r2, #0
 8005e66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f7fe fe72 	bl	8004b54 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005e70:	bf00      	nop
 8005e72:	3710      	adds	r7, #16
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}
 8005e78:	0800617d 	.word	0x0800617d
 8005e7c:	ffff0000 	.word	0xffff0000

08005e80 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b088      	sub	sp, #32
 8005e84:	af02      	add	r7, sp, #8
 8005e86:	60f8      	str	r0, [r7, #12]
 8005e88:	4608      	mov	r0, r1
 8005e8a:	4611      	mov	r1, r2
 8005e8c:	461a      	mov	r2, r3
 8005e8e:	4603      	mov	r3, r0
 8005e90:	817b      	strh	r3, [r7, #10]
 8005e92:	460b      	mov	r3, r1
 8005e94:	813b      	strh	r3, [r7, #8]
 8005e96:	4613      	mov	r3, r2
 8005e98:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	681a      	ldr	r2, [r3, #0]
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ea8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eac:	9300      	str	r3, [sp, #0]
 8005eae:	6a3b      	ldr	r3, [r7, #32]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005eb6:	68f8      	ldr	r0, [r7, #12]
 8005eb8:	f000 fa08 	bl	80062cc <I2C_WaitOnFlagUntilTimeout>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d00d      	beq.n	8005ede <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ecc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ed0:	d103      	bne.n	8005eda <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ed8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005eda:	2303      	movs	r3, #3
 8005edc:	e05f      	b.n	8005f9e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005ede:	897b      	ldrh	r3, [r7, #10]
 8005ee0:	b2db      	uxtb	r3, r3
 8005ee2:	461a      	mov	r2, r3
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005eec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef0:	6a3a      	ldr	r2, [r7, #32]
 8005ef2:	492d      	ldr	r1, [pc, #180]	; (8005fa8 <I2C_RequestMemoryWrite+0x128>)
 8005ef4:	68f8      	ldr	r0, [r7, #12]
 8005ef6:	f000 fa40 	bl	800637a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005efa:	4603      	mov	r3, r0
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d001      	beq.n	8005f04 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005f00:	2301      	movs	r3, #1
 8005f02:	e04c      	b.n	8005f9e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f04:	2300      	movs	r3, #0
 8005f06:	617b      	str	r3, [r7, #20]
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	695b      	ldr	r3, [r3, #20]
 8005f0e:	617b      	str	r3, [r7, #20]
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	699b      	ldr	r3, [r3, #24]
 8005f16:	617b      	str	r3, [r7, #20]
 8005f18:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f1c:	6a39      	ldr	r1, [r7, #32]
 8005f1e:	68f8      	ldr	r0, [r7, #12]
 8005f20:	f000 faaa 	bl	8006478 <I2C_WaitOnTXEFlagUntilTimeout>
 8005f24:	4603      	mov	r3, r0
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d00d      	beq.n	8005f46 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f2e:	2b04      	cmp	r3, #4
 8005f30:	d107      	bne.n	8005f42 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	681a      	ldr	r2, [r3, #0]
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f40:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005f42:	2301      	movs	r3, #1
 8005f44:	e02b      	b.n	8005f9e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005f46:	88fb      	ldrh	r3, [r7, #6]
 8005f48:	2b01      	cmp	r3, #1
 8005f4a:	d105      	bne.n	8005f58 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005f4c:	893b      	ldrh	r3, [r7, #8]
 8005f4e:	b2da      	uxtb	r2, r3
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	611a      	str	r2, [r3, #16]
 8005f56:	e021      	b.n	8005f9c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005f58:	893b      	ldrh	r3, [r7, #8]
 8005f5a:	0a1b      	lsrs	r3, r3, #8
 8005f5c:	b29b      	uxth	r3, r3
 8005f5e:	b2da      	uxtb	r2, r3
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f68:	6a39      	ldr	r1, [r7, #32]
 8005f6a:	68f8      	ldr	r0, [r7, #12]
 8005f6c:	f000 fa84 	bl	8006478 <I2C_WaitOnTXEFlagUntilTimeout>
 8005f70:	4603      	mov	r3, r0
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d00d      	beq.n	8005f92 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f7a:	2b04      	cmp	r3, #4
 8005f7c:	d107      	bne.n	8005f8e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	681a      	ldr	r2, [r3, #0]
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f8c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005f8e:	2301      	movs	r3, #1
 8005f90:	e005      	b.n	8005f9e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005f92:	893b      	ldrh	r3, [r7, #8]
 8005f94:	b2da      	uxtb	r2, r3
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005f9c:	2300      	movs	r3, #0
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3718      	adds	r7, #24
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}
 8005fa6:	bf00      	nop
 8005fa8:	00010002 	.word	0x00010002

08005fac <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b088      	sub	sp, #32
 8005fb0:	af02      	add	r7, sp, #8
 8005fb2:	60f8      	str	r0, [r7, #12]
 8005fb4:	4608      	mov	r0, r1
 8005fb6:	4611      	mov	r1, r2
 8005fb8:	461a      	mov	r2, r3
 8005fba:	4603      	mov	r3, r0
 8005fbc:	817b      	strh	r3, [r7, #10]
 8005fbe:	460b      	mov	r3, r1
 8005fc0:	813b      	strh	r3, [r7, #8]
 8005fc2:	4613      	mov	r3, r2
 8005fc4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	681a      	ldr	r2, [r3, #0]
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005fd4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	681a      	ldr	r2, [r3, #0]
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005fe4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe8:	9300      	str	r3, [sp, #0]
 8005fea:	6a3b      	ldr	r3, [r7, #32]
 8005fec:	2200      	movs	r2, #0
 8005fee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005ff2:	68f8      	ldr	r0, [r7, #12]
 8005ff4:	f000 f96a 	bl	80062cc <I2C_WaitOnFlagUntilTimeout>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d00d      	beq.n	800601a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006008:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800600c:	d103      	bne.n	8006016 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006014:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006016:	2303      	movs	r3, #3
 8006018:	e0aa      	b.n	8006170 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800601a:	897b      	ldrh	r3, [r7, #10]
 800601c:	b2db      	uxtb	r3, r3
 800601e:	461a      	mov	r2, r3
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006028:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800602a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800602c:	6a3a      	ldr	r2, [r7, #32]
 800602e:	4952      	ldr	r1, [pc, #328]	; (8006178 <I2C_RequestMemoryRead+0x1cc>)
 8006030:	68f8      	ldr	r0, [r7, #12]
 8006032:	f000 f9a2 	bl	800637a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006036:	4603      	mov	r3, r0
 8006038:	2b00      	cmp	r3, #0
 800603a:	d001      	beq.n	8006040 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800603c:	2301      	movs	r3, #1
 800603e:	e097      	b.n	8006170 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006040:	2300      	movs	r3, #0
 8006042:	617b      	str	r3, [r7, #20]
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	695b      	ldr	r3, [r3, #20]
 800604a:	617b      	str	r3, [r7, #20]
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	699b      	ldr	r3, [r3, #24]
 8006052:	617b      	str	r3, [r7, #20]
 8006054:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006056:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006058:	6a39      	ldr	r1, [r7, #32]
 800605a:	68f8      	ldr	r0, [r7, #12]
 800605c:	f000 fa0c 	bl	8006478 <I2C_WaitOnTXEFlagUntilTimeout>
 8006060:	4603      	mov	r3, r0
 8006062:	2b00      	cmp	r3, #0
 8006064:	d00d      	beq.n	8006082 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800606a:	2b04      	cmp	r3, #4
 800606c:	d107      	bne.n	800607e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	681a      	ldr	r2, [r3, #0]
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800607c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800607e:	2301      	movs	r3, #1
 8006080:	e076      	b.n	8006170 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006082:	88fb      	ldrh	r3, [r7, #6]
 8006084:	2b01      	cmp	r3, #1
 8006086:	d105      	bne.n	8006094 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006088:	893b      	ldrh	r3, [r7, #8]
 800608a:	b2da      	uxtb	r2, r3
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	611a      	str	r2, [r3, #16]
 8006092:	e021      	b.n	80060d8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006094:	893b      	ldrh	r3, [r7, #8]
 8006096:	0a1b      	lsrs	r3, r3, #8
 8006098:	b29b      	uxth	r3, r3
 800609a:	b2da      	uxtb	r2, r3
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80060a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060a4:	6a39      	ldr	r1, [r7, #32]
 80060a6:	68f8      	ldr	r0, [r7, #12]
 80060a8:	f000 f9e6 	bl	8006478 <I2C_WaitOnTXEFlagUntilTimeout>
 80060ac:	4603      	mov	r3, r0
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d00d      	beq.n	80060ce <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060b6:	2b04      	cmp	r3, #4
 80060b8:	d107      	bne.n	80060ca <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	681a      	ldr	r2, [r3, #0]
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060c8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80060ca:	2301      	movs	r3, #1
 80060cc:	e050      	b.n	8006170 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80060ce:	893b      	ldrh	r3, [r7, #8]
 80060d0:	b2da      	uxtb	r2, r3
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80060d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060da:	6a39      	ldr	r1, [r7, #32]
 80060dc:	68f8      	ldr	r0, [r7, #12]
 80060de:	f000 f9cb 	bl	8006478 <I2C_WaitOnTXEFlagUntilTimeout>
 80060e2:	4603      	mov	r3, r0
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d00d      	beq.n	8006104 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ec:	2b04      	cmp	r3, #4
 80060ee:	d107      	bne.n	8006100 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060fe:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006100:	2301      	movs	r3, #1
 8006102:	e035      	b.n	8006170 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	681a      	ldr	r2, [r3, #0]
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006112:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006116:	9300      	str	r3, [sp, #0]
 8006118:	6a3b      	ldr	r3, [r7, #32]
 800611a:	2200      	movs	r2, #0
 800611c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006120:	68f8      	ldr	r0, [r7, #12]
 8006122:	f000 f8d3 	bl	80062cc <I2C_WaitOnFlagUntilTimeout>
 8006126:	4603      	mov	r3, r0
 8006128:	2b00      	cmp	r3, #0
 800612a:	d00d      	beq.n	8006148 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006136:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800613a:	d103      	bne.n	8006144 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006142:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006144:	2303      	movs	r3, #3
 8006146:	e013      	b.n	8006170 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006148:	897b      	ldrh	r3, [r7, #10]
 800614a:	b2db      	uxtb	r3, r3
 800614c:	f043 0301 	orr.w	r3, r3, #1
 8006150:	b2da      	uxtb	r2, r3
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800615a:	6a3a      	ldr	r2, [r7, #32]
 800615c:	4906      	ldr	r1, [pc, #24]	; (8006178 <I2C_RequestMemoryRead+0x1cc>)
 800615e:	68f8      	ldr	r0, [r7, #12]
 8006160:	f000 f90b 	bl	800637a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006164:	4603      	mov	r3, r0
 8006166:	2b00      	cmp	r3, #0
 8006168:	d001      	beq.n	800616e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800616a:	2301      	movs	r3, #1
 800616c:	e000      	b.n	8006170 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800616e:	2300      	movs	r3, #0
}
 8006170:	4618      	mov	r0, r3
 8006172:	3718      	adds	r7, #24
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}
 8006178:	00010002 	.word	0x00010002

0800617c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b086      	sub	sp, #24
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006184:	2300      	movs	r3, #0
 8006186:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800618c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006194:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006196:	4b4b      	ldr	r3, [pc, #300]	; (80062c4 <I2C_DMAAbort+0x148>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	08db      	lsrs	r3, r3, #3
 800619c:	4a4a      	ldr	r2, [pc, #296]	; (80062c8 <I2C_DMAAbort+0x14c>)
 800619e:	fba2 2303 	umull	r2, r3, r2, r3
 80061a2:	0a1a      	lsrs	r2, r3, #8
 80061a4:	4613      	mov	r3, r2
 80061a6:	009b      	lsls	r3, r3, #2
 80061a8:	4413      	add	r3, r2
 80061aa:	00da      	lsls	r2, r3, #3
 80061ac:	1ad3      	subs	r3, r2, r3
 80061ae:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d106      	bne.n	80061c4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ba:	f043 0220 	orr.w	r2, r3, #32
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80061c2:	e00a      	b.n	80061da <I2C_DMAAbort+0x5e>
    }
    count--;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	3b01      	subs	r3, #1
 80061c8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80061d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061d8:	d0ea      	beq.n	80061b0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d003      	beq.n	80061ea <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061e6:	2200      	movs	r2, #0
 80061e8:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d003      	beq.n	80061fa <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061f6:	2200      	movs	r2, #0
 80061f8:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	681a      	ldr	r2, [r3, #0]
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006208:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	2200      	movs	r2, #0
 800620e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8006210:	697b      	ldr	r3, [r7, #20]
 8006212:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006214:	2b00      	cmp	r3, #0
 8006216:	d003      	beq.n	8006220 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800621c:	2200      	movs	r2, #0
 800621e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006224:	2b00      	cmp	r3, #0
 8006226:	d003      	beq.n	8006230 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800622c:	2200      	movs	r2, #0
 800622e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	681a      	ldr	r2, [r3, #0]
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f022 0201 	bic.w	r2, r2, #1
 800623e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006246:	b2db      	uxtb	r3, r3
 8006248:	2b60      	cmp	r3, #96	; 0x60
 800624a:	d10e      	bne.n	800626a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	2220      	movs	r2, #32
 8006250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	2200      	movs	r2, #0
 8006258:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	2200      	movs	r2, #0
 8006260:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006262:	6978      	ldr	r0, [r7, #20]
 8006264:	f7fe fc9e 	bl	8004ba4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006268:	e027      	b.n	80062ba <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800626a:	7cfb      	ldrb	r3, [r7, #19]
 800626c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006270:	2b28      	cmp	r3, #40	; 0x28
 8006272:	d117      	bne.n	80062a4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	681a      	ldr	r2, [r3, #0]
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f042 0201 	orr.w	r2, r2, #1
 8006282:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	681a      	ldr	r2, [r3, #0]
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006292:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	2200      	movs	r2, #0
 8006298:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	2228      	movs	r2, #40	; 0x28
 800629e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80062a2:	e007      	b.n	80062b4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	2220      	movs	r2, #32
 80062a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	2200      	movs	r2, #0
 80062b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80062b4:	6978      	ldr	r0, [r7, #20]
 80062b6:	f7fe fc6b 	bl	8004b90 <HAL_I2C_ErrorCallback>
}
 80062ba:	bf00      	nop
 80062bc:	3718      	adds	r7, #24
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}
 80062c2:	bf00      	nop
 80062c4:	20000000 	.word	0x20000000
 80062c8:	14f8b589 	.word	0x14f8b589

080062cc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b084      	sub	sp, #16
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	60f8      	str	r0, [r7, #12]
 80062d4:	60b9      	str	r1, [r7, #8]
 80062d6:	603b      	str	r3, [r7, #0]
 80062d8:	4613      	mov	r3, r2
 80062da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80062dc:	e025      	b.n	800632a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062e4:	d021      	beq.n	800632a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062e6:	f7fc f9b7 	bl	8002658 <HAL_GetTick>
 80062ea:	4602      	mov	r2, r0
 80062ec:	69bb      	ldr	r3, [r7, #24]
 80062ee:	1ad3      	subs	r3, r2, r3
 80062f0:	683a      	ldr	r2, [r7, #0]
 80062f2:	429a      	cmp	r2, r3
 80062f4:	d302      	bcc.n	80062fc <I2C_WaitOnFlagUntilTimeout+0x30>
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d116      	bne.n	800632a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	2200      	movs	r2, #0
 8006300:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2220      	movs	r2, #32
 8006306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2200      	movs	r2, #0
 800630e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006316:	f043 0220 	orr.w	r2, r3, #32
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2200      	movs	r2, #0
 8006322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006326:	2301      	movs	r3, #1
 8006328:	e023      	b.n	8006372 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	0c1b      	lsrs	r3, r3, #16
 800632e:	b2db      	uxtb	r3, r3
 8006330:	2b01      	cmp	r3, #1
 8006332:	d10d      	bne.n	8006350 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	695b      	ldr	r3, [r3, #20]
 800633a:	43da      	mvns	r2, r3
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	4013      	ands	r3, r2
 8006340:	b29b      	uxth	r3, r3
 8006342:	2b00      	cmp	r3, #0
 8006344:	bf0c      	ite	eq
 8006346:	2301      	moveq	r3, #1
 8006348:	2300      	movne	r3, #0
 800634a:	b2db      	uxtb	r3, r3
 800634c:	461a      	mov	r2, r3
 800634e:	e00c      	b.n	800636a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	699b      	ldr	r3, [r3, #24]
 8006356:	43da      	mvns	r2, r3
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	4013      	ands	r3, r2
 800635c:	b29b      	uxth	r3, r3
 800635e:	2b00      	cmp	r3, #0
 8006360:	bf0c      	ite	eq
 8006362:	2301      	moveq	r3, #1
 8006364:	2300      	movne	r3, #0
 8006366:	b2db      	uxtb	r3, r3
 8006368:	461a      	mov	r2, r3
 800636a:	79fb      	ldrb	r3, [r7, #7]
 800636c:	429a      	cmp	r2, r3
 800636e:	d0b6      	beq.n	80062de <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006370:	2300      	movs	r3, #0
}
 8006372:	4618      	mov	r0, r3
 8006374:	3710      	adds	r7, #16
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}

0800637a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800637a:	b580      	push	{r7, lr}
 800637c:	b084      	sub	sp, #16
 800637e:	af00      	add	r7, sp, #0
 8006380:	60f8      	str	r0, [r7, #12]
 8006382:	60b9      	str	r1, [r7, #8]
 8006384:	607a      	str	r2, [r7, #4]
 8006386:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006388:	e051      	b.n	800642e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	695b      	ldr	r3, [r3, #20]
 8006390:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006394:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006398:	d123      	bne.n	80063e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	681a      	ldr	r2, [r3, #0]
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063a8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80063b2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2200      	movs	r2, #0
 80063b8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2220      	movs	r2, #32
 80063be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	2200      	movs	r2, #0
 80063c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ce:	f043 0204 	orr.w	r2, r3, #4
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2200      	movs	r2, #0
 80063da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80063de:	2301      	movs	r3, #1
 80063e0:	e046      	b.n	8006470 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063e8:	d021      	beq.n	800642e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063ea:	f7fc f935 	bl	8002658 <HAL_GetTick>
 80063ee:	4602      	mov	r2, r0
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	1ad3      	subs	r3, r2, r3
 80063f4:	687a      	ldr	r2, [r7, #4]
 80063f6:	429a      	cmp	r2, r3
 80063f8:	d302      	bcc.n	8006400 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d116      	bne.n	800642e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	2200      	movs	r2, #0
 8006404:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	2220      	movs	r2, #32
 800640a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	2200      	movs	r2, #0
 8006412:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800641a:	f043 0220 	orr.w	r2, r3, #32
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2200      	movs	r2, #0
 8006426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800642a:	2301      	movs	r3, #1
 800642c:	e020      	b.n	8006470 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	0c1b      	lsrs	r3, r3, #16
 8006432:	b2db      	uxtb	r3, r3
 8006434:	2b01      	cmp	r3, #1
 8006436:	d10c      	bne.n	8006452 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	695b      	ldr	r3, [r3, #20]
 800643e:	43da      	mvns	r2, r3
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	4013      	ands	r3, r2
 8006444:	b29b      	uxth	r3, r3
 8006446:	2b00      	cmp	r3, #0
 8006448:	bf14      	ite	ne
 800644a:	2301      	movne	r3, #1
 800644c:	2300      	moveq	r3, #0
 800644e:	b2db      	uxtb	r3, r3
 8006450:	e00b      	b.n	800646a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	699b      	ldr	r3, [r3, #24]
 8006458:	43da      	mvns	r2, r3
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	4013      	ands	r3, r2
 800645e:	b29b      	uxth	r3, r3
 8006460:	2b00      	cmp	r3, #0
 8006462:	bf14      	ite	ne
 8006464:	2301      	movne	r3, #1
 8006466:	2300      	moveq	r3, #0
 8006468:	b2db      	uxtb	r3, r3
 800646a:	2b00      	cmp	r3, #0
 800646c:	d18d      	bne.n	800638a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800646e:	2300      	movs	r3, #0
}
 8006470:	4618      	mov	r0, r3
 8006472:	3710      	adds	r7, #16
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}

08006478 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b084      	sub	sp, #16
 800647c:	af00      	add	r7, sp, #0
 800647e:	60f8      	str	r0, [r7, #12]
 8006480:	60b9      	str	r1, [r7, #8]
 8006482:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006484:	e02d      	b.n	80064e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006486:	68f8      	ldr	r0, [r7, #12]
 8006488:	f000 f900 	bl	800668c <I2C_IsAcknowledgeFailed>
 800648c:	4603      	mov	r3, r0
 800648e:	2b00      	cmp	r3, #0
 8006490:	d001      	beq.n	8006496 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006492:	2301      	movs	r3, #1
 8006494:	e02d      	b.n	80064f2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800649c:	d021      	beq.n	80064e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800649e:	f7fc f8db 	bl	8002658 <HAL_GetTick>
 80064a2:	4602      	mov	r2, r0
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	1ad3      	subs	r3, r2, r3
 80064a8:	68ba      	ldr	r2, [r7, #8]
 80064aa:	429a      	cmp	r2, r3
 80064ac:	d302      	bcc.n	80064b4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d116      	bne.n	80064e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	2200      	movs	r2, #0
 80064b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2220      	movs	r2, #32
 80064be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2200      	movs	r2, #0
 80064c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ce:	f043 0220 	orr.w	r2, r3, #32
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2200      	movs	r2, #0
 80064da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80064de:	2301      	movs	r3, #1
 80064e0:	e007      	b.n	80064f2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	695b      	ldr	r3, [r3, #20]
 80064e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064ec:	2b80      	cmp	r3, #128	; 0x80
 80064ee:	d1ca      	bne.n	8006486 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80064f0:	2300      	movs	r3, #0
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	3710      	adds	r7, #16
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}

080064fa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80064fa:	b580      	push	{r7, lr}
 80064fc:	b084      	sub	sp, #16
 80064fe:	af00      	add	r7, sp, #0
 8006500:	60f8      	str	r0, [r7, #12]
 8006502:	60b9      	str	r1, [r7, #8]
 8006504:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006506:	e02d      	b.n	8006564 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006508:	68f8      	ldr	r0, [r7, #12]
 800650a:	f000 f8bf 	bl	800668c <I2C_IsAcknowledgeFailed>
 800650e:	4603      	mov	r3, r0
 8006510:	2b00      	cmp	r3, #0
 8006512:	d001      	beq.n	8006518 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006514:	2301      	movs	r3, #1
 8006516:	e02d      	b.n	8006574 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800651e:	d021      	beq.n	8006564 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006520:	f7fc f89a 	bl	8002658 <HAL_GetTick>
 8006524:	4602      	mov	r2, r0
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	1ad3      	subs	r3, r2, r3
 800652a:	68ba      	ldr	r2, [r7, #8]
 800652c:	429a      	cmp	r2, r3
 800652e:	d302      	bcc.n	8006536 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d116      	bne.n	8006564 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2200      	movs	r2, #0
 800653a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2220      	movs	r2, #32
 8006540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2200      	movs	r2, #0
 8006548:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006550:	f043 0220 	orr.w	r2, r3, #32
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	2200      	movs	r2, #0
 800655c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006560:	2301      	movs	r3, #1
 8006562:	e007      	b.n	8006574 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	695b      	ldr	r3, [r3, #20]
 800656a:	f003 0304 	and.w	r3, r3, #4
 800656e:	2b04      	cmp	r3, #4
 8006570:	d1ca      	bne.n	8006508 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006572:	2300      	movs	r3, #0
}
 8006574:	4618      	mov	r0, r3
 8006576:	3710      	adds	r7, #16
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}

0800657c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800657c:	b480      	push	{r7}
 800657e:	b085      	sub	sp, #20
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006584:	2300      	movs	r3, #0
 8006586:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006588:	4b13      	ldr	r3, [pc, #76]	; (80065d8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	08db      	lsrs	r3, r3, #3
 800658e:	4a13      	ldr	r2, [pc, #76]	; (80065dc <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006590:	fba2 2303 	umull	r2, r3, r2, r3
 8006594:	0a1a      	lsrs	r2, r3, #8
 8006596:	4613      	mov	r3, r2
 8006598:	009b      	lsls	r3, r3, #2
 800659a:	4413      	add	r3, r2
 800659c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	3b01      	subs	r3, #1
 80065a2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d107      	bne.n	80065ba <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ae:	f043 0220 	orr.w	r2, r3, #32
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80065b6:	2301      	movs	r3, #1
 80065b8:	e008      	b.n	80065cc <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80065c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065c8:	d0e9      	beq.n	800659e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80065ca:	2300      	movs	r3, #0
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	3714      	adds	r7, #20
 80065d0:	46bd      	mov	sp, r7
 80065d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d6:	4770      	bx	lr
 80065d8:	20000000 	.word	0x20000000
 80065dc:	14f8b589 	.word	0x14f8b589

080065e0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b084      	sub	sp, #16
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	60f8      	str	r0, [r7, #12]
 80065e8:	60b9      	str	r1, [r7, #8]
 80065ea:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80065ec:	e042      	b.n	8006674 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	695b      	ldr	r3, [r3, #20]
 80065f4:	f003 0310 	and.w	r3, r3, #16
 80065f8:	2b10      	cmp	r3, #16
 80065fa:	d119      	bne.n	8006630 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f06f 0210 	mvn.w	r2, #16
 8006604:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2200      	movs	r2, #0
 800660a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	2220      	movs	r2, #32
 8006610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	2200      	movs	r2, #0
 8006618:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2200      	movs	r2, #0
 8006628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800662c:	2301      	movs	r3, #1
 800662e:	e029      	b.n	8006684 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006630:	f7fc f812 	bl	8002658 <HAL_GetTick>
 8006634:	4602      	mov	r2, r0
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	1ad3      	subs	r3, r2, r3
 800663a:	68ba      	ldr	r2, [r7, #8]
 800663c:	429a      	cmp	r2, r3
 800663e:	d302      	bcc.n	8006646 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d116      	bne.n	8006674 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	2200      	movs	r2, #0
 800664a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	2220      	movs	r2, #32
 8006650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2200      	movs	r2, #0
 8006658:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006660:	f043 0220 	orr.w	r2, r3, #32
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	2200      	movs	r2, #0
 800666c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006670:	2301      	movs	r3, #1
 8006672:	e007      	b.n	8006684 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	695b      	ldr	r3, [r3, #20]
 800667a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800667e:	2b40      	cmp	r3, #64	; 0x40
 8006680:	d1b5      	bne.n	80065ee <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006682:	2300      	movs	r3, #0
}
 8006684:	4618      	mov	r0, r3
 8006686:	3710      	adds	r7, #16
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}

0800668c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800668c:	b480      	push	{r7}
 800668e:	b083      	sub	sp, #12
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	695b      	ldr	r3, [r3, #20]
 800669a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800669e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066a2:	d11b      	bne.n	80066dc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80066ac:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2200      	movs	r2, #0
 80066b2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2220      	movs	r2, #32
 80066b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2200      	movs	r2, #0
 80066c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066c8:	f043 0204 	orr.w	r2, r3, #4
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2200      	movs	r2, #0
 80066d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80066d8:	2301      	movs	r3, #1
 80066da:	e000      	b.n	80066de <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80066dc:	2300      	movs	r3, #0
}
 80066de:	4618      	mov	r0, r3
 80066e0:	370c      	adds	r7, #12
 80066e2:	46bd      	mov	sp, r7
 80066e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e8:	4770      	bx	lr

080066ea <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80066ea:	b480      	push	{r7}
 80066ec:	b083      	sub	sp, #12
 80066ee:	af00      	add	r7, sp, #0
 80066f0:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066f6:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80066fa:	d103      	bne.n	8006704 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2201      	movs	r2, #1
 8006700:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006702:	e007      	b.n	8006714 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006708:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800670c:	d102      	bne.n	8006714 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2208      	movs	r2, #8
 8006712:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006714:	bf00      	nop
 8006716:	370c      	adds	r7, #12
 8006718:	46bd      	mov	sp, r7
 800671a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671e:	4770      	bx	lr

08006720 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b086      	sub	sp, #24
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d101      	bne.n	8006732 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800672e:	2301      	movs	r3, #1
 8006730:	e267      	b.n	8006c02 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f003 0301 	and.w	r3, r3, #1
 800673a:	2b00      	cmp	r3, #0
 800673c:	d075      	beq.n	800682a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800673e:	4b88      	ldr	r3, [pc, #544]	; (8006960 <HAL_RCC_OscConfig+0x240>)
 8006740:	689b      	ldr	r3, [r3, #8]
 8006742:	f003 030c 	and.w	r3, r3, #12
 8006746:	2b04      	cmp	r3, #4
 8006748:	d00c      	beq.n	8006764 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800674a:	4b85      	ldr	r3, [pc, #532]	; (8006960 <HAL_RCC_OscConfig+0x240>)
 800674c:	689b      	ldr	r3, [r3, #8]
 800674e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006752:	2b08      	cmp	r3, #8
 8006754:	d112      	bne.n	800677c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006756:	4b82      	ldr	r3, [pc, #520]	; (8006960 <HAL_RCC_OscConfig+0x240>)
 8006758:	685b      	ldr	r3, [r3, #4]
 800675a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800675e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006762:	d10b      	bne.n	800677c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006764:	4b7e      	ldr	r3, [pc, #504]	; (8006960 <HAL_RCC_OscConfig+0x240>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800676c:	2b00      	cmp	r3, #0
 800676e:	d05b      	beq.n	8006828 <HAL_RCC_OscConfig+0x108>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d157      	bne.n	8006828 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006778:	2301      	movs	r3, #1
 800677a:	e242      	b.n	8006c02 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006784:	d106      	bne.n	8006794 <HAL_RCC_OscConfig+0x74>
 8006786:	4b76      	ldr	r3, [pc, #472]	; (8006960 <HAL_RCC_OscConfig+0x240>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4a75      	ldr	r2, [pc, #468]	; (8006960 <HAL_RCC_OscConfig+0x240>)
 800678c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006790:	6013      	str	r3, [r2, #0]
 8006792:	e01d      	b.n	80067d0 <HAL_RCC_OscConfig+0xb0>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800679c:	d10c      	bne.n	80067b8 <HAL_RCC_OscConfig+0x98>
 800679e:	4b70      	ldr	r3, [pc, #448]	; (8006960 <HAL_RCC_OscConfig+0x240>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4a6f      	ldr	r2, [pc, #444]	; (8006960 <HAL_RCC_OscConfig+0x240>)
 80067a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80067a8:	6013      	str	r3, [r2, #0]
 80067aa:	4b6d      	ldr	r3, [pc, #436]	; (8006960 <HAL_RCC_OscConfig+0x240>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a6c      	ldr	r2, [pc, #432]	; (8006960 <HAL_RCC_OscConfig+0x240>)
 80067b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067b4:	6013      	str	r3, [r2, #0]
 80067b6:	e00b      	b.n	80067d0 <HAL_RCC_OscConfig+0xb0>
 80067b8:	4b69      	ldr	r3, [pc, #420]	; (8006960 <HAL_RCC_OscConfig+0x240>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a68      	ldr	r2, [pc, #416]	; (8006960 <HAL_RCC_OscConfig+0x240>)
 80067be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067c2:	6013      	str	r3, [r2, #0]
 80067c4:	4b66      	ldr	r3, [pc, #408]	; (8006960 <HAL_RCC_OscConfig+0x240>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4a65      	ldr	r2, [pc, #404]	; (8006960 <HAL_RCC_OscConfig+0x240>)
 80067ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80067ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d013      	beq.n	8006800 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067d8:	f7fb ff3e 	bl	8002658 <HAL_GetTick>
 80067dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80067de:	e008      	b.n	80067f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80067e0:	f7fb ff3a 	bl	8002658 <HAL_GetTick>
 80067e4:	4602      	mov	r2, r0
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	1ad3      	subs	r3, r2, r3
 80067ea:	2b64      	cmp	r3, #100	; 0x64
 80067ec:	d901      	bls.n	80067f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80067ee:	2303      	movs	r3, #3
 80067f0:	e207      	b.n	8006c02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80067f2:	4b5b      	ldr	r3, [pc, #364]	; (8006960 <HAL_RCC_OscConfig+0x240>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d0f0      	beq.n	80067e0 <HAL_RCC_OscConfig+0xc0>
 80067fe:	e014      	b.n	800682a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006800:	f7fb ff2a 	bl	8002658 <HAL_GetTick>
 8006804:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006806:	e008      	b.n	800681a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006808:	f7fb ff26 	bl	8002658 <HAL_GetTick>
 800680c:	4602      	mov	r2, r0
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	1ad3      	subs	r3, r2, r3
 8006812:	2b64      	cmp	r3, #100	; 0x64
 8006814:	d901      	bls.n	800681a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006816:	2303      	movs	r3, #3
 8006818:	e1f3      	b.n	8006c02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800681a:	4b51      	ldr	r3, [pc, #324]	; (8006960 <HAL_RCC_OscConfig+0x240>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006822:	2b00      	cmp	r3, #0
 8006824:	d1f0      	bne.n	8006808 <HAL_RCC_OscConfig+0xe8>
 8006826:	e000      	b.n	800682a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006828:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f003 0302 	and.w	r3, r3, #2
 8006832:	2b00      	cmp	r3, #0
 8006834:	d063      	beq.n	80068fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006836:	4b4a      	ldr	r3, [pc, #296]	; (8006960 <HAL_RCC_OscConfig+0x240>)
 8006838:	689b      	ldr	r3, [r3, #8]
 800683a:	f003 030c 	and.w	r3, r3, #12
 800683e:	2b00      	cmp	r3, #0
 8006840:	d00b      	beq.n	800685a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006842:	4b47      	ldr	r3, [pc, #284]	; (8006960 <HAL_RCC_OscConfig+0x240>)
 8006844:	689b      	ldr	r3, [r3, #8]
 8006846:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800684a:	2b08      	cmp	r3, #8
 800684c:	d11c      	bne.n	8006888 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800684e:	4b44      	ldr	r3, [pc, #272]	; (8006960 <HAL_RCC_OscConfig+0x240>)
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006856:	2b00      	cmp	r3, #0
 8006858:	d116      	bne.n	8006888 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800685a:	4b41      	ldr	r3, [pc, #260]	; (8006960 <HAL_RCC_OscConfig+0x240>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f003 0302 	and.w	r3, r3, #2
 8006862:	2b00      	cmp	r3, #0
 8006864:	d005      	beq.n	8006872 <HAL_RCC_OscConfig+0x152>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	68db      	ldr	r3, [r3, #12]
 800686a:	2b01      	cmp	r3, #1
 800686c:	d001      	beq.n	8006872 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800686e:	2301      	movs	r3, #1
 8006870:	e1c7      	b.n	8006c02 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006872:	4b3b      	ldr	r3, [pc, #236]	; (8006960 <HAL_RCC_OscConfig+0x240>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	691b      	ldr	r3, [r3, #16]
 800687e:	00db      	lsls	r3, r3, #3
 8006880:	4937      	ldr	r1, [pc, #220]	; (8006960 <HAL_RCC_OscConfig+0x240>)
 8006882:	4313      	orrs	r3, r2
 8006884:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006886:	e03a      	b.n	80068fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	68db      	ldr	r3, [r3, #12]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d020      	beq.n	80068d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006890:	4b34      	ldr	r3, [pc, #208]	; (8006964 <HAL_RCC_OscConfig+0x244>)
 8006892:	2201      	movs	r2, #1
 8006894:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006896:	f7fb fedf 	bl	8002658 <HAL_GetTick>
 800689a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800689c:	e008      	b.n	80068b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800689e:	f7fb fedb 	bl	8002658 <HAL_GetTick>
 80068a2:	4602      	mov	r2, r0
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	1ad3      	subs	r3, r2, r3
 80068a8:	2b02      	cmp	r3, #2
 80068aa:	d901      	bls.n	80068b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80068ac:	2303      	movs	r3, #3
 80068ae:	e1a8      	b.n	8006c02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068b0:	4b2b      	ldr	r3, [pc, #172]	; (8006960 <HAL_RCC_OscConfig+0x240>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f003 0302 	and.w	r3, r3, #2
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d0f0      	beq.n	800689e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068bc:	4b28      	ldr	r3, [pc, #160]	; (8006960 <HAL_RCC_OscConfig+0x240>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	691b      	ldr	r3, [r3, #16]
 80068c8:	00db      	lsls	r3, r3, #3
 80068ca:	4925      	ldr	r1, [pc, #148]	; (8006960 <HAL_RCC_OscConfig+0x240>)
 80068cc:	4313      	orrs	r3, r2
 80068ce:	600b      	str	r3, [r1, #0]
 80068d0:	e015      	b.n	80068fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80068d2:	4b24      	ldr	r3, [pc, #144]	; (8006964 <HAL_RCC_OscConfig+0x244>)
 80068d4:	2200      	movs	r2, #0
 80068d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068d8:	f7fb febe 	bl	8002658 <HAL_GetTick>
 80068dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80068de:	e008      	b.n	80068f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80068e0:	f7fb feba 	bl	8002658 <HAL_GetTick>
 80068e4:	4602      	mov	r2, r0
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	1ad3      	subs	r3, r2, r3
 80068ea:	2b02      	cmp	r3, #2
 80068ec:	d901      	bls.n	80068f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80068ee:	2303      	movs	r3, #3
 80068f0:	e187      	b.n	8006c02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80068f2:	4b1b      	ldr	r3, [pc, #108]	; (8006960 <HAL_RCC_OscConfig+0x240>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f003 0302 	and.w	r3, r3, #2
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d1f0      	bne.n	80068e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f003 0308 	and.w	r3, r3, #8
 8006906:	2b00      	cmp	r3, #0
 8006908:	d036      	beq.n	8006978 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	695b      	ldr	r3, [r3, #20]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d016      	beq.n	8006940 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006912:	4b15      	ldr	r3, [pc, #84]	; (8006968 <HAL_RCC_OscConfig+0x248>)
 8006914:	2201      	movs	r2, #1
 8006916:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006918:	f7fb fe9e 	bl	8002658 <HAL_GetTick>
 800691c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800691e:	e008      	b.n	8006932 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006920:	f7fb fe9a 	bl	8002658 <HAL_GetTick>
 8006924:	4602      	mov	r2, r0
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	1ad3      	subs	r3, r2, r3
 800692a:	2b02      	cmp	r3, #2
 800692c:	d901      	bls.n	8006932 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800692e:	2303      	movs	r3, #3
 8006930:	e167      	b.n	8006c02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006932:	4b0b      	ldr	r3, [pc, #44]	; (8006960 <HAL_RCC_OscConfig+0x240>)
 8006934:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006936:	f003 0302 	and.w	r3, r3, #2
 800693a:	2b00      	cmp	r3, #0
 800693c:	d0f0      	beq.n	8006920 <HAL_RCC_OscConfig+0x200>
 800693e:	e01b      	b.n	8006978 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006940:	4b09      	ldr	r3, [pc, #36]	; (8006968 <HAL_RCC_OscConfig+0x248>)
 8006942:	2200      	movs	r2, #0
 8006944:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006946:	f7fb fe87 	bl	8002658 <HAL_GetTick>
 800694a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800694c:	e00e      	b.n	800696c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800694e:	f7fb fe83 	bl	8002658 <HAL_GetTick>
 8006952:	4602      	mov	r2, r0
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	1ad3      	subs	r3, r2, r3
 8006958:	2b02      	cmp	r3, #2
 800695a:	d907      	bls.n	800696c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800695c:	2303      	movs	r3, #3
 800695e:	e150      	b.n	8006c02 <HAL_RCC_OscConfig+0x4e2>
 8006960:	40023800 	.word	0x40023800
 8006964:	42470000 	.word	0x42470000
 8006968:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800696c:	4b88      	ldr	r3, [pc, #544]	; (8006b90 <HAL_RCC_OscConfig+0x470>)
 800696e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006970:	f003 0302 	and.w	r3, r3, #2
 8006974:	2b00      	cmp	r3, #0
 8006976:	d1ea      	bne.n	800694e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f003 0304 	and.w	r3, r3, #4
 8006980:	2b00      	cmp	r3, #0
 8006982:	f000 8097 	beq.w	8006ab4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006986:	2300      	movs	r3, #0
 8006988:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800698a:	4b81      	ldr	r3, [pc, #516]	; (8006b90 <HAL_RCC_OscConfig+0x470>)
 800698c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800698e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006992:	2b00      	cmp	r3, #0
 8006994:	d10f      	bne.n	80069b6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006996:	2300      	movs	r3, #0
 8006998:	60bb      	str	r3, [r7, #8]
 800699a:	4b7d      	ldr	r3, [pc, #500]	; (8006b90 <HAL_RCC_OscConfig+0x470>)
 800699c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800699e:	4a7c      	ldr	r2, [pc, #496]	; (8006b90 <HAL_RCC_OscConfig+0x470>)
 80069a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069a4:	6413      	str	r3, [r2, #64]	; 0x40
 80069a6:	4b7a      	ldr	r3, [pc, #488]	; (8006b90 <HAL_RCC_OscConfig+0x470>)
 80069a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069ae:	60bb      	str	r3, [r7, #8]
 80069b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80069b2:	2301      	movs	r3, #1
 80069b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069b6:	4b77      	ldr	r3, [pc, #476]	; (8006b94 <HAL_RCC_OscConfig+0x474>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d118      	bne.n	80069f4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80069c2:	4b74      	ldr	r3, [pc, #464]	; (8006b94 <HAL_RCC_OscConfig+0x474>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a73      	ldr	r2, [pc, #460]	; (8006b94 <HAL_RCC_OscConfig+0x474>)
 80069c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80069ce:	f7fb fe43 	bl	8002658 <HAL_GetTick>
 80069d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069d4:	e008      	b.n	80069e8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80069d6:	f7fb fe3f 	bl	8002658 <HAL_GetTick>
 80069da:	4602      	mov	r2, r0
 80069dc:	693b      	ldr	r3, [r7, #16]
 80069de:	1ad3      	subs	r3, r2, r3
 80069e0:	2b02      	cmp	r3, #2
 80069e2:	d901      	bls.n	80069e8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80069e4:	2303      	movs	r3, #3
 80069e6:	e10c      	b.n	8006c02 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069e8:	4b6a      	ldr	r3, [pc, #424]	; (8006b94 <HAL_RCC_OscConfig+0x474>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d0f0      	beq.n	80069d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	689b      	ldr	r3, [r3, #8]
 80069f8:	2b01      	cmp	r3, #1
 80069fa:	d106      	bne.n	8006a0a <HAL_RCC_OscConfig+0x2ea>
 80069fc:	4b64      	ldr	r3, [pc, #400]	; (8006b90 <HAL_RCC_OscConfig+0x470>)
 80069fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a00:	4a63      	ldr	r2, [pc, #396]	; (8006b90 <HAL_RCC_OscConfig+0x470>)
 8006a02:	f043 0301 	orr.w	r3, r3, #1
 8006a06:	6713      	str	r3, [r2, #112]	; 0x70
 8006a08:	e01c      	b.n	8006a44 <HAL_RCC_OscConfig+0x324>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	689b      	ldr	r3, [r3, #8]
 8006a0e:	2b05      	cmp	r3, #5
 8006a10:	d10c      	bne.n	8006a2c <HAL_RCC_OscConfig+0x30c>
 8006a12:	4b5f      	ldr	r3, [pc, #380]	; (8006b90 <HAL_RCC_OscConfig+0x470>)
 8006a14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a16:	4a5e      	ldr	r2, [pc, #376]	; (8006b90 <HAL_RCC_OscConfig+0x470>)
 8006a18:	f043 0304 	orr.w	r3, r3, #4
 8006a1c:	6713      	str	r3, [r2, #112]	; 0x70
 8006a1e:	4b5c      	ldr	r3, [pc, #368]	; (8006b90 <HAL_RCC_OscConfig+0x470>)
 8006a20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a22:	4a5b      	ldr	r2, [pc, #364]	; (8006b90 <HAL_RCC_OscConfig+0x470>)
 8006a24:	f043 0301 	orr.w	r3, r3, #1
 8006a28:	6713      	str	r3, [r2, #112]	; 0x70
 8006a2a:	e00b      	b.n	8006a44 <HAL_RCC_OscConfig+0x324>
 8006a2c:	4b58      	ldr	r3, [pc, #352]	; (8006b90 <HAL_RCC_OscConfig+0x470>)
 8006a2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a30:	4a57      	ldr	r2, [pc, #348]	; (8006b90 <HAL_RCC_OscConfig+0x470>)
 8006a32:	f023 0301 	bic.w	r3, r3, #1
 8006a36:	6713      	str	r3, [r2, #112]	; 0x70
 8006a38:	4b55      	ldr	r3, [pc, #340]	; (8006b90 <HAL_RCC_OscConfig+0x470>)
 8006a3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a3c:	4a54      	ldr	r2, [pc, #336]	; (8006b90 <HAL_RCC_OscConfig+0x470>)
 8006a3e:	f023 0304 	bic.w	r3, r3, #4
 8006a42:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	689b      	ldr	r3, [r3, #8]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d015      	beq.n	8006a78 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a4c:	f7fb fe04 	bl	8002658 <HAL_GetTick>
 8006a50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a52:	e00a      	b.n	8006a6a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a54:	f7fb fe00 	bl	8002658 <HAL_GetTick>
 8006a58:	4602      	mov	r2, r0
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	1ad3      	subs	r3, r2, r3
 8006a5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d901      	bls.n	8006a6a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006a66:	2303      	movs	r3, #3
 8006a68:	e0cb      	b.n	8006c02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a6a:	4b49      	ldr	r3, [pc, #292]	; (8006b90 <HAL_RCC_OscConfig+0x470>)
 8006a6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a6e:	f003 0302 	and.w	r3, r3, #2
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d0ee      	beq.n	8006a54 <HAL_RCC_OscConfig+0x334>
 8006a76:	e014      	b.n	8006aa2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a78:	f7fb fdee 	bl	8002658 <HAL_GetTick>
 8006a7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a7e:	e00a      	b.n	8006a96 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a80:	f7fb fdea 	bl	8002658 <HAL_GetTick>
 8006a84:	4602      	mov	r2, r0
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	1ad3      	subs	r3, r2, r3
 8006a8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d901      	bls.n	8006a96 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006a92:	2303      	movs	r3, #3
 8006a94:	e0b5      	b.n	8006c02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a96:	4b3e      	ldr	r3, [pc, #248]	; (8006b90 <HAL_RCC_OscConfig+0x470>)
 8006a98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a9a:	f003 0302 	and.w	r3, r3, #2
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d1ee      	bne.n	8006a80 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006aa2:	7dfb      	ldrb	r3, [r7, #23]
 8006aa4:	2b01      	cmp	r3, #1
 8006aa6:	d105      	bne.n	8006ab4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006aa8:	4b39      	ldr	r3, [pc, #228]	; (8006b90 <HAL_RCC_OscConfig+0x470>)
 8006aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aac:	4a38      	ldr	r2, [pc, #224]	; (8006b90 <HAL_RCC_OscConfig+0x470>)
 8006aae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ab2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	699b      	ldr	r3, [r3, #24]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	f000 80a1 	beq.w	8006c00 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006abe:	4b34      	ldr	r3, [pc, #208]	; (8006b90 <HAL_RCC_OscConfig+0x470>)
 8006ac0:	689b      	ldr	r3, [r3, #8]
 8006ac2:	f003 030c 	and.w	r3, r3, #12
 8006ac6:	2b08      	cmp	r3, #8
 8006ac8:	d05c      	beq.n	8006b84 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	699b      	ldr	r3, [r3, #24]
 8006ace:	2b02      	cmp	r3, #2
 8006ad0:	d141      	bne.n	8006b56 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ad2:	4b31      	ldr	r3, [pc, #196]	; (8006b98 <HAL_RCC_OscConfig+0x478>)
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ad8:	f7fb fdbe 	bl	8002658 <HAL_GetTick>
 8006adc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ade:	e008      	b.n	8006af2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ae0:	f7fb fdba 	bl	8002658 <HAL_GetTick>
 8006ae4:	4602      	mov	r2, r0
 8006ae6:	693b      	ldr	r3, [r7, #16]
 8006ae8:	1ad3      	subs	r3, r2, r3
 8006aea:	2b02      	cmp	r3, #2
 8006aec:	d901      	bls.n	8006af2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006aee:	2303      	movs	r3, #3
 8006af0:	e087      	b.n	8006c02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006af2:	4b27      	ldr	r3, [pc, #156]	; (8006b90 <HAL_RCC_OscConfig+0x470>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d1f0      	bne.n	8006ae0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	69da      	ldr	r2, [r3, #28]
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6a1b      	ldr	r3, [r3, #32]
 8006b06:	431a      	orrs	r2, r3
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b0c:	019b      	lsls	r3, r3, #6
 8006b0e:	431a      	orrs	r2, r3
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b14:	085b      	lsrs	r3, r3, #1
 8006b16:	3b01      	subs	r3, #1
 8006b18:	041b      	lsls	r3, r3, #16
 8006b1a:	431a      	orrs	r2, r3
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b20:	061b      	lsls	r3, r3, #24
 8006b22:	491b      	ldr	r1, [pc, #108]	; (8006b90 <HAL_RCC_OscConfig+0x470>)
 8006b24:	4313      	orrs	r3, r2
 8006b26:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006b28:	4b1b      	ldr	r3, [pc, #108]	; (8006b98 <HAL_RCC_OscConfig+0x478>)
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b2e:	f7fb fd93 	bl	8002658 <HAL_GetTick>
 8006b32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b34:	e008      	b.n	8006b48 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b36:	f7fb fd8f 	bl	8002658 <HAL_GetTick>
 8006b3a:	4602      	mov	r2, r0
 8006b3c:	693b      	ldr	r3, [r7, #16]
 8006b3e:	1ad3      	subs	r3, r2, r3
 8006b40:	2b02      	cmp	r3, #2
 8006b42:	d901      	bls.n	8006b48 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006b44:	2303      	movs	r3, #3
 8006b46:	e05c      	b.n	8006c02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b48:	4b11      	ldr	r3, [pc, #68]	; (8006b90 <HAL_RCC_OscConfig+0x470>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d0f0      	beq.n	8006b36 <HAL_RCC_OscConfig+0x416>
 8006b54:	e054      	b.n	8006c00 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b56:	4b10      	ldr	r3, [pc, #64]	; (8006b98 <HAL_RCC_OscConfig+0x478>)
 8006b58:	2200      	movs	r2, #0
 8006b5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b5c:	f7fb fd7c 	bl	8002658 <HAL_GetTick>
 8006b60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b62:	e008      	b.n	8006b76 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b64:	f7fb fd78 	bl	8002658 <HAL_GetTick>
 8006b68:	4602      	mov	r2, r0
 8006b6a:	693b      	ldr	r3, [r7, #16]
 8006b6c:	1ad3      	subs	r3, r2, r3
 8006b6e:	2b02      	cmp	r3, #2
 8006b70:	d901      	bls.n	8006b76 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006b72:	2303      	movs	r3, #3
 8006b74:	e045      	b.n	8006c02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b76:	4b06      	ldr	r3, [pc, #24]	; (8006b90 <HAL_RCC_OscConfig+0x470>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d1f0      	bne.n	8006b64 <HAL_RCC_OscConfig+0x444>
 8006b82:	e03d      	b.n	8006c00 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	699b      	ldr	r3, [r3, #24]
 8006b88:	2b01      	cmp	r3, #1
 8006b8a:	d107      	bne.n	8006b9c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	e038      	b.n	8006c02 <HAL_RCC_OscConfig+0x4e2>
 8006b90:	40023800 	.word	0x40023800
 8006b94:	40007000 	.word	0x40007000
 8006b98:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006b9c:	4b1b      	ldr	r3, [pc, #108]	; (8006c0c <HAL_RCC_OscConfig+0x4ec>)
 8006b9e:	685b      	ldr	r3, [r3, #4]
 8006ba0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	699b      	ldr	r3, [r3, #24]
 8006ba6:	2b01      	cmp	r3, #1
 8006ba8:	d028      	beq.n	8006bfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006bb4:	429a      	cmp	r2, r3
 8006bb6:	d121      	bne.n	8006bfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006bc2:	429a      	cmp	r2, r3
 8006bc4:	d11a      	bne.n	8006bfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006bc6:	68fa      	ldr	r2, [r7, #12]
 8006bc8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006bcc:	4013      	ands	r3, r2
 8006bce:	687a      	ldr	r2, [r7, #4]
 8006bd0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006bd2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d111      	bne.n	8006bfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006be2:	085b      	lsrs	r3, r3, #1
 8006be4:	3b01      	subs	r3, #1
 8006be6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006be8:	429a      	cmp	r2, r3
 8006bea:	d107      	bne.n	8006bfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bf6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006bf8:	429a      	cmp	r2, r3
 8006bfa:	d001      	beq.n	8006c00 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	e000      	b.n	8006c02 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006c00:	2300      	movs	r3, #0
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	3718      	adds	r7, #24
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}
 8006c0a:	bf00      	nop
 8006c0c:	40023800 	.word	0x40023800

08006c10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b084      	sub	sp, #16
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
 8006c18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d101      	bne.n	8006c24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006c20:	2301      	movs	r3, #1
 8006c22:	e0cc      	b.n	8006dbe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006c24:	4b68      	ldr	r3, [pc, #416]	; (8006dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f003 0307 	and.w	r3, r3, #7
 8006c2c:	683a      	ldr	r2, [r7, #0]
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	d90c      	bls.n	8006c4c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c32:	4b65      	ldr	r3, [pc, #404]	; (8006dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8006c34:	683a      	ldr	r2, [r7, #0]
 8006c36:	b2d2      	uxtb	r2, r2
 8006c38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c3a:	4b63      	ldr	r3, [pc, #396]	; (8006dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f003 0307 	and.w	r3, r3, #7
 8006c42:	683a      	ldr	r2, [r7, #0]
 8006c44:	429a      	cmp	r2, r3
 8006c46:	d001      	beq.n	8006c4c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006c48:	2301      	movs	r3, #1
 8006c4a:	e0b8      	b.n	8006dbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f003 0302 	and.w	r3, r3, #2
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d020      	beq.n	8006c9a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f003 0304 	and.w	r3, r3, #4
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d005      	beq.n	8006c70 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006c64:	4b59      	ldr	r3, [pc, #356]	; (8006dcc <HAL_RCC_ClockConfig+0x1bc>)
 8006c66:	689b      	ldr	r3, [r3, #8]
 8006c68:	4a58      	ldr	r2, [pc, #352]	; (8006dcc <HAL_RCC_ClockConfig+0x1bc>)
 8006c6a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006c6e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f003 0308 	and.w	r3, r3, #8
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d005      	beq.n	8006c88 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006c7c:	4b53      	ldr	r3, [pc, #332]	; (8006dcc <HAL_RCC_ClockConfig+0x1bc>)
 8006c7e:	689b      	ldr	r3, [r3, #8]
 8006c80:	4a52      	ldr	r2, [pc, #328]	; (8006dcc <HAL_RCC_ClockConfig+0x1bc>)
 8006c82:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006c86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c88:	4b50      	ldr	r3, [pc, #320]	; (8006dcc <HAL_RCC_ClockConfig+0x1bc>)
 8006c8a:	689b      	ldr	r3, [r3, #8]
 8006c8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	689b      	ldr	r3, [r3, #8]
 8006c94:	494d      	ldr	r1, [pc, #308]	; (8006dcc <HAL_RCC_ClockConfig+0x1bc>)
 8006c96:	4313      	orrs	r3, r2
 8006c98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f003 0301 	and.w	r3, r3, #1
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d044      	beq.n	8006d30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	685b      	ldr	r3, [r3, #4]
 8006caa:	2b01      	cmp	r3, #1
 8006cac:	d107      	bne.n	8006cbe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006cae:	4b47      	ldr	r3, [pc, #284]	; (8006dcc <HAL_RCC_ClockConfig+0x1bc>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d119      	bne.n	8006cee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006cba:	2301      	movs	r3, #1
 8006cbc:	e07f      	b.n	8006dbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	685b      	ldr	r3, [r3, #4]
 8006cc2:	2b02      	cmp	r3, #2
 8006cc4:	d003      	beq.n	8006cce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006cca:	2b03      	cmp	r3, #3
 8006ccc:	d107      	bne.n	8006cde <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006cce:	4b3f      	ldr	r3, [pc, #252]	; (8006dcc <HAL_RCC_ClockConfig+0x1bc>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d109      	bne.n	8006cee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	e06f      	b.n	8006dbe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006cde:	4b3b      	ldr	r3, [pc, #236]	; (8006dcc <HAL_RCC_ClockConfig+0x1bc>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f003 0302 	and.w	r3, r3, #2
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d101      	bne.n	8006cee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006cea:	2301      	movs	r3, #1
 8006cec:	e067      	b.n	8006dbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006cee:	4b37      	ldr	r3, [pc, #220]	; (8006dcc <HAL_RCC_ClockConfig+0x1bc>)
 8006cf0:	689b      	ldr	r3, [r3, #8]
 8006cf2:	f023 0203 	bic.w	r2, r3, #3
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	685b      	ldr	r3, [r3, #4]
 8006cfa:	4934      	ldr	r1, [pc, #208]	; (8006dcc <HAL_RCC_ClockConfig+0x1bc>)
 8006cfc:	4313      	orrs	r3, r2
 8006cfe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006d00:	f7fb fcaa 	bl	8002658 <HAL_GetTick>
 8006d04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d06:	e00a      	b.n	8006d1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d08:	f7fb fca6 	bl	8002658 <HAL_GetTick>
 8006d0c:	4602      	mov	r2, r0
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	1ad3      	subs	r3, r2, r3
 8006d12:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d901      	bls.n	8006d1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006d1a:	2303      	movs	r3, #3
 8006d1c:	e04f      	b.n	8006dbe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d1e:	4b2b      	ldr	r3, [pc, #172]	; (8006dcc <HAL_RCC_ClockConfig+0x1bc>)
 8006d20:	689b      	ldr	r3, [r3, #8]
 8006d22:	f003 020c 	and.w	r2, r3, #12
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	685b      	ldr	r3, [r3, #4]
 8006d2a:	009b      	lsls	r3, r3, #2
 8006d2c:	429a      	cmp	r2, r3
 8006d2e:	d1eb      	bne.n	8006d08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006d30:	4b25      	ldr	r3, [pc, #148]	; (8006dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f003 0307 	and.w	r3, r3, #7
 8006d38:	683a      	ldr	r2, [r7, #0]
 8006d3a:	429a      	cmp	r2, r3
 8006d3c:	d20c      	bcs.n	8006d58 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d3e:	4b22      	ldr	r3, [pc, #136]	; (8006dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8006d40:	683a      	ldr	r2, [r7, #0]
 8006d42:	b2d2      	uxtb	r2, r2
 8006d44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d46:	4b20      	ldr	r3, [pc, #128]	; (8006dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f003 0307 	and.w	r3, r3, #7
 8006d4e:	683a      	ldr	r2, [r7, #0]
 8006d50:	429a      	cmp	r2, r3
 8006d52:	d001      	beq.n	8006d58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006d54:	2301      	movs	r3, #1
 8006d56:	e032      	b.n	8006dbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f003 0304 	and.w	r3, r3, #4
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d008      	beq.n	8006d76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006d64:	4b19      	ldr	r3, [pc, #100]	; (8006dcc <HAL_RCC_ClockConfig+0x1bc>)
 8006d66:	689b      	ldr	r3, [r3, #8]
 8006d68:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	68db      	ldr	r3, [r3, #12]
 8006d70:	4916      	ldr	r1, [pc, #88]	; (8006dcc <HAL_RCC_ClockConfig+0x1bc>)
 8006d72:	4313      	orrs	r3, r2
 8006d74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f003 0308 	and.w	r3, r3, #8
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d009      	beq.n	8006d96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006d82:	4b12      	ldr	r3, [pc, #72]	; (8006dcc <HAL_RCC_ClockConfig+0x1bc>)
 8006d84:	689b      	ldr	r3, [r3, #8]
 8006d86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	691b      	ldr	r3, [r3, #16]
 8006d8e:	00db      	lsls	r3, r3, #3
 8006d90:	490e      	ldr	r1, [pc, #56]	; (8006dcc <HAL_RCC_ClockConfig+0x1bc>)
 8006d92:	4313      	orrs	r3, r2
 8006d94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006d96:	f000 f821 	bl	8006ddc <HAL_RCC_GetSysClockFreq>
 8006d9a:	4602      	mov	r2, r0
 8006d9c:	4b0b      	ldr	r3, [pc, #44]	; (8006dcc <HAL_RCC_ClockConfig+0x1bc>)
 8006d9e:	689b      	ldr	r3, [r3, #8]
 8006da0:	091b      	lsrs	r3, r3, #4
 8006da2:	f003 030f 	and.w	r3, r3, #15
 8006da6:	490a      	ldr	r1, [pc, #40]	; (8006dd0 <HAL_RCC_ClockConfig+0x1c0>)
 8006da8:	5ccb      	ldrb	r3, [r1, r3]
 8006daa:	fa22 f303 	lsr.w	r3, r2, r3
 8006dae:	4a09      	ldr	r2, [pc, #36]	; (8006dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8006db0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006db2:	4b09      	ldr	r3, [pc, #36]	; (8006dd8 <HAL_RCC_ClockConfig+0x1c8>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4618      	mov	r0, r3
 8006db8:	f7fb fc0a 	bl	80025d0 <HAL_InitTick>

  return HAL_OK;
 8006dbc:	2300      	movs	r3, #0
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	3710      	adds	r7, #16
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}
 8006dc6:	bf00      	nop
 8006dc8:	40023c00 	.word	0x40023c00
 8006dcc:	40023800 	.word	0x40023800
 8006dd0:	08009288 	.word	0x08009288
 8006dd4:	20000000 	.word	0x20000000
 8006dd8:	20000004 	.word	0x20000004

08006ddc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ddc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006de0:	b094      	sub	sp, #80	; 0x50
 8006de2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006de4:	2300      	movs	r3, #0
 8006de6:	647b      	str	r3, [r7, #68]	; 0x44
 8006de8:	2300      	movs	r3, #0
 8006dea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006dec:	2300      	movs	r3, #0
 8006dee:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006df0:	2300      	movs	r3, #0
 8006df2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006df4:	4b79      	ldr	r3, [pc, #484]	; (8006fdc <HAL_RCC_GetSysClockFreq+0x200>)
 8006df6:	689b      	ldr	r3, [r3, #8]
 8006df8:	f003 030c 	and.w	r3, r3, #12
 8006dfc:	2b08      	cmp	r3, #8
 8006dfe:	d00d      	beq.n	8006e1c <HAL_RCC_GetSysClockFreq+0x40>
 8006e00:	2b08      	cmp	r3, #8
 8006e02:	f200 80e1 	bhi.w	8006fc8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d002      	beq.n	8006e10 <HAL_RCC_GetSysClockFreq+0x34>
 8006e0a:	2b04      	cmp	r3, #4
 8006e0c:	d003      	beq.n	8006e16 <HAL_RCC_GetSysClockFreq+0x3a>
 8006e0e:	e0db      	b.n	8006fc8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006e10:	4b73      	ldr	r3, [pc, #460]	; (8006fe0 <HAL_RCC_GetSysClockFreq+0x204>)
 8006e12:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006e14:	e0db      	b.n	8006fce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006e16:	4b73      	ldr	r3, [pc, #460]	; (8006fe4 <HAL_RCC_GetSysClockFreq+0x208>)
 8006e18:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006e1a:	e0d8      	b.n	8006fce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006e1c:	4b6f      	ldr	r3, [pc, #444]	; (8006fdc <HAL_RCC_GetSysClockFreq+0x200>)
 8006e1e:	685b      	ldr	r3, [r3, #4]
 8006e20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e24:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006e26:	4b6d      	ldr	r3, [pc, #436]	; (8006fdc <HAL_RCC_GetSysClockFreq+0x200>)
 8006e28:	685b      	ldr	r3, [r3, #4]
 8006e2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d063      	beq.n	8006efa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e32:	4b6a      	ldr	r3, [pc, #424]	; (8006fdc <HAL_RCC_GetSysClockFreq+0x200>)
 8006e34:	685b      	ldr	r3, [r3, #4]
 8006e36:	099b      	lsrs	r3, r3, #6
 8006e38:	2200      	movs	r2, #0
 8006e3a:	63bb      	str	r3, [r7, #56]	; 0x38
 8006e3c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e44:	633b      	str	r3, [r7, #48]	; 0x30
 8006e46:	2300      	movs	r3, #0
 8006e48:	637b      	str	r3, [r7, #52]	; 0x34
 8006e4a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006e4e:	4622      	mov	r2, r4
 8006e50:	462b      	mov	r3, r5
 8006e52:	f04f 0000 	mov.w	r0, #0
 8006e56:	f04f 0100 	mov.w	r1, #0
 8006e5a:	0159      	lsls	r1, r3, #5
 8006e5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006e60:	0150      	lsls	r0, r2, #5
 8006e62:	4602      	mov	r2, r0
 8006e64:	460b      	mov	r3, r1
 8006e66:	4621      	mov	r1, r4
 8006e68:	1a51      	subs	r1, r2, r1
 8006e6a:	6139      	str	r1, [r7, #16]
 8006e6c:	4629      	mov	r1, r5
 8006e6e:	eb63 0301 	sbc.w	r3, r3, r1
 8006e72:	617b      	str	r3, [r7, #20]
 8006e74:	f04f 0200 	mov.w	r2, #0
 8006e78:	f04f 0300 	mov.w	r3, #0
 8006e7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006e80:	4659      	mov	r1, fp
 8006e82:	018b      	lsls	r3, r1, #6
 8006e84:	4651      	mov	r1, sl
 8006e86:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006e8a:	4651      	mov	r1, sl
 8006e8c:	018a      	lsls	r2, r1, #6
 8006e8e:	4651      	mov	r1, sl
 8006e90:	ebb2 0801 	subs.w	r8, r2, r1
 8006e94:	4659      	mov	r1, fp
 8006e96:	eb63 0901 	sbc.w	r9, r3, r1
 8006e9a:	f04f 0200 	mov.w	r2, #0
 8006e9e:	f04f 0300 	mov.w	r3, #0
 8006ea2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006ea6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006eaa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006eae:	4690      	mov	r8, r2
 8006eb0:	4699      	mov	r9, r3
 8006eb2:	4623      	mov	r3, r4
 8006eb4:	eb18 0303 	adds.w	r3, r8, r3
 8006eb8:	60bb      	str	r3, [r7, #8]
 8006eba:	462b      	mov	r3, r5
 8006ebc:	eb49 0303 	adc.w	r3, r9, r3
 8006ec0:	60fb      	str	r3, [r7, #12]
 8006ec2:	f04f 0200 	mov.w	r2, #0
 8006ec6:	f04f 0300 	mov.w	r3, #0
 8006eca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006ece:	4629      	mov	r1, r5
 8006ed0:	024b      	lsls	r3, r1, #9
 8006ed2:	4621      	mov	r1, r4
 8006ed4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006ed8:	4621      	mov	r1, r4
 8006eda:	024a      	lsls	r2, r1, #9
 8006edc:	4610      	mov	r0, r2
 8006ede:	4619      	mov	r1, r3
 8006ee0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ee6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006ee8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006eec:	f7f9 fd62 	bl	80009b4 <__aeabi_uldivmod>
 8006ef0:	4602      	mov	r2, r0
 8006ef2:	460b      	mov	r3, r1
 8006ef4:	4613      	mov	r3, r2
 8006ef6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ef8:	e058      	b.n	8006fac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006efa:	4b38      	ldr	r3, [pc, #224]	; (8006fdc <HAL_RCC_GetSysClockFreq+0x200>)
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	099b      	lsrs	r3, r3, #6
 8006f00:	2200      	movs	r2, #0
 8006f02:	4618      	mov	r0, r3
 8006f04:	4611      	mov	r1, r2
 8006f06:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006f0a:	623b      	str	r3, [r7, #32]
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	627b      	str	r3, [r7, #36]	; 0x24
 8006f10:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006f14:	4642      	mov	r2, r8
 8006f16:	464b      	mov	r3, r9
 8006f18:	f04f 0000 	mov.w	r0, #0
 8006f1c:	f04f 0100 	mov.w	r1, #0
 8006f20:	0159      	lsls	r1, r3, #5
 8006f22:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006f26:	0150      	lsls	r0, r2, #5
 8006f28:	4602      	mov	r2, r0
 8006f2a:	460b      	mov	r3, r1
 8006f2c:	4641      	mov	r1, r8
 8006f2e:	ebb2 0a01 	subs.w	sl, r2, r1
 8006f32:	4649      	mov	r1, r9
 8006f34:	eb63 0b01 	sbc.w	fp, r3, r1
 8006f38:	f04f 0200 	mov.w	r2, #0
 8006f3c:	f04f 0300 	mov.w	r3, #0
 8006f40:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006f44:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006f48:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006f4c:	ebb2 040a 	subs.w	r4, r2, sl
 8006f50:	eb63 050b 	sbc.w	r5, r3, fp
 8006f54:	f04f 0200 	mov.w	r2, #0
 8006f58:	f04f 0300 	mov.w	r3, #0
 8006f5c:	00eb      	lsls	r3, r5, #3
 8006f5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006f62:	00e2      	lsls	r2, r4, #3
 8006f64:	4614      	mov	r4, r2
 8006f66:	461d      	mov	r5, r3
 8006f68:	4643      	mov	r3, r8
 8006f6a:	18e3      	adds	r3, r4, r3
 8006f6c:	603b      	str	r3, [r7, #0]
 8006f6e:	464b      	mov	r3, r9
 8006f70:	eb45 0303 	adc.w	r3, r5, r3
 8006f74:	607b      	str	r3, [r7, #4]
 8006f76:	f04f 0200 	mov.w	r2, #0
 8006f7a:	f04f 0300 	mov.w	r3, #0
 8006f7e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006f82:	4629      	mov	r1, r5
 8006f84:	028b      	lsls	r3, r1, #10
 8006f86:	4621      	mov	r1, r4
 8006f88:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006f8c:	4621      	mov	r1, r4
 8006f8e:	028a      	lsls	r2, r1, #10
 8006f90:	4610      	mov	r0, r2
 8006f92:	4619      	mov	r1, r3
 8006f94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f96:	2200      	movs	r2, #0
 8006f98:	61bb      	str	r3, [r7, #24]
 8006f9a:	61fa      	str	r2, [r7, #28]
 8006f9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006fa0:	f7f9 fd08 	bl	80009b4 <__aeabi_uldivmod>
 8006fa4:	4602      	mov	r2, r0
 8006fa6:	460b      	mov	r3, r1
 8006fa8:	4613      	mov	r3, r2
 8006faa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006fac:	4b0b      	ldr	r3, [pc, #44]	; (8006fdc <HAL_RCC_GetSysClockFreq+0x200>)
 8006fae:	685b      	ldr	r3, [r3, #4]
 8006fb0:	0c1b      	lsrs	r3, r3, #16
 8006fb2:	f003 0303 	and.w	r3, r3, #3
 8006fb6:	3301      	adds	r3, #1
 8006fb8:	005b      	lsls	r3, r3, #1
 8006fba:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006fbc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006fbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fc4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006fc6:	e002      	b.n	8006fce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006fc8:	4b05      	ldr	r3, [pc, #20]	; (8006fe0 <HAL_RCC_GetSysClockFreq+0x204>)
 8006fca:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006fcc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006fce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	3750      	adds	r7, #80	; 0x50
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006fda:	bf00      	nop
 8006fdc:	40023800 	.word	0x40023800
 8006fe0:	00f42400 	.word	0x00f42400
 8006fe4:	007a1200 	.word	0x007a1200

08006fe8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006fec:	4b03      	ldr	r3, [pc, #12]	; (8006ffc <HAL_RCC_GetHCLKFreq+0x14>)
 8006fee:	681b      	ldr	r3, [r3, #0]
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff8:	4770      	bx	lr
 8006ffa:	bf00      	nop
 8006ffc:	20000000 	.word	0x20000000

08007000 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007004:	f7ff fff0 	bl	8006fe8 <HAL_RCC_GetHCLKFreq>
 8007008:	4602      	mov	r2, r0
 800700a:	4b05      	ldr	r3, [pc, #20]	; (8007020 <HAL_RCC_GetPCLK1Freq+0x20>)
 800700c:	689b      	ldr	r3, [r3, #8]
 800700e:	0a9b      	lsrs	r3, r3, #10
 8007010:	f003 0307 	and.w	r3, r3, #7
 8007014:	4903      	ldr	r1, [pc, #12]	; (8007024 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007016:	5ccb      	ldrb	r3, [r1, r3]
 8007018:	fa22 f303 	lsr.w	r3, r2, r3
}
 800701c:	4618      	mov	r0, r3
 800701e:	bd80      	pop	{r7, pc}
 8007020:	40023800 	.word	0x40023800
 8007024:	08009298 	.word	0x08009298

08007028 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800702c:	f7ff ffdc 	bl	8006fe8 <HAL_RCC_GetHCLKFreq>
 8007030:	4602      	mov	r2, r0
 8007032:	4b05      	ldr	r3, [pc, #20]	; (8007048 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007034:	689b      	ldr	r3, [r3, #8]
 8007036:	0b5b      	lsrs	r3, r3, #13
 8007038:	f003 0307 	and.w	r3, r3, #7
 800703c:	4903      	ldr	r1, [pc, #12]	; (800704c <HAL_RCC_GetPCLK2Freq+0x24>)
 800703e:	5ccb      	ldrb	r3, [r1, r3]
 8007040:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007044:	4618      	mov	r0, r3
 8007046:	bd80      	pop	{r7, pc}
 8007048:	40023800 	.word	0x40023800
 800704c:	08009298 	.word	0x08009298

08007050 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b082      	sub	sp, #8
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d101      	bne.n	8007062 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800705e:	2301      	movs	r3, #1
 8007060:	e041      	b.n	80070e6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007068:	b2db      	uxtb	r3, r3
 800706a:	2b00      	cmp	r3, #0
 800706c:	d106      	bne.n	800707c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2200      	movs	r2, #0
 8007072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f7fa ffdc 	bl	8002034 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2202      	movs	r2, #2
 8007080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681a      	ldr	r2, [r3, #0]
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	3304      	adds	r3, #4
 800708c:	4619      	mov	r1, r3
 800708e:	4610      	mov	r0, r2
 8007090:	f000 fac0 	bl	8007614 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2201      	movs	r2, #1
 8007098:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2201      	movs	r2, #1
 80070a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2201      	movs	r2, #1
 80070a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2201      	movs	r2, #1
 80070b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2201      	movs	r2, #1
 80070b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2201      	movs	r2, #1
 80070c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2201      	movs	r2, #1
 80070c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2201      	movs	r2, #1
 80070d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2201      	movs	r2, #1
 80070d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2201      	movs	r2, #1
 80070e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80070e4:	2300      	movs	r3, #0
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	3708      	adds	r7, #8
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}

080070ee <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80070ee:	b580      	push	{r7, lr}
 80070f0:	b082      	sub	sp, #8
 80070f2:	af00      	add	r7, sp, #0
 80070f4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d101      	bne.n	8007100 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80070fc:	2301      	movs	r3, #1
 80070fe:	e041      	b.n	8007184 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007106:	b2db      	uxtb	r3, r3
 8007108:	2b00      	cmp	r3, #0
 800710a:	d106      	bne.n	800711a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2200      	movs	r2, #0
 8007110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f000 f839 	bl	800718c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2202      	movs	r2, #2
 800711e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681a      	ldr	r2, [r3, #0]
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	3304      	adds	r3, #4
 800712a:	4619      	mov	r1, r3
 800712c:	4610      	mov	r0, r2
 800712e:	f000 fa71 	bl	8007614 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2201      	movs	r2, #1
 8007136:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2201      	movs	r2, #1
 800713e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2201      	movs	r2, #1
 8007146:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2201      	movs	r2, #1
 800714e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2201      	movs	r2, #1
 8007156:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2201      	movs	r2, #1
 800715e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2201      	movs	r2, #1
 8007166:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2201      	movs	r2, #1
 800716e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2201      	movs	r2, #1
 8007176:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2201      	movs	r2, #1
 800717e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007182:	2300      	movs	r3, #0
}
 8007184:	4618      	mov	r0, r3
 8007186:	3708      	adds	r7, #8
 8007188:	46bd      	mov	sp, r7
 800718a:	bd80      	pop	{r7, pc}

0800718c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800718c:	b480      	push	{r7}
 800718e:	b083      	sub	sp, #12
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007194:	bf00      	nop
 8007196:	370c      	adds	r7, #12
 8007198:	46bd      	mov	sp, r7
 800719a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719e:	4770      	bx	lr

080071a0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b084      	sub	sp, #16
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
 80071a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d109      	bne.n	80071c4 <HAL_TIM_PWM_Start+0x24>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80071b6:	b2db      	uxtb	r3, r3
 80071b8:	2b01      	cmp	r3, #1
 80071ba:	bf14      	ite	ne
 80071bc:	2301      	movne	r3, #1
 80071be:	2300      	moveq	r3, #0
 80071c0:	b2db      	uxtb	r3, r3
 80071c2:	e022      	b.n	800720a <HAL_TIM_PWM_Start+0x6a>
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	2b04      	cmp	r3, #4
 80071c8:	d109      	bne.n	80071de <HAL_TIM_PWM_Start+0x3e>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80071d0:	b2db      	uxtb	r3, r3
 80071d2:	2b01      	cmp	r3, #1
 80071d4:	bf14      	ite	ne
 80071d6:	2301      	movne	r3, #1
 80071d8:	2300      	moveq	r3, #0
 80071da:	b2db      	uxtb	r3, r3
 80071dc:	e015      	b.n	800720a <HAL_TIM_PWM_Start+0x6a>
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	2b08      	cmp	r3, #8
 80071e2:	d109      	bne.n	80071f8 <HAL_TIM_PWM_Start+0x58>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80071ea:	b2db      	uxtb	r3, r3
 80071ec:	2b01      	cmp	r3, #1
 80071ee:	bf14      	ite	ne
 80071f0:	2301      	movne	r3, #1
 80071f2:	2300      	moveq	r3, #0
 80071f4:	b2db      	uxtb	r3, r3
 80071f6:	e008      	b.n	800720a <HAL_TIM_PWM_Start+0x6a>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80071fe:	b2db      	uxtb	r3, r3
 8007200:	2b01      	cmp	r3, #1
 8007202:	bf14      	ite	ne
 8007204:	2301      	movne	r3, #1
 8007206:	2300      	moveq	r3, #0
 8007208:	b2db      	uxtb	r3, r3
 800720a:	2b00      	cmp	r3, #0
 800720c:	d001      	beq.n	8007212 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800720e:	2301      	movs	r3, #1
 8007210:	e068      	b.n	80072e4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d104      	bne.n	8007222 <HAL_TIM_PWM_Start+0x82>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2202      	movs	r2, #2
 800721c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007220:	e013      	b.n	800724a <HAL_TIM_PWM_Start+0xaa>
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	2b04      	cmp	r3, #4
 8007226:	d104      	bne.n	8007232 <HAL_TIM_PWM_Start+0x92>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2202      	movs	r2, #2
 800722c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007230:	e00b      	b.n	800724a <HAL_TIM_PWM_Start+0xaa>
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	2b08      	cmp	r3, #8
 8007236:	d104      	bne.n	8007242 <HAL_TIM_PWM_Start+0xa2>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2202      	movs	r2, #2
 800723c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007240:	e003      	b.n	800724a <HAL_TIM_PWM_Start+0xaa>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2202      	movs	r2, #2
 8007246:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	2201      	movs	r2, #1
 8007250:	6839      	ldr	r1, [r7, #0]
 8007252:	4618      	mov	r0, r3
 8007254:	f000 fc84 	bl	8007b60 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	4a23      	ldr	r2, [pc, #140]	; (80072ec <HAL_TIM_PWM_Start+0x14c>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d107      	bne.n	8007272 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007270:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4a1d      	ldr	r2, [pc, #116]	; (80072ec <HAL_TIM_PWM_Start+0x14c>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d018      	beq.n	80072ae <HAL_TIM_PWM_Start+0x10e>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007284:	d013      	beq.n	80072ae <HAL_TIM_PWM_Start+0x10e>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a19      	ldr	r2, [pc, #100]	; (80072f0 <HAL_TIM_PWM_Start+0x150>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d00e      	beq.n	80072ae <HAL_TIM_PWM_Start+0x10e>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a17      	ldr	r2, [pc, #92]	; (80072f4 <HAL_TIM_PWM_Start+0x154>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d009      	beq.n	80072ae <HAL_TIM_PWM_Start+0x10e>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4a16      	ldr	r2, [pc, #88]	; (80072f8 <HAL_TIM_PWM_Start+0x158>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d004      	beq.n	80072ae <HAL_TIM_PWM_Start+0x10e>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4a14      	ldr	r2, [pc, #80]	; (80072fc <HAL_TIM_PWM_Start+0x15c>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d111      	bne.n	80072d2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	689b      	ldr	r3, [r3, #8]
 80072b4:	f003 0307 	and.w	r3, r3, #7
 80072b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	2b06      	cmp	r3, #6
 80072be:	d010      	beq.n	80072e2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	681a      	ldr	r2, [r3, #0]
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f042 0201 	orr.w	r2, r2, #1
 80072ce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072d0:	e007      	b.n	80072e2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	681a      	ldr	r2, [r3, #0]
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f042 0201 	orr.w	r2, r2, #1
 80072e0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80072e2:	2300      	movs	r3, #0
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	3710      	adds	r7, #16
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd80      	pop	{r7, pc}
 80072ec:	40010000 	.word	0x40010000
 80072f0:	40000400 	.word	0x40000400
 80072f4:	40000800 	.word	0x40000800
 80072f8:	40000c00 	.word	0x40000c00
 80072fc:	40014000 	.word	0x40014000

08007300 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b086      	sub	sp, #24
 8007304:	af00      	add	r7, sp, #0
 8007306:	60f8      	str	r0, [r7, #12]
 8007308:	60b9      	str	r1, [r7, #8]
 800730a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800730c:	2300      	movs	r3, #0
 800730e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007316:	2b01      	cmp	r3, #1
 8007318:	d101      	bne.n	800731e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800731a:	2302      	movs	r3, #2
 800731c:	e0ae      	b.n	800747c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	2201      	movs	r2, #1
 8007322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2b0c      	cmp	r3, #12
 800732a:	f200 809f 	bhi.w	800746c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800732e:	a201      	add	r2, pc, #4	; (adr r2, 8007334 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007334:	08007369 	.word	0x08007369
 8007338:	0800746d 	.word	0x0800746d
 800733c:	0800746d 	.word	0x0800746d
 8007340:	0800746d 	.word	0x0800746d
 8007344:	080073a9 	.word	0x080073a9
 8007348:	0800746d 	.word	0x0800746d
 800734c:	0800746d 	.word	0x0800746d
 8007350:	0800746d 	.word	0x0800746d
 8007354:	080073eb 	.word	0x080073eb
 8007358:	0800746d 	.word	0x0800746d
 800735c:	0800746d 	.word	0x0800746d
 8007360:	0800746d 	.word	0x0800746d
 8007364:	0800742b 	.word	0x0800742b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	68b9      	ldr	r1, [r7, #8]
 800736e:	4618      	mov	r0, r3
 8007370:	f000 f9d0 	bl	8007714 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	699a      	ldr	r2, [r3, #24]
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f042 0208 	orr.w	r2, r2, #8
 8007382:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	699a      	ldr	r2, [r3, #24]
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f022 0204 	bic.w	r2, r2, #4
 8007392:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	6999      	ldr	r1, [r3, #24]
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	691a      	ldr	r2, [r3, #16]
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	430a      	orrs	r2, r1
 80073a4:	619a      	str	r2, [r3, #24]
      break;
 80073a6:	e064      	b.n	8007472 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	68b9      	ldr	r1, [r7, #8]
 80073ae:	4618      	mov	r0, r3
 80073b0:	f000 fa16 	bl	80077e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	699a      	ldr	r2, [r3, #24]
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80073c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	699a      	ldr	r2, [r3, #24]
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	6999      	ldr	r1, [r3, #24]
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	691b      	ldr	r3, [r3, #16]
 80073de:	021a      	lsls	r2, r3, #8
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	430a      	orrs	r2, r1
 80073e6:	619a      	str	r2, [r3, #24]
      break;
 80073e8:	e043      	b.n	8007472 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	68b9      	ldr	r1, [r7, #8]
 80073f0:	4618      	mov	r0, r3
 80073f2:	f000 fa61 	bl	80078b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	69da      	ldr	r2, [r3, #28]
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f042 0208 	orr.w	r2, r2, #8
 8007404:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	69da      	ldr	r2, [r3, #28]
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f022 0204 	bic.w	r2, r2, #4
 8007414:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	69d9      	ldr	r1, [r3, #28]
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	691a      	ldr	r2, [r3, #16]
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	430a      	orrs	r2, r1
 8007426:	61da      	str	r2, [r3, #28]
      break;
 8007428:	e023      	b.n	8007472 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	68b9      	ldr	r1, [r7, #8]
 8007430:	4618      	mov	r0, r3
 8007432:	f000 faab 	bl	800798c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	69da      	ldr	r2, [r3, #28]
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007444:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	69da      	ldr	r2, [r3, #28]
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007454:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	69d9      	ldr	r1, [r3, #28]
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	691b      	ldr	r3, [r3, #16]
 8007460:	021a      	lsls	r2, r3, #8
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	430a      	orrs	r2, r1
 8007468:	61da      	str	r2, [r3, #28]
      break;
 800746a:	e002      	b.n	8007472 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800746c:	2301      	movs	r3, #1
 800746e:	75fb      	strb	r3, [r7, #23]
      break;
 8007470:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	2200      	movs	r2, #0
 8007476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800747a:	7dfb      	ldrb	r3, [r7, #23]
}
 800747c:	4618      	mov	r0, r3
 800747e:	3718      	adds	r7, #24
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}

08007484 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b084      	sub	sp, #16
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
 800748c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800748e:	2300      	movs	r3, #0
 8007490:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007498:	2b01      	cmp	r3, #1
 800749a:	d101      	bne.n	80074a0 <HAL_TIM_ConfigClockSource+0x1c>
 800749c:	2302      	movs	r3, #2
 800749e:	e0b4      	b.n	800760a <HAL_TIM_ConfigClockSource+0x186>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2201      	movs	r2, #1
 80074a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2202      	movs	r2, #2
 80074ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	689b      	ldr	r3, [r3, #8]
 80074b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80074be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80074c6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	68ba      	ldr	r2, [r7, #8]
 80074ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074d8:	d03e      	beq.n	8007558 <HAL_TIM_ConfigClockSource+0xd4>
 80074da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074de:	f200 8087 	bhi.w	80075f0 <HAL_TIM_ConfigClockSource+0x16c>
 80074e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074e6:	f000 8086 	beq.w	80075f6 <HAL_TIM_ConfigClockSource+0x172>
 80074ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074ee:	d87f      	bhi.n	80075f0 <HAL_TIM_ConfigClockSource+0x16c>
 80074f0:	2b70      	cmp	r3, #112	; 0x70
 80074f2:	d01a      	beq.n	800752a <HAL_TIM_ConfigClockSource+0xa6>
 80074f4:	2b70      	cmp	r3, #112	; 0x70
 80074f6:	d87b      	bhi.n	80075f0 <HAL_TIM_ConfigClockSource+0x16c>
 80074f8:	2b60      	cmp	r3, #96	; 0x60
 80074fa:	d050      	beq.n	800759e <HAL_TIM_ConfigClockSource+0x11a>
 80074fc:	2b60      	cmp	r3, #96	; 0x60
 80074fe:	d877      	bhi.n	80075f0 <HAL_TIM_ConfigClockSource+0x16c>
 8007500:	2b50      	cmp	r3, #80	; 0x50
 8007502:	d03c      	beq.n	800757e <HAL_TIM_ConfigClockSource+0xfa>
 8007504:	2b50      	cmp	r3, #80	; 0x50
 8007506:	d873      	bhi.n	80075f0 <HAL_TIM_ConfigClockSource+0x16c>
 8007508:	2b40      	cmp	r3, #64	; 0x40
 800750a:	d058      	beq.n	80075be <HAL_TIM_ConfigClockSource+0x13a>
 800750c:	2b40      	cmp	r3, #64	; 0x40
 800750e:	d86f      	bhi.n	80075f0 <HAL_TIM_ConfigClockSource+0x16c>
 8007510:	2b30      	cmp	r3, #48	; 0x30
 8007512:	d064      	beq.n	80075de <HAL_TIM_ConfigClockSource+0x15a>
 8007514:	2b30      	cmp	r3, #48	; 0x30
 8007516:	d86b      	bhi.n	80075f0 <HAL_TIM_ConfigClockSource+0x16c>
 8007518:	2b20      	cmp	r3, #32
 800751a:	d060      	beq.n	80075de <HAL_TIM_ConfigClockSource+0x15a>
 800751c:	2b20      	cmp	r3, #32
 800751e:	d867      	bhi.n	80075f0 <HAL_TIM_ConfigClockSource+0x16c>
 8007520:	2b00      	cmp	r3, #0
 8007522:	d05c      	beq.n	80075de <HAL_TIM_ConfigClockSource+0x15a>
 8007524:	2b10      	cmp	r3, #16
 8007526:	d05a      	beq.n	80075de <HAL_TIM_ConfigClockSource+0x15a>
 8007528:	e062      	b.n	80075f0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6818      	ldr	r0, [r3, #0]
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	6899      	ldr	r1, [r3, #8]
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	685a      	ldr	r2, [r3, #4]
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	68db      	ldr	r3, [r3, #12]
 800753a:	f000 faf1 	bl	8007b20 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	689b      	ldr	r3, [r3, #8]
 8007544:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007546:	68bb      	ldr	r3, [r7, #8]
 8007548:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800754c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	68ba      	ldr	r2, [r7, #8]
 8007554:	609a      	str	r2, [r3, #8]
      break;
 8007556:	e04f      	b.n	80075f8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6818      	ldr	r0, [r3, #0]
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	6899      	ldr	r1, [r3, #8]
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	685a      	ldr	r2, [r3, #4]
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	68db      	ldr	r3, [r3, #12]
 8007568:	f000 fada 	bl	8007b20 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	689a      	ldr	r2, [r3, #8]
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800757a:	609a      	str	r2, [r3, #8]
      break;
 800757c:	e03c      	b.n	80075f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6818      	ldr	r0, [r3, #0]
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	6859      	ldr	r1, [r3, #4]
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	68db      	ldr	r3, [r3, #12]
 800758a:	461a      	mov	r2, r3
 800758c:	f000 fa4e 	bl	8007a2c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	2150      	movs	r1, #80	; 0x50
 8007596:	4618      	mov	r0, r3
 8007598:	f000 faa7 	bl	8007aea <TIM_ITRx_SetConfig>
      break;
 800759c:	e02c      	b.n	80075f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6818      	ldr	r0, [r3, #0]
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	6859      	ldr	r1, [r3, #4]
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	68db      	ldr	r3, [r3, #12]
 80075aa:	461a      	mov	r2, r3
 80075ac:	f000 fa6d 	bl	8007a8a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	2160      	movs	r1, #96	; 0x60
 80075b6:	4618      	mov	r0, r3
 80075b8:	f000 fa97 	bl	8007aea <TIM_ITRx_SetConfig>
      break;
 80075bc:	e01c      	b.n	80075f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6818      	ldr	r0, [r3, #0]
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	6859      	ldr	r1, [r3, #4]
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	68db      	ldr	r3, [r3, #12]
 80075ca:	461a      	mov	r2, r3
 80075cc:	f000 fa2e 	bl	8007a2c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	2140      	movs	r1, #64	; 0x40
 80075d6:	4618      	mov	r0, r3
 80075d8:	f000 fa87 	bl	8007aea <TIM_ITRx_SetConfig>
      break;
 80075dc:	e00c      	b.n	80075f8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681a      	ldr	r2, [r3, #0]
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4619      	mov	r1, r3
 80075e8:	4610      	mov	r0, r2
 80075ea:	f000 fa7e 	bl	8007aea <TIM_ITRx_SetConfig>
      break;
 80075ee:	e003      	b.n	80075f8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80075f0:	2301      	movs	r3, #1
 80075f2:	73fb      	strb	r3, [r7, #15]
      break;
 80075f4:	e000      	b.n	80075f8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80075f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2201      	movs	r2, #1
 80075fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2200      	movs	r2, #0
 8007604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007608:	7bfb      	ldrb	r3, [r7, #15]
}
 800760a:	4618      	mov	r0, r3
 800760c:	3710      	adds	r7, #16
 800760e:	46bd      	mov	sp, r7
 8007610:	bd80      	pop	{r7, pc}
	...

08007614 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007614:	b480      	push	{r7}
 8007616:	b085      	sub	sp, #20
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
 800761c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	4a34      	ldr	r2, [pc, #208]	; (80076f8 <TIM_Base_SetConfig+0xe4>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d00f      	beq.n	800764c <TIM_Base_SetConfig+0x38>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007632:	d00b      	beq.n	800764c <TIM_Base_SetConfig+0x38>
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	4a31      	ldr	r2, [pc, #196]	; (80076fc <TIM_Base_SetConfig+0xe8>)
 8007638:	4293      	cmp	r3, r2
 800763a:	d007      	beq.n	800764c <TIM_Base_SetConfig+0x38>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	4a30      	ldr	r2, [pc, #192]	; (8007700 <TIM_Base_SetConfig+0xec>)
 8007640:	4293      	cmp	r3, r2
 8007642:	d003      	beq.n	800764c <TIM_Base_SetConfig+0x38>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	4a2f      	ldr	r2, [pc, #188]	; (8007704 <TIM_Base_SetConfig+0xf0>)
 8007648:	4293      	cmp	r3, r2
 800764a:	d108      	bne.n	800765e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007652:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	685b      	ldr	r3, [r3, #4]
 8007658:	68fa      	ldr	r2, [r7, #12]
 800765a:	4313      	orrs	r3, r2
 800765c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	4a25      	ldr	r2, [pc, #148]	; (80076f8 <TIM_Base_SetConfig+0xe4>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d01b      	beq.n	800769e <TIM_Base_SetConfig+0x8a>
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800766c:	d017      	beq.n	800769e <TIM_Base_SetConfig+0x8a>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	4a22      	ldr	r2, [pc, #136]	; (80076fc <TIM_Base_SetConfig+0xe8>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d013      	beq.n	800769e <TIM_Base_SetConfig+0x8a>
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	4a21      	ldr	r2, [pc, #132]	; (8007700 <TIM_Base_SetConfig+0xec>)
 800767a:	4293      	cmp	r3, r2
 800767c:	d00f      	beq.n	800769e <TIM_Base_SetConfig+0x8a>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	4a20      	ldr	r2, [pc, #128]	; (8007704 <TIM_Base_SetConfig+0xf0>)
 8007682:	4293      	cmp	r3, r2
 8007684:	d00b      	beq.n	800769e <TIM_Base_SetConfig+0x8a>
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	4a1f      	ldr	r2, [pc, #124]	; (8007708 <TIM_Base_SetConfig+0xf4>)
 800768a:	4293      	cmp	r3, r2
 800768c:	d007      	beq.n	800769e <TIM_Base_SetConfig+0x8a>
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	4a1e      	ldr	r2, [pc, #120]	; (800770c <TIM_Base_SetConfig+0xf8>)
 8007692:	4293      	cmp	r3, r2
 8007694:	d003      	beq.n	800769e <TIM_Base_SetConfig+0x8a>
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	4a1d      	ldr	r2, [pc, #116]	; (8007710 <TIM_Base_SetConfig+0xfc>)
 800769a:	4293      	cmp	r3, r2
 800769c:	d108      	bne.n	80076b0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80076a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	68db      	ldr	r3, [r3, #12]
 80076aa:	68fa      	ldr	r2, [r7, #12]
 80076ac:	4313      	orrs	r3, r2
 80076ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	695b      	ldr	r3, [r3, #20]
 80076ba:	4313      	orrs	r3, r2
 80076bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	68fa      	ldr	r2, [r7, #12]
 80076c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	689a      	ldr	r2, [r3, #8]
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	681a      	ldr	r2, [r3, #0]
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	4a08      	ldr	r2, [pc, #32]	; (80076f8 <TIM_Base_SetConfig+0xe4>)
 80076d8:	4293      	cmp	r3, r2
 80076da:	d103      	bne.n	80076e4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	691a      	ldr	r2, [r3, #16]
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2201      	movs	r2, #1
 80076e8:	615a      	str	r2, [r3, #20]
}
 80076ea:	bf00      	nop
 80076ec:	3714      	adds	r7, #20
 80076ee:	46bd      	mov	sp, r7
 80076f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f4:	4770      	bx	lr
 80076f6:	bf00      	nop
 80076f8:	40010000 	.word	0x40010000
 80076fc:	40000400 	.word	0x40000400
 8007700:	40000800 	.word	0x40000800
 8007704:	40000c00 	.word	0x40000c00
 8007708:	40014000 	.word	0x40014000
 800770c:	40014400 	.word	0x40014400
 8007710:	40014800 	.word	0x40014800

08007714 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007714:	b480      	push	{r7}
 8007716:	b087      	sub	sp, #28
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
 800771c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6a1b      	ldr	r3, [r3, #32]
 8007722:	f023 0201 	bic.w	r2, r3, #1
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6a1b      	ldr	r3, [r3, #32]
 800772e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	685b      	ldr	r3, [r3, #4]
 8007734:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	699b      	ldr	r3, [r3, #24]
 800773a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007742:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	f023 0303 	bic.w	r3, r3, #3
 800774a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	68fa      	ldr	r2, [r7, #12]
 8007752:	4313      	orrs	r3, r2
 8007754:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007756:	697b      	ldr	r3, [r7, #20]
 8007758:	f023 0302 	bic.w	r3, r3, #2
 800775c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	689b      	ldr	r3, [r3, #8]
 8007762:	697a      	ldr	r2, [r7, #20]
 8007764:	4313      	orrs	r3, r2
 8007766:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	4a1c      	ldr	r2, [pc, #112]	; (80077dc <TIM_OC1_SetConfig+0xc8>)
 800776c:	4293      	cmp	r3, r2
 800776e:	d10c      	bne.n	800778a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007770:	697b      	ldr	r3, [r7, #20]
 8007772:	f023 0308 	bic.w	r3, r3, #8
 8007776:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	68db      	ldr	r3, [r3, #12]
 800777c:	697a      	ldr	r2, [r7, #20]
 800777e:	4313      	orrs	r3, r2
 8007780:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	f023 0304 	bic.w	r3, r3, #4
 8007788:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	4a13      	ldr	r2, [pc, #76]	; (80077dc <TIM_OC1_SetConfig+0xc8>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d111      	bne.n	80077b6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007792:	693b      	ldr	r3, [r7, #16]
 8007794:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007798:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800779a:	693b      	ldr	r3, [r7, #16]
 800779c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80077a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	695b      	ldr	r3, [r3, #20]
 80077a6:	693a      	ldr	r2, [r7, #16]
 80077a8:	4313      	orrs	r3, r2
 80077aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	699b      	ldr	r3, [r3, #24]
 80077b0:	693a      	ldr	r2, [r7, #16]
 80077b2:	4313      	orrs	r3, r2
 80077b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	693a      	ldr	r2, [r7, #16]
 80077ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	68fa      	ldr	r2, [r7, #12]
 80077c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	685a      	ldr	r2, [r3, #4]
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	697a      	ldr	r2, [r7, #20]
 80077ce:	621a      	str	r2, [r3, #32]
}
 80077d0:	bf00      	nop
 80077d2:	371c      	adds	r7, #28
 80077d4:	46bd      	mov	sp, r7
 80077d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077da:	4770      	bx	lr
 80077dc:	40010000 	.word	0x40010000

080077e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80077e0:	b480      	push	{r7}
 80077e2:	b087      	sub	sp, #28
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
 80077e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6a1b      	ldr	r3, [r3, #32]
 80077ee:	f023 0210 	bic.w	r2, r3, #16
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6a1b      	ldr	r3, [r3, #32]
 80077fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	685b      	ldr	r3, [r3, #4]
 8007800:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	699b      	ldr	r3, [r3, #24]
 8007806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800780e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007816:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	021b      	lsls	r3, r3, #8
 800781e:	68fa      	ldr	r2, [r7, #12]
 8007820:	4313      	orrs	r3, r2
 8007822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007824:	697b      	ldr	r3, [r7, #20]
 8007826:	f023 0320 	bic.w	r3, r3, #32
 800782a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	689b      	ldr	r3, [r3, #8]
 8007830:	011b      	lsls	r3, r3, #4
 8007832:	697a      	ldr	r2, [r7, #20]
 8007834:	4313      	orrs	r3, r2
 8007836:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	4a1e      	ldr	r2, [pc, #120]	; (80078b4 <TIM_OC2_SetConfig+0xd4>)
 800783c:	4293      	cmp	r3, r2
 800783e:	d10d      	bne.n	800785c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007840:	697b      	ldr	r3, [r7, #20]
 8007842:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007846:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	68db      	ldr	r3, [r3, #12]
 800784c:	011b      	lsls	r3, r3, #4
 800784e:	697a      	ldr	r2, [r7, #20]
 8007850:	4313      	orrs	r3, r2
 8007852:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007854:	697b      	ldr	r3, [r7, #20]
 8007856:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800785a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	4a15      	ldr	r2, [pc, #84]	; (80078b4 <TIM_OC2_SetConfig+0xd4>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d113      	bne.n	800788c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007864:	693b      	ldr	r3, [r7, #16]
 8007866:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800786a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800786c:	693b      	ldr	r3, [r7, #16]
 800786e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007872:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	695b      	ldr	r3, [r3, #20]
 8007878:	009b      	lsls	r3, r3, #2
 800787a:	693a      	ldr	r2, [r7, #16]
 800787c:	4313      	orrs	r3, r2
 800787e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	699b      	ldr	r3, [r3, #24]
 8007884:	009b      	lsls	r3, r3, #2
 8007886:	693a      	ldr	r2, [r7, #16]
 8007888:	4313      	orrs	r3, r2
 800788a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	693a      	ldr	r2, [r7, #16]
 8007890:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	68fa      	ldr	r2, [r7, #12]
 8007896:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	685a      	ldr	r2, [r3, #4]
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	697a      	ldr	r2, [r7, #20]
 80078a4:	621a      	str	r2, [r3, #32]
}
 80078a6:	bf00      	nop
 80078a8:	371c      	adds	r7, #28
 80078aa:	46bd      	mov	sp, r7
 80078ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b0:	4770      	bx	lr
 80078b2:	bf00      	nop
 80078b4:	40010000 	.word	0x40010000

080078b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80078b8:	b480      	push	{r7}
 80078ba:	b087      	sub	sp, #28
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
 80078c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6a1b      	ldr	r3, [r3, #32]
 80078c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6a1b      	ldr	r3, [r3, #32]
 80078d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	685b      	ldr	r3, [r3, #4]
 80078d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	69db      	ldr	r3, [r3, #28]
 80078de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	f023 0303 	bic.w	r3, r3, #3
 80078ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	68fa      	ldr	r2, [r7, #12]
 80078f6:	4313      	orrs	r3, r2
 80078f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80078fa:	697b      	ldr	r3, [r7, #20]
 80078fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007900:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	689b      	ldr	r3, [r3, #8]
 8007906:	021b      	lsls	r3, r3, #8
 8007908:	697a      	ldr	r2, [r7, #20]
 800790a:	4313      	orrs	r3, r2
 800790c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	4a1d      	ldr	r2, [pc, #116]	; (8007988 <TIM_OC3_SetConfig+0xd0>)
 8007912:	4293      	cmp	r3, r2
 8007914:	d10d      	bne.n	8007932 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007916:	697b      	ldr	r3, [r7, #20]
 8007918:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800791c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	68db      	ldr	r3, [r3, #12]
 8007922:	021b      	lsls	r3, r3, #8
 8007924:	697a      	ldr	r2, [r7, #20]
 8007926:	4313      	orrs	r3, r2
 8007928:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800792a:	697b      	ldr	r3, [r7, #20]
 800792c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007930:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	4a14      	ldr	r2, [pc, #80]	; (8007988 <TIM_OC3_SetConfig+0xd0>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d113      	bne.n	8007962 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800793a:	693b      	ldr	r3, [r7, #16]
 800793c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007940:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007942:	693b      	ldr	r3, [r7, #16]
 8007944:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007948:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	695b      	ldr	r3, [r3, #20]
 800794e:	011b      	lsls	r3, r3, #4
 8007950:	693a      	ldr	r2, [r7, #16]
 8007952:	4313      	orrs	r3, r2
 8007954:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	699b      	ldr	r3, [r3, #24]
 800795a:	011b      	lsls	r3, r3, #4
 800795c:	693a      	ldr	r2, [r7, #16]
 800795e:	4313      	orrs	r3, r2
 8007960:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	693a      	ldr	r2, [r7, #16]
 8007966:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	68fa      	ldr	r2, [r7, #12]
 800796c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	685a      	ldr	r2, [r3, #4]
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	697a      	ldr	r2, [r7, #20]
 800797a:	621a      	str	r2, [r3, #32]
}
 800797c:	bf00      	nop
 800797e:	371c      	adds	r7, #28
 8007980:	46bd      	mov	sp, r7
 8007982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007986:	4770      	bx	lr
 8007988:	40010000 	.word	0x40010000

0800798c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800798c:	b480      	push	{r7}
 800798e:	b087      	sub	sp, #28
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
 8007994:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6a1b      	ldr	r3, [r3, #32]
 800799a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6a1b      	ldr	r3, [r3, #32]
 80079a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	685b      	ldr	r3, [r3, #4]
 80079ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	69db      	ldr	r3, [r3, #28]
 80079b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	021b      	lsls	r3, r3, #8
 80079ca:	68fa      	ldr	r2, [r7, #12]
 80079cc:	4313      	orrs	r3, r2
 80079ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80079d0:	693b      	ldr	r3, [r7, #16]
 80079d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80079d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	689b      	ldr	r3, [r3, #8]
 80079dc:	031b      	lsls	r3, r3, #12
 80079de:	693a      	ldr	r2, [r7, #16]
 80079e0:	4313      	orrs	r3, r2
 80079e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	4a10      	ldr	r2, [pc, #64]	; (8007a28 <TIM_OC4_SetConfig+0x9c>)
 80079e8:	4293      	cmp	r3, r2
 80079ea:	d109      	bne.n	8007a00 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80079ec:	697b      	ldr	r3, [r7, #20]
 80079ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80079f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	695b      	ldr	r3, [r3, #20]
 80079f8:	019b      	lsls	r3, r3, #6
 80079fa:	697a      	ldr	r2, [r7, #20]
 80079fc:	4313      	orrs	r3, r2
 80079fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	697a      	ldr	r2, [r7, #20]
 8007a04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	68fa      	ldr	r2, [r7, #12]
 8007a0a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	685a      	ldr	r2, [r3, #4]
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	693a      	ldr	r2, [r7, #16]
 8007a18:	621a      	str	r2, [r3, #32]
}
 8007a1a:	bf00      	nop
 8007a1c:	371c      	adds	r7, #28
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a24:	4770      	bx	lr
 8007a26:	bf00      	nop
 8007a28:	40010000 	.word	0x40010000

08007a2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	b087      	sub	sp, #28
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	60f8      	str	r0, [r7, #12]
 8007a34:	60b9      	str	r1, [r7, #8]
 8007a36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	6a1b      	ldr	r3, [r3, #32]
 8007a3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	6a1b      	ldr	r3, [r3, #32]
 8007a42:	f023 0201 	bic.w	r2, r3, #1
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	699b      	ldr	r3, [r3, #24]
 8007a4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007a50:	693b      	ldr	r3, [r7, #16]
 8007a52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007a56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	011b      	lsls	r3, r3, #4
 8007a5c:	693a      	ldr	r2, [r7, #16]
 8007a5e:	4313      	orrs	r3, r2
 8007a60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007a62:	697b      	ldr	r3, [r7, #20]
 8007a64:	f023 030a 	bic.w	r3, r3, #10
 8007a68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007a6a:	697a      	ldr	r2, [r7, #20]
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	4313      	orrs	r3, r2
 8007a70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	693a      	ldr	r2, [r7, #16]
 8007a76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	697a      	ldr	r2, [r7, #20]
 8007a7c:	621a      	str	r2, [r3, #32]
}
 8007a7e:	bf00      	nop
 8007a80:	371c      	adds	r7, #28
 8007a82:	46bd      	mov	sp, r7
 8007a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a88:	4770      	bx	lr

08007a8a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007a8a:	b480      	push	{r7}
 8007a8c:	b087      	sub	sp, #28
 8007a8e:	af00      	add	r7, sp, #0
 8007a90:	60f8      	str	r0, [r7, #12]
 8007a92:	60b9      	str	r1, [r7, #8]
 8007a94:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	6a1b      	ldr	r3, [r3, #32]
 8007a9a:	f023 0210 	bic.w	r2, r3, #16
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	699b      	ldr	r3, [r3, #24]
 8007aa6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	6a1b      	ldr	r3, [r3, #32]
 8007aac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007aae:	697b      	ldr	r3, [r7, #20]
 8007ab0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007ab4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	031b      	lsls	r3, r3, #12
 8007aba:	697a      	ldr	r2, [r7, #20]
 8007abc:	4313      	orrs	r3, r2
 8007abe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007ac0:	693b      	ldr	r3, [r7, #16]
 8007ac2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007ac6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007ac8:	68bb      	ldr	r3, [r7, #8]
 8007aca:	011b      	lsls	r3, r3, #4
 8007acc:	693a      	ldr	r2, [r7, #16]
 8007ace:	4313      	orrs	r3, r2
 8007ad0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	697a      	ldr	r2, [r7, #20]
 8007ad6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	693a      	ldr	r2, [r7, #16]
 8007adc:	621a      	str	r2, [r3, #32]
}
 8007ade:	bf00      	nop
 8007ae0:	371c      	adds	r7, #28
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae8:	4770      	bx	lr

08007aea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007aea:	b480      	push	{r7}
 8007aec:	b085      	sub	sp, #20
 8007aee:	af00      	add	r7, sp, #0
 8007af0:	6078      	str	r0, [r7, #4]
 8007af2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	689b      	ldr	r3, [r3, #8]
 8007af8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b00:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007b02:	683a      	ldr	r2, [r7, #0]
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	4313      	orrs	r3, r2
 8007b08:	f043 0307 	orr.w	r3, r3, #7
 8007b0c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	68fa      	ldr	r2, [r7, #12]
 8007b12:	609a      	str	r2, [r3, #8]
}
 8007b14:	bf00      	nop
 8007b16:	3714      	adds	r7, #20
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1e:	4770      	bx	lr

08007b20 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007b20:	b480      	push	{r7}
 8007b22:	b087      	sub	sp, #28
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	60f8      	str	r0, [r7, #12]
 8007b28:	60b9      	str	r1, [r7, #8]
 8007b2a:	607a      	str	r2, [r7, #4]
 8007b2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	689b      	ldr	r3, [r3, #8]
 8007b32:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007b34:	697b      	ldr	r3, [r7, #20]
 8007b36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007b3a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	021a      	lsls	r2, r3, #8
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	431a      	orrs	r2, r3
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	4313      	orrs	r3, r2
 8007b48:	697a      	ldr	r2, [r7, #20]
 8007b4a:	4313      	orrs	r3, r2
 8007b4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	697a      	ldr	r2, [r7, #20]
 8007b52:	609a      	str	r2, [r3, #8]
}
 8007b54:	bf00      	nop
 8007b56:	371c      	adds	r7, #28
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5e:	4770      	bx	lr

08007b60 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007b60:	b480      	push	{r7}
 8007b62:	b087      	sub	sp, #28
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	60f8      	str	r0, [r7, #12]
 8007b68:	60b9      	str	r1, [r7, #8]
 8007b6a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	f003 031f 	and.w	r3, r3, #31
 8007b72:	2201      	movs	r2, #1
 8007b74:	fa02 f303 	lsl.w	r3, r2, r3
 8007b78:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	6a1a      	ldr	r2, [r3, #32]
 8007b7e:	697b      	ldr	r3, [r7, #20]
 8007b80:	43db      	mvns	r3, r3
 8007b82:	401a      	ands	r2, r3
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	6a1a      	ldr	r2, [r3, #32]
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	f003 031f 	and.w	r3, r3, #31
 8007b92:	6879      	ldr	r1, [r7, #4]
 8007b94:	fa01 f303 	lsl.w	r3, r1, r3
 8007b98:	431a      	orrs	r2, r3
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	621a      	str	r2, [r3, #32]
}
 8007b9e:	bf00      	nop
 8007ba0:	371c      	adds	r7, #28
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba8:	4770      	bx	lr
	...

08007bac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007bac:	b480      	push	{r7}
 8007bae:	b085      	sub	sp, #20
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
 8007bb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007bbc:	2b01      	cmp	r3, #1
 8007bbe:	d101      	bne.n	8007bc4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007bc0:	2302      	movs	r3, #2
 8007bc2:	e050      	b.n	8007c66 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2202      	movs	r2, #2
 8007bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	685b      	ldr	r3, [r3, #4]
 8007bda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	689b      	ldr	r3, [r3, #8]
 8007be2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	68fa      	ldr	r2, [r7, #12]
 8007bf2:	4313      	orrs	r3, r2
 8007bf4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	68fa      	ldr	r2, [r7, #12]
 8007bfc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	4a1c      	ldr	r2, [pc, #112]	; (8007c74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007c04:	4293      	cmp	r3, r2
 8007c06:	d018      	beq.n	8007c3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c10:	d013      	beq.n	8007c3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	4a18      	ldr	r2, [pc, #96]	; (8007c78 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d00e      	beq.n	8007c3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	4a16      	ldr	r2, [pc, #88]	; (8007c7c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d009      	beq.n	8007c3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	4a15      	ldr	r2, [pc, #84]	; (8007c80 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007c2c:	4293      	cmp	r3, r2
 8007c2e:	d004      	beq.n	8007c3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	4a13      	ldr	r2, [pc, #76]	; (8007c84 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d10c      	bne.n	8007c54 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c40:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	685b      	ldr	r3, [r3, #4]
 8007c46:	68ba      	ldr	r2, [r7, #8]
 8007c48:	4313      	orrs	r3, r2
 8007c4a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	68ba      	ldr	r2, [r7, #8]
 8007c52:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2201      	movs	r2, #1
 8007c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2200      	movs	r2, #0
 8007c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007c64:	2300      	movs	r3, #0
}
 8007c66:	4618      	mov	r0, r3
 8007c68:	3714      	adds	r7, #20
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c70:	4770      	bx	lr
 8007c72:	bf00      	nop
 8007c74:	40010000 	.word	0x40010000
 8007c78:	40000400 	.word	0x40000400
 8007c7c:	40000800 	.word	0x40000800
 8007c80:	40000c00 	.word	0x40000c00
 8007c84:	40014000 	.word	0x40014000

08007c88 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b082      	sub	sp, #8
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d101      	bne.n	8007c9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007c96:	2301      	movs	r3, #1
 8007c98:	e03f      	b.n	8007d1a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ca0:	b2db      	uxtb	r3, r3
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d106      	bne.n	8007cb4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	f7fa fa1c 	bl	80020ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2224      	movs	r2, #36	; 0x24
 8007cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	68da      	ldr	r2, [r3, #12]
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007cca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f000 ff4d 	bl	8008b6c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	691a      	ldr	r2, [r3, #16]
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007ce0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	695a      	ldr	r2, [r3, #20]
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007cf0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	68da      	ldr	r2, [r3, #12]
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007d00:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2200      	movs	r2, #0
 8007d06:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2220      	movs	r2, #32
 8007d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2220      	movs	r2, #32
 8007d14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007d18:	2300      	movs	r3, #0
}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	3708      	adds	r7, #8
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}
	...

08007d24 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b08c      	sub	sp, #48	; 0x30
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	60f8      	str	r0, [r7, #12]
 8007d2c:	60b9      	str	r1, [r7, #8]
 8007d2e:	4613      	mov	r3, r2
 8007d30:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d38:	b2db      	uxtb	r3, r3
 8007d3a:	2b20      	cmp	r3, #32
 8007d3c:	d165      	bne.n	8007e0a <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d3e:	68bb      	ldr	r3, [r7, #8]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d002      	beq.n	8007d4a <HAL_UART_Transmit_DMA+0x26>
 8007d44:	88fb      	ldrh	r3, [r7, #6]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d101      	bne.n	8007d4e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8007d4a:	2301      	movs	r3, #1
 8007d4c:	e05e      	b.n	8007e0c <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d54:	2b01      	cmp	r3, #1
 8007d56:	d101      	bne.n	8007d5c <HAL_UART_Transmit_DMA+0x38>
 8007d58:	2302      	movs	r3, #2
 8007d5a:	e057      	b.n	8007e0c <HAL_UART_Transmit_DMA+0xe8>
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	2201      	movs	r2, #1
 8007d60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8007d64:	68ba      	ldr	r2, [r7, #8]
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	88fa      	ldrh	r2, [r7, #6]
 8007d6e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	88fa      	ldrh	r2, [r7, #6]
 8007d74:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	2200      	movs	r2, #0
 8007d7a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	2221      	movs	r2, #33	; 0x21
 8007d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d88:	4a22      	ldr	r2, [pc, #136]	; (8007e14 <HAL_UART_Transmit_DMA+0xf0>)
 8007d8a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d90:	4a21      	ldr	r2, [pc, #132]	; (8007e18 <HAL_UART_Transmit_DMA+0xf4>)
 8007d92:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d98:	4a20      	ldr	r2, [pc, #128]	; (8007e1c <HAL_UART_Transmit_DMA+0xf8>)
 8007d9a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007da0:	2200      	movs	r2, #0
 8007da2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8007da4:	f107 0308 	add.w	r3, r7, #8
 8007da8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8007dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007db0:	6819      	ldr	r1, [r3, #0]
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	3304      	adds	r3, #4
 8007db8:	461a      	mov	r2, r3
 8007dba:	88fb      	ldrh	r3, [r7, #6]
 8007dbc:	f7fb fb3e 	bl	800343c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007dc8:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	2200      	movs	r2, #0
 8007dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	3314      	adds	r3, #20
 8007dd8:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dda:	69bb      	ldr	r3, [r7, #24]
 8007ddc:	e853 3f00 	ldrex	r3, [r3]
 8007de0:	617b      	str	r3, [r7, #20]
   return(result);
 8007de2:	697b      	ldr	r3, [r7, #20]
 8007de4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007de8:	62bb      	str	r3, [r7, #40]	; 0x28
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	3314      	adds	r3, #20
 8007df0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007df2:	627a      	str	r2, [r7, #36]	; 0x24
 8007df4:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007df6:	6a39      	ldr	r1, [r7, #32]
 8007df8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007dfa:	e841 2300 	strex	r3, r2, [r1]
 8007dfe:	61fb      	str	r3, [r7, #28]
   return(result);
 8007e00:	69fb      	ldr	r3, [r7, #28]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d1e5      	bne.n	8007dd2 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8007e06:	2300      	movs	r3, #0
 8007e08:	e000      	b.n	8007e0c <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8007e0a:	2302      	movs	r3, #2
  }
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	3730      	adds	r7, #48	; 0x30
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bd80      	pop	{r7, pc}
 8007e14:	08008405 	.word	0x08008405
 8007e18:	0800849f 	.word	0x0800849f
 8007e1c:	08008617 	.word	0x08008617

08007e20 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b084      	sub	sp, #16
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	60f8      	str	r0, [r7, #12]
 8007e28:	60b9      	str	r1, [r7, #8]
 8007e2a:	4613      	mov	r3, r2
 8007e2c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007e34:	b2db      	uxtb	r3, r3
 8007e36:	2b20      	cmp	r3, #32
 8007e38:	d11d      	bne.n	8007e76 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e3a:	68bb      	ldr	r3, [r7, #8]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d002      	beq.n	8007e46 <HAL_UART_Receive_DMA+0x26>
 8007e40:	88fb      	ldrh	r3, [r7, #6]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d101      	bne.n	8007e4a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8007e46:	2301      	movs	r3, #1
 8007e48:	e016      	b.n	8007e78 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e50:	2b01      	cmp	r3, #1
 8007e52:	d101      	bne.n	8007e58 <HAL_UART_Receive_DMA+0x38>
 8007e54:	2302      	movs	r3, #2
 8007e56:	e00f      	b.n	8007e78 <HAL_UART_Receive_DMA+0x58>
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	2201      	movs	r2, #1
 8007e5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	2200      	movs	r2, #0
 8007e64:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007e66:	88fb      	ldrh	r3, [r7, #6]
 8007e68:	461a      	mov	r2, r3
 8007e6a:	68b9      	ldr	r1, [r7, #8]
 8007e6c:	68f8      	ldr	r0, [r7, #12]
 8007e6e:	f000 fc1d 	bl	80086ac <UART_Start_Receive_DMA>
 8007e72:	4603      	mov	r3, r0
 8007e74:	e000      	b.n	8007e78 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007e76:	2302      	movs	r3, #2
  }
}
 8007e78:	4618      	mov	r0, r3
 8007e7a:	3710      	adds	r7, #16
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	bd80      	pop	{r7, pc}

08007e80 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b0ba      	sub	sp, #232	; 0xe8
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	68db      	ldr	r3, [r3, #12]
 8007e98:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	695b      	ldr	r3, [r3, #20]
 8007ea2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007eac:	2300      	movs	r3, #0
 8007eae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007eb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007eb6:	f003 030f 	and.w	r3, r3, #15
 8007eba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007ebe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d10f      	bne.n	8007ee6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007ec6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007eca:	f003 0320 	and.w	r3, r3, #32
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d009      	beq.n	8007ee6 <HAL_UART_IRQHandler+0x66>
 8007ed2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ed6:	f003 0320 	and.w	r3, r3, #32
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d003      	beq.n	8007ee6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	f000 fd89 	bl	80089f6 <UART_Receive_IT>
      return;
 8007ee4:	e256      	b.n	8008394 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007ee6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	f000 80de 	beq.w	80080ac <HAL_UART_IRQHandler+0x22c>
 8007ef0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ef4:	f003 0301 	and.w	r3, r3, #1
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d106      	bne.n	8007f0a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007efc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f00:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	f000 80d1 	beq.w	80080ac <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007f0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f0e:	f003 0301 	and.w	r3, r3, #1
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d00b      	beq.n	8007f2e <HAL_UART_IRQHandler+0xae>
 8007f16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d005      	beq.n	8007f2e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f26:	f043 0201 	orr.w	r2, r3, #1
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007f2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f32:	f003 0304 	and.w	r3, r3, #4
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d00b      	beq.n	8007f52 <HAL_UART_IRQHandler+0xd2>
 8007f3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f3e:	f003 0301 	and.w	r3, r3, #1
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d005      	beq.n	8007f52 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f4a:	f043 0202 	orr.w	r2, r3, #2
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007f52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f56:	f003 0302 	and.w	r3, r3, #2
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d00b      	beq.n	8007f76 <HAL_UART_IRQHandler+0xf6>
 8007f5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f62:	f003 0301 	and.w	r3, r3, #1
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d005      	beq.n	8007f76 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f6e:	f043 0204 	orr.w	r2, r3, #4
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007f76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f7a:	f003 0308 	and.w	r3, r3, #8
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d011      	beq.n	8007fa6 <HAL_UART_IRQHandler+0x126>
 8007f82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f86:	f003 0320 	and.w	r3, r3, #32
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d105      	bne.n	8007f9a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007f8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f92:	f003 0301 	and.w	r3, r3, #1
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d005      	beq.n	8007fa6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f9e:	f043 0208 	orr.w	r2, r3, #8
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	f000 81ed 	beq.w	800838a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007fb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fb4:	f003 0320 	and.w	r3, r3, #32
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d008      	beq.n	8007fce <HAL_UART_IRQHandler+0x14e>
 8007fbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007fc0:	f003 0320 	and.w	r3, r3, #32
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d002      	beq.n	8007fce <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007fc8:	6878      	ldr	r0, [r7, #4]
 8007fca:	f000 fd14 	bl	80089f6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	695b      	ldr	r3, [r3, #20]
 8007fd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fd8:	2b40      	cmp	r3, #64	; 0x40
 8007fda:	bf0c      	ite	eq
 8007fdc:	2301      	moveq	r3, #1
 8007fde:	2300      	movne	r3, #0
 8007fe0:	b2db      	uxtb	r3, r3
 8007fe2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fea:	f003 0308 	and.w	r3, r3, #8
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d103      	bne.n	8007ffa <HAL_UART_IRQHandler+0x17a>
 8007ff2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d04f      	beq.n	800809a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	f000 fc1c 	bl	8008838 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	695b      	ldr	r3, [r3, #20]
 8008006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800800a:	2b40      	cmp	r3, #64	; 0x40
 800800c:	d141      	bne.n	8008092 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	3314      	adds	r3, #20
 8008014:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008018:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800801c:	e853 3f00 	ldrex	r3, [r3]
 8008020:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008024:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008028:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800802c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	3314      	adds	r3, #20
 8008036:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800803a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800803e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008042:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008046:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800804a:	e841 2300 	strex	r3, r2, [r1]
 800804e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008052:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008056:	2b00      	cmp	r3, #0
 8008058:	d1d9      	bne.n	800800e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800805e:	2b00      	cmp	r3, #0
 8008060:	d013      	beq.n	800808a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008066:	4a7d      	ldr	r2, [pc, #500]	; (800825c <HAL_UART_IRQHandler+0x3dc>)
 8008068:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800806e:	4618      	mov	r0, r3
 8008070:	f7fb faac 	bl	80035cc <HAL_DMA_Abort_IT>
 8008074:	4603      	mov	r3, r0
 8008076:	2b00      	cmp	r3, #0
 8008078:	d016      	beq.n	80080a8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800807e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008080:	687a      	ldr	r2, [r7, #4]
 8008082:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008084:	4610      	mov	r0, r2
 8008086:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008088:	e00e      	b.n	80080a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f000 f9a4 	bl	80083d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008090:	e00a      	b.n	80080a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	f000 f9a0 	bl	80083d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008098:	e006      	b.n	80080a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f000 f99c 	bl	80083d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2200      	movs	r2, #0
 80080a4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80080a6:	e170      	b.n	800838a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080a8:	bf00      	nop
    return;
 80080aa:	e16e      	b.n	800838a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080b0:	2b01      	cmp	r3, #1
 80080b2:	f040 814a 	bne.w	800834a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80080b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080ba:	f003 0310 	and.w	r3, r3, #16
 80080be:	2b00      	cmp	r3, #0
 80080c0:	f000 8143 	beq.w	800834a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80080c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080c8:	f003 0310 	and.w	r3, r3, #16
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	f000 813c 	beq.w	800834a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80080d2:	2300      	movs	r3, #0
 80080d4:	60bb      	str	r3, [r7, #8]
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	60bb      	str	r3, [r7, #8]
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	685b      	ldr	r3, [r3, #4]
 80080e4:	60bb      	str	r3, [r7, #8]
 80080e6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	695b      	ldr	r3, [r3, #20]
 80080ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080f2:	2b40      	cmp	r3, #64	; 0x40
 80080f4:	f040 80b4 	bne.w	8008260 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	685b      	ldr	r3, [r3, #4]
 8008100:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008104:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008108:	2b00      	cmp	r3, #0
 800810a:	f000 8140 	beq.w	800838e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008112:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008116:	429a      	cmp	r2, r3
 8008118:	f080 8139 	bcs.w	800838e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008122:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008128:	69db      	ldr	r3, [r3, #28]
 800812a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800812e:	f000 8088 	beq.w	8008242 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	330c      	adds	r3, #12
 8008138:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800813c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008140:	e853 3f00 	ldrex	r3, [r3]
 8008144:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008148:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800814c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008150:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	330c      	adds	r3, #12
 800815a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800815e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008162:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008166:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800816a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800816e:	e841 2300 	strex	r3, r2, [r1]
 8008172:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008176:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800817a:	2b00      	cmp	r3, #0
 800817c:	d1d9      	bne.n	8008132 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	3314      	adds	r3, #20
 8008184:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008186:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008188:	e853 3f00 	ldrex	r3, [r3]
 800818c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800818e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008190:	f023 0301 	bic.w	r3, r3, #1
 8008194:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	3314      	adds	r3, #20
 800819e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80081a2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80081a6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081a8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80081aa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80081ae:	e841 2300 	strex	r3, r2, [r1]
 80081b2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80081b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d1e1      	bne.n	800817e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	3314      	adds	r3, #20
 80081c0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80081c4:	e853 3f00 	ldrex	r3, [r3]
 80081c8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80081ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80081cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80081d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	3314      	adds	r3, #20
 80081da:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80081de:	66fa      	str	r2, [r7, #108]	; 0x6c
 80081e0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081e2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80081e4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80081e6:	e841 2300 	strex	r3, r2, [r1]
 80081ea:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80081ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d1e3      	bne.n	80081ba <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2220      	movs	r2, #32
 80081f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2200      	movs	r2, #0
 80081fe:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	330c      	adds	r3, #12
 8008206:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008208:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800820a:	e853 3f00 	ldrex	r3, [r3]
 800820e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008210:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008212:	f023 0310 	bic.w	r3, r3, #16
 8008216:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	330c      	adds	r3, #12
 8008220:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008224:	65ba      	str	r2, [r7, #88]	; 0x58
 8008226:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008228:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800822a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800822c:	e841 2300 	strex	r3, r2, [r1]
 8008230:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008232:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008234:	2b00      	cmp	r3, #0
 8008236:	d1e3      	bne.n	8008200 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800823c:	4618      	mov	r0, r3
 800823e:	f7fb f955 	bl	80034ec <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800824a:	b29b      	uxth	r3, r3
 800824c:	1ad3      	subs	r3, r2, r3
 800824e:	b29b      	uxth	r3, r3
 8008250:	4619      	mov	r1, r3
 8008252:	6878      	ldr	r0, [r7, #4]
 8008254:	f000 f8ca 	bl	80083ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008258:	e099      	b.n	800838e <HAL_UART_IRQHandler+0x50e>
 800825a:	bf00      	nop
 800825c:	080088ff 	.word	0x080088ff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008268:	b29b      	uxth	r3, r3
 800826a:	1ad3      	subs	r3, r2, r3
 800826c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008274:	b29b      	uxth	r3, r3
 8008276:	2b00      	cmp	r3, #0
 8008278:	f000 808b 	beq.w	8008392 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800827c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008280:	2b00      	cmp	r3, #0
 8008282:	f000 8086 	beq.w	8008392 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	330c      	adds	r3, #12
 800828c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800828e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008290:	e853 3f00 	ldrex	r3, [r3]
 8008294:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008296:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008298:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800829c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	330c      	adds	r3, #12
 80082a6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80082aa:	647a      	str	r2, [r7, #68]	; 0x44
 80082ac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80082b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80082b2:	e841 2300 	strex	r3, r2, [r1]
 80082b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80082b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d1e3      	bne.n	8008286 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	3314      	adds	r3, #20
 80082c4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082c8:	e853 3f00 	ldrex	r3, [r3]
 80082cc:	623b      	str	r3, [r7, #32]
   return(result);
 80082ce:	6a3b      	ldr	r3, [r7, #32]
 80082d0:	f023 0301 	bic.w	r3, r3, #1
 80082d4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	3314      	adds	r3, #20
 80082de:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80082e2:	633a      	str	r2, [r7, #48]	; 0x30
 80082e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80082e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082ea:	e841 2300 	strex	r3, r2, [r1]
 80082ee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80082f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d1e3      	bne.n	80082be <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2220      	movs	r2, #32
 80082fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2200      	movs	r2, #0
 8008302:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	330c      	adds	r3, #12
 800830a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800830c:	693b      	ldr	r3, [r7, #16]
 800830e:	e853 3f00 	ldrex	r3, [r3]
 8008312:	60fb      	str	r3, [r7, #12]
   return(result);
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	f023 0310 	bic.w	r3, r3, #16
 800831a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	330c      	adds	r3, #12
 8008324:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008328:	61fa      	str	r2, [r7, #28]
 800832a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800832c:	69b9      	ldr	r1, [r7, #24]
 800832e:	69fa      	ldr	r2, [r7, #28]
 8008330:	e841 2300 	strex	r3, r2, [r1]
 8008334:	617b      	str	r3, [r7, #20]
   return(result);
 8008336:	697b      	ldr	r3, [r7, #20]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d1e3      	bne.n	8008304 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800833c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008340:	4619      	mov	r1, r3
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f000 f852 	bl	80083ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008348:	e023      	b.n	8008392 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800834a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800834e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008352:	2b00      	cmp	r3, #0
 8008354:	d009      	beq.n	800836a <HAL_UART_IRQHandler+0x4ea>
 8008356:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800835a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800835e:	2b00      	cmp	r3, #0
 8008360:	d003      	beq.n	800836a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	f000 fadf 	bl	8008926 <UART_Transmit_IT>
    return;
 8008368:	e014      	b.n	8008394 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800836a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800836e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008372:	2b00      	cmp	r3, #0
 8008374:	d00e      	beq.n	8008394 <HAL_UART_IRQHandler+0x514>
 8008376:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800837a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800837e:	2b00      	cmp	r3, #0
 8008380:	d008      	beq.n	8008394 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	f000 fb1f 	bl	80089c6 <UART_EndTransmit_IT>
    return;
 8008388:	e004      	b.n	8008394 <HAL_UART_IRQHandler+0x514>
    return;
 800838a:	bf00      	nop
 800838c:	e002      	b.n	8008394 <HAL_UART_IRQHandler+0x514>
      return;
 800838e:	bf00      	nop
 8008390:	e000      	b.n	8008394 <HAL_UART_IRQHandler+0x514>
      return;
 8008392:	bf00      	nop
  }
}
 8008394:	37e8      	adds	r7, #232	; 0xe8
 8008396:	46bd      	mov	sp, r7
 8008398:	bd80      	pop	{r7, pc}
 800839a:	bf00      	nop

0800839c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800839c:	b480      	push	{r7}
 800839e:	b083      	sub	sp, #12
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80083a4:	bf00      	nop
 80083a6:	370c      	adds	r7, #12
 80083a8:	46bd      	mov	sp, r7
 80083aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ae:	4770      	bx	lr

080083b0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80083b0:	b480      	push	{r7}
 80083b2:	b083      	sub	sp, #12
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80083b8:	bf00      	nop
 80083ba:	370c      	adds	r7, #12
 80083bc:	46bd      	mov	sp, r7
 80083be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c2:	4770      	bx	lr

080083c4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80083c4:	b480      	push	{r7}
 80083c6:	b083      	sub	sp, #12
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80083cc:	bf00      	nop
 80083ce:	370c      	adds	r7, #12
 80083d0:	46bd      	mov	sp, r7
 80083d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d6:	4770      	bx	lr

080083d8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80083d8:	b480      	push	{r7}
 80083da:	b083      	sub	sp, #12
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80083e0:	bf00      	nop
 80083e2:	370c      	adds	r7, #12
 80083e4:	46bd      	mov	sp, r7
 80083e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ea:	4770      	bx	lr

080083ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80083ec:	b480      	push	{r7}
 80083ee:	b083      	sub	sp, #12
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
 80083f4:	460b      	mov	r3, r1
 80083f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80083f8:	bf00      	nop
 80083fa:	370c      	adds	r7, #12
 80083fc:	46bd      	mov	sp, r7
 80083fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008402:	4770      	bx	lr

08008404 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b090      	sub	sp, #64	; 0x40
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008410:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800841c:	2b00      	cmp	r3, #0
 800841e:	d137      	bne.n	8008490 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8008420:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008422:	2200      	movs	r2, #0
 8008424:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008426:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	3314      	adds	r3, #20
 800842c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800842e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008430:	e853 3f00 	ldrex	r3, [r3]
 8008434:	623b      	str	r3, [r7, #32]
   return(result);
 8008436:	6a3b      	ldr	r3, [r7, #32]
 8008438:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800843c:	63bb      	str	r3, [r7, #56]	; 0x38
 800843e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	3314      	adds	r3, #20
 8008444:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008446:	633a      	str	r2, [r7, #48]	; 0x30
 8008448:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800844a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800844c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800844e:	e841 2300 	strex	r3, r2, [r1]
 8008452:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008456:	2b00      	cmp	r3, #0
 8008458:	d1e5      	bne.n	8008426 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800845a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	330c      	adds	r3, #12
 8008460:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008462:	693b      	ldr	r3, [r7, #16]
 8008464:	e853 3f00 	ldrex	r3, [r3]
 8008468:	60fb      	str	r3, [r7, #12]
   return(result);
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008470:	637b      	str	r3, [r7, #52]	; 0x34
 8008472:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	330c      	adds	r3, #12
 8008478:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800847a:	61fa      	str	r2, [r7, #28]
 800847c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800847e:	69b9      	ldr	r1, [r7, #24]
 8008480:	69fa      	ldr	r2, [r7, #28]
 8008482:	e841 2300 	strex	r3, r2, [r1]
 8008486:	617b      	str	r3, [r7, #20]
   return(result);
 8008488:	697b      	ldr	r3, [r7, #20]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d1e5      	bne.n	800845a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800848e:	e002      	b.n	8008496 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8008490:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008492:	f7ff ff83 	bl	800839c <HAL_UART_TxCpltCallback>
}
 8008496:	bf00      	nop
 8008498:	3740      	adds	r7, #64	; 0x40
 800849a:	46bd      	mov	sp, r7
 800849c:	bd80      	pop	{r7, pc}

0800849e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800849e:	b580      	push	{r7, lr}
 80084a0:	b084      	sub	sp, #16
 80084a2:	af00      	add	r7, sp, #0
 80084a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084aa:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80084ac:	68f8      	ldr	r0, [r7, #12]
 80084ae:	f7ff ff7f 	bl	80083b0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80084b2:	bf00      	nop
 80084b4:	3710      	adds	r7, #16
 80084b6:	46bd      	mov	sp, r7
 80084b8:	bd80      	pop	{r7, pc}

080084ba <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80084ba:	b580      	push	{r7, lr}
 80084bc:	b09c      	sub	sp, #112	; 0x70
 80084be:	af00      	add	r7, sp, #0
 80084c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084c6:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d172      	bne.n	80085bc <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80084d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084d8:	2200      	movs	r2, #0
 80084da:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80084dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	330c      	adds	r3, #12
 80084e2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084e6:	e853 3f00 	ldrex	r3, [r3]
 80084ea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80084ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80084ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80084f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80084f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	330c      	adds	r3, #12
 80084fa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80084fc:	65ba      	str	r2, [r7, #88]	; 0x58
 80084fe:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008500:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008502:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008504:	e841 2300 	strex	r3, r2, [r1]
 8008508:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800850a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800850c:	2b00      	cmp	r3, #0
 800850e:	d1e5      	bne.n	80084dc <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008510:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	3314      	adds	r3, #20
 8008516:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800851a:	e853 3f00 	ldrex	r3, [r3]
 800851e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008520:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008522:	f023 0301 	bic.w	r3, r3, #1
 8008526:	667b      	str	r3, [r7, #100]	; 0x64
 8008528:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	3314      	adds	r3, #20
 800852e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008530:	647a      	str	r2, [r7, #68]	; 0x44
 8008532:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008534:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008536:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008538:	e841 2300 	strex	r3, r2, [r1]
 800853c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800853e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008540:	2b00      	cmp	r3, #0
 8008542:	d1e5      	bne.n	8008510 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008544:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	3314      	adds	r3, #20
 800854a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800854c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800854e:	e853 3f00 	ldrex	r3, [r3]
 8008552:	623b      	str	r3, [r7, #32]
   return(result);
 8008554:	6a3b      	ldr	r3, [r7, #32]
 8008556:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800855a:	663b      	str	r3, [r7, #96]	; 0x60
 800855c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	3314      	adds	r3, #20
 8008562:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008564:	633a      	str	r2, [r7, #48]	; 0x30
 8008566:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008568:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800856a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800856c:	e841 2300 	strex	r3, r2, [r1]
 8008570:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008574:	2b00      	cmp	r3, #0
 8008576:	d1e5      	bne.n	8008544 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008578:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800857a:	2220      	movs	r2, #32
 800857c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008580:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008584:	2b01      	cmp	r3, #1
 8008586:	d119      	bne.n	80085bc <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008588:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	330c      	adds	r3, #12
 800858e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008590:	693b      	ldr	r3, [r7, #16]
 8008592:	e853 3f00 	ldrex	r3, [r3]
 8008596:	60fb      	str	r3, [r7, #12]
   return(result);
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	f023 0310 	bic.w	r3, r3, #16
 800859e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80085a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	330c      	adds	r3, #12
 80085a6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80085a8:	61fa      	str	r2, [r7, #28]
 80085aa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085ac:	69b9      	ldr	r1, [r7, #24]
 80085ae:	69fa      	ldr	r2, [r7, #28]
 80085b0:	e841 2300 	strex	r3, r2, [r1]
 80085b4:	617b      	str	r3, [r7, #20]
   return(result);
 80085b6:	697b      	ldr	r3, [r7, #20]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d1e5      	bne.n	8008588 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085c0:	2b01      	cmp	r3, #1
 80085c2:	d106      	bne.n	80085d2 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80085c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085c6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80085c8:	4619      	mov	r1, r3
 80085ca:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80085cc:	f7ff ff0e 	bl	80083ec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80085d0:	e002      	b.n	80085d8 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80085d2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80085d4:	f7f9 f9ee 	bl	80019b4 <HAL_UART_RxCpltCallback>
}
 80085d8:	bf00      	nop
 80085da:	3770      	adds	r7, #112	; 0x70
 80085dc:	46bd      	mov	sp, r7
 80085de:	bd80      	pop	{r7, pc}

080085e0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b084      	sub	sp, #16
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085ec:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085f2:	2b01      	cmp	r3, #1
 80085f4:	d108      	bne.n	8008608 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80085fa:	085b      	lsrs	r3, r3, #1
 80085fc:	b29b      	uxth	r3, r3
 80085fe:	4619      	mov	r1, r3
 8008600:	68f8      	ldr	r0, [r7, #12]
 8008602:	f7ff fef3 	bl	80083ec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008606:	e002      	b.n	800860e <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8008608:	68f8      	ldr	r0, [r7, #12]
 800860a:	f7ff fedb 	bl	80083c4 <HAL_UART_RxHalfCpltCallback>
}
 800860e:	bf00      	nop
 8008610:	3710      	adds	r7, #16
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}

08008616 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008616:	b580      	push	{r7, lr}
 8008618:	b084      	sub	sp, #16
 800861a:	af00      	add	r7, sp, #0
 800861c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800861e:	2300      	movs	r3, #0
 8008620:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008626:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008628:	68bb      	ldr	r3, [r7, #8]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	695b      	ldr	r3, [r3, #20]
 800862e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008632:	2b80      	cmp	r3, #128	; 0x80
 8008634:	bf0c      	ite	eq
 8008636:	2301      	moveq	r3, #1
 8008638:	2300      	movne	r3, #0
 800863a:	b2db      	uxtb	r3, r3
 800863c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800863e:	68bb      	ldr	r3, [r7, #8]
 8008640:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008644:	b2db      	uxtb	r3, r3
 8008646:	2b21      	cmp	r3, #33	; 0x21
 8008648:	d108      	bne.n	800865c <UART_DMAError+0x46>
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d005      	beq.n	800865c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008650:	68bb      	ldr	r3, [r7, #8]
 8008652:	2200      	movs	r2, #0
 8008654:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8008656:	68b8      	ldr	r0, [r7, #8]
 8008658:	f000 f8c6 	bl	80087e8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	695b      	ldr	r3, [r3, #20]
 8008662:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008666:	2b40      	cmp	r3, #64	; 0x40
 8008668:	bf0c      	ite	eq
 800866a:	2301      	moveq	r3, #1
 800866c:	2300      	movne	r3, #0
 800866e:	b2db      	uxtb	r3, r3
 8008670:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008672:	68bb      	ldr	r3, [r7, #8]
 8008674:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008678:	b2db      	uxtb	r3, r3
 800867a:	2b22      	cmp	r3, #34	; 0x22
 800867c:	d108      	bne.n	8008690 <UART_DMAError+0x7a>
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d005      	beq.n	8008690 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008684:	68bb      	ldr	r3, [r7, #8]
 8008686:	2200      	movs	r2, #0
 8008688:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800868a:	68b8      	ldr	r0, [r7, #8]
 800868c:	f000 f8d4 	bl	8008838 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008694:	f043 0210 	orr.w	r2, r3, #16
 8008698:	68bb      	ldr	r3, [r7, #8]
 800869a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800869c:	68b8      	ldr	r0, [r7, #8]
 800869e:	f7ff fe9b 	bl	80083d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80086a2:	bf00      	nop
 80086a4:	3710      	adds	r7, #16
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bd80      	pop	{r7, pc}
	...

080086ac <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b098      	sub	sp, #96	; 0x60
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	60f8      	str	r0, [r7, #12]
 80086b4:	60b9      	str	r1, [r7, #8]
 80086b6:	4613      	mov	r3, r2
 80086b8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80086ba:	68ba      	ldr	r2, [r7, #8]
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	88fa      	ldrh	r2, [r7, #6]
 80086c4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	2200      	movs	r2, #0
 80086ca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	2222      	movs	r2, #34	; 0x22
 80086d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086d8:	4a40      	ldr	r2, [pc, #256]	; (80087dc <UART_Start_Receive_DMA+0x130>)
 80086da:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086e0:	4a3f      	ldr	r2, [pc, #252]	; (80087e0 <UART_Start_Receive_DMA+0x134>)
 80086e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086e8:	4a3e      	ldr	r2, [pc, #248]	; (80087e4 <UART_Start_Receive_DMA+0x138>)
 80086ea:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086f0:	2200      	movs	r2, #0
 80086f2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80086f4:	f107 0308 	add.w	r3, r7, #8
 80086f8:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	3304      	adds	r3, #4
 8008704:	4619      	mov	r1, r3
 8008706:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008708:	681a      	ldr	r2, [r3, #0]
 800870a:	88fb      	ldrh	r3, [r7, #6]
 800870c:	f7fa fe96 	bl	800343c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8008710:	2300      	movs	r3, #0
 8008712:	613b      	str	r3, [r7, #16]
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	613b      	str	r3, [r7, #16]
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	685b      	ldr	r3, [r3, #4]
 8008722:	613b      	str	r3, [r7, #16]
 8008724:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	2200      	movs	r2, #0
 800872a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	691b      	ldr	r3, [r3, #16]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d019      	beq.n	800876a <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	330c      	adds	r3, #12
 800873c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800873e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008740:	e853 3f00 	ldrex	r3, [r3]
 8008744:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008746:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008748:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800874c:	65bb      	str	r3, [r7, #88]	; 0x58
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	330c      	adds	r3, #12
 8008754:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008756:	64fa      	str	r2, [r7, #76]	; 0x4c
 8008758:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800875a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800875c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800875e:	e841 2300 	strex	r3, r2, [r1]
 8008762:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008764:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008766:	2b00      	cmp	r3, #0
 8008768:	d1e5      	bne.n	8008736 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	3314      	adds	r3, #20
 8008770:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008774:	e853 3f00 	ldrex	r3, [r3]
 8008778:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800877a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800877c:	f043 0301 	orr.w	r3, r3, #1
 8008780:	657b      	str	r3, [r7, #84]	; 0x54
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	3314      	adds	r3, #20
 8008788:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800878a:	63ba      	str	r2, [r7, #56]	; 0x38
 800878c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800878e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008790:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008792:	e841 2300 	strex	r3, r2, [r1]
 8008796:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800879a:	2b00      	cmp	r3, #0
 800879c:	d1e5      	bne.n	800876a <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	3314      	adds	r3, #20
 80087a4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087a6:	69bb      	ldr	r3, [r7, #24]
 80087a8:	e853 3f00 	ldrex	r3, [r3]
 80087ac:	617b      	str	r3, [r7, #20]
   return(result);
 80087ae:	697b      	ldr	r3, [r7, #20]
 80087b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087b4:	653b      	str	r3, [r7, #80]	; 0x50
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	3314      	adds	r3, #20
 80087bc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80087be:	627a      	str	r2, [r7, #36]	; 0x24
 80087c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087c2:	6a39      	ldr	r1, [r7, #32]
 80087c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087c6:	e841 2300 	strex	r3, r2, [r1]
 80087ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80087cc:	69fb      	ldr	r3, [r7, #28]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d1e5      	bne.n	800879e <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80087d2:	2300      	movs	r3, #0
}
 80087d4:	4618      	mov	r0, r3
 80087d6:	3760      	adds	r7, #96	; 0x60
 80087d8:	46bd      	mov	sp, r7
 80087da:	bd80      	pop	{r7, pc}
 80087dc:	080084bb 	.word	0x080084bb
 80087e0:	080085e1 	.word	0x080085e1
 80087e4:	08008617 	.word	0x08008617

080087e8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80087e8:	b480      	push	{r7}
 80087ea:	b089      	sub	sp, #36	; 0x24
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	330c      	adds	r3, #12
 80087f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	e853 3f00 	ldrex	r3, [r3]
 80087fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8008800:	68bb      	ldr	r3, [r7, #8]
 8008802:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008806:	61fb      	str	r3, [r7, #28]
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	330c      	adds	r3, #12
 800880e:	69fa      	ldr	r2, [r7, #28]
 8008810:	61ba      	str	r2, [r7, #24]
 8008812:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008814:	6979      	ldr	r1, [r7, #20]
 8008816:	69ba      	ldr	r2, [r7, #24]
 8008818:	e841 2300 	strex	r3, r2, [r1]
 800881c:	613b      	str	r3, [r7, #16]
   return(result);
 800881e:	693b      	ldr	r3, [r7, #16]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d1e5      	bne.n	80087f0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2220      	movs	r2, #32
 8008828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800882c:	bf00      	nop
 800882e:	3724      	adds	r7, #36	; 0x24
 8008830:	46bd      	mov	sp, r7
 8008832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008836:	4770      	bx	lr

08008838 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008838:	b480      	push	{r7}
 800883a:	b095      	sub	sp, #84	; 0x54
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	330c      	adds	r3, #12
 8008846:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008848:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800884a:	e853 3f00 	ldrex	r3, [r3]
 800884e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008852:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008856:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	330c      	adds	r3, #12
 800885e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008860:	643a      	str	r2, [r7, #64]	; 0x40
 8008862:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008864:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008866:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008868:	e841 2300 	strex	r3, r2, [r1]
 800886c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800886e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008870:	2b00      	cmp	r3, #0
 8008872:	d1e5      	bne.n	8008840 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	3314      	adds	r3, #20
 800887a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800887c:	6a3b      	ldr	r3, [r7, #32]
 800887e:	e853 3f00 	ldrex	r3, [r3]
 8008882:	61fb      	str	r3, [r7, #28]
   return(result);
 8008884:	69fb      	ldr	r3, [r7, #28]
 8008886:	f023 0301 	bic.w	r3, r3, #1
 800888a:	64bb      	str	r3, [r7, #72]	; 0x48
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	3314      	adds	r3, #20
 8008892:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008894:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008896:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008898:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800889a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800889c:	e841 2300 	strex	r3, r2, [r1]
 80088a0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80088a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d1e5      	bne.n	8008874 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088ac:	2b01      	cmp	r3, #1
 80088ae:	d119      	bne.n	80088e4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	330c      	adds	r3, #12
 80088b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	e853 3f00 	ldrex	r3, [r3]
 80088be:	60bb      	str	r3, [r7, #8]
   return(result);
 80088c0:	68bb      	ldr	r3, [r7, #8]
 80088c2:	f023 0310 	bic.w	r3, r3, #16
 80088c6:	647b      	str	r3, [r7, #68]	; 0x44
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	330c      	adds	r3, #12
 80088ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80088d0:	61ba      	str	r2, [r7, #24]
 80088d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088d4:	6979      	ldr	r1, [r7, #20]
 80088d6:	69ba      	ldr	r2, [r7, #24]
 80088d8:	e841 2300 	strex	r3, r2, [r1]
 80088dc:	613b      	str	r3, [r7, #16]
   return(result);
 80088de:	693b      	ldr	r3, [r7, #16]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d1e5      	bne.n	80088b0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2220      	movs	r2, #32
 80088e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2200      	movs	r2, #0
 80088f0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80088f2:	bf00      	nop
 80088f4:	3754      	adds	r7, #84	; 0x54
 80088f6:	46bd      	mov	sp, r7
 80088f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fc:	4770      	bx	lr

080088fe <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80088fe:	b580      	push	{r7, lr}
 8008900:	b084      	sub	sp, #16
 8008902:	af00      	add	r7, sp, #0
 8008904:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800890a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	2200      	movs	r2, #0
 8008910:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	2200      	movs	r2, #0
 8008916:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008918:	68f8      	ldr	r0, [r7, #12]
 800891a:	f7ff fd5d 	bl	80083d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800891e:	bf00      	nop
 8008920:	3710      	adds	r7, #16
 8008922:	46bd      	mov	sp, r7
 8008924:	bd80      	pop	{r7, pc}

08008926 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008926:	b480      	push	{r7}
 8008928:	b085      	sub	sp, #20
 800892a:	af00      	add	r7, sp, #0
 800892c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008934:	b2db      	uxtb	r3, r3
 8008936:	2b21      	cmp	r3, #33	; 0x21
 8008938:	d13e      	bne.n	80089b8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	689b      	ldr	r3, [r3, #8]
 800893e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008942:	d114      	bne.n	800896e <UART_Transmit_IT+0x48>
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	691b      	ldr	r3, [r3, #16]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d110      	bne.n	800896e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	6a1b      	ldr	r3, [r3, #32]
 8008950:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	881b      	ldrh	r3, [r3, #0]
 8008956:	461a      	mov	r2, r3
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008960:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6a1b      	ldr	r3, [r3, #32]
 8008966:	1c9a      	adds	r2, r3, #2
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	621a      	str	r2, [r3, #32]
 800896c:	e008      	b.n	8008980 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6a1b      	ldr	r3, [r3, #32]
 8008972:	1c59      	adds	r1, r3, #1
 8008974:	687a      	ldr	r2, [r7, #4]
 8008976:	6211      	str	r1, [r2, #32]
 8008978:	781a      	ldrb	r2, [r3, #0]
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008984:	b29b      	uxth	r3, r3
 8008986:	3b01      	subs	r3, #1
 8008988:	b29b      	uxth	r3, r3
 800898a:	687a      	ldr	r2, [r7, #4]
 800898c:	4619      	mov	r1, r3
 800898e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008990:	2b00      	cmp	r3, #0
 8008992:	d10f      	bne.n	80089b4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	68da      	ldr	r2, [r3, #12]
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80089a2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	68da      	ldr	r2, [r3, #12]
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80089b2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80089b4:	2300      	movs	r3, #0
 80089b6:	e000      	b.n	80089ba <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80089b8:	2302      	movs	r3, #2
  }
}
 80089ba:	4618      	mov	r0, r3
 80089bc:	3714      	adds	r7, #20
 80089be:	46bd      	mov	sp, r7
 80089c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c4:	4770      	bx	lr

080089c6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80089c6:	b580      	push	{r7, lr}
 80089c8:	b082      	sub	sp, #8
 80089ca:	af00      	add	r7, sp, #0
 80089cc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	68da      	ldr	r2, [r3, #12]
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80089dc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	2220      	movs	r2, #32
 80089e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80089e6:	6878      	ldr	r0, [r7, #4]
 80089e8:	f7ff fcd8 	bl	800839c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80089ec:	2300      	movs	r3, #0
}
 80089ee:	4618      	mov	r0, r3
 80089f0:	3708      	adds	r7, #8
 80089f2:	46bd      	mov	sp, r7
 80089f4:	bd80      	pop	{r7, pc}

080089f6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80089f6:	b580      	push	{r7, lr}
 80089f8:	b08c      	sub	sp, #48	; 0x30
 80089fa:	af00      	add	r7, sp, #0
 80089fc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008a04:	b2db      	uxtb	r3, r3
 8008a06:	2b22      	cmp	r3, #34	; 0x22
 8008a08:	f040 80ab 	bne.w	8008b62 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	689b      	ldr	r3, [r3, #8]
 8008a10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a14:	d117      	bne.n	8008a46 <UART_Receive_IT+0x50>
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	691b      	ldr	r3, [r3, #16]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d113      	bne.n	8008a46 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008a1e:	2300      	movs	r3, #0
 8008a20:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a26:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	685b      	ldr	r3, [r3, #4]
 8008a2e:	b29b      	uxth	r3, r3
 8008a30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a34:	b29a      	uxth	r2, r3
 8008a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a38:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a3e:	1c9a      	adds	r2, r3, #2
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	629a      	str	r2, [r3, #40]	; 0x28
 8008a44:	e026      	b.n	8008a94 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	689b      	ldr	r3, [r3, #8]
 8008a54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a58:	d007      	beq.n	8008a6a <UART_Receive_IT+0x74>
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	689b      	ldr	r3, [r3, #8]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d10a      	bne.n	8008a78 <UART_Receive_IT+0x82>
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	691b      	ldr	r3, [r3, #16]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d106      	bne.n	8008a78 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	685b      	ldr	r3, [r3, #4]
 8008a70:	b2da      	uxtb	r2, r3
 8008a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a74:	701a      	strb	r2, [r3, #0]
 8008a76:	e008      	b.n	8008a8a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	685b      	ldr	r3, [r3, #4]
 8008a7e:	b2db      	uxtb	r3, r3
 8008a80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a84:	b2da      	uxtb	r2, r3
 8008a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a88:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a8e:	1c5a      	adds	r2, r3, #1
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008a98:	b29b      	uxth	r3, r3
 8008a9a:	3b01      	subs	r3, #1
 8008a9c:	b29b      	uxth	r3, r3
 8008a9e:	687a      	ldr	r2, [r7, #4]
 8008aa0:	4619      	mov	r1, r3
 8008aa2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d15a      	bne.n	8008b5e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	68da      	ldr	r2, [r3, #12]
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	f022 0220 	bic.w	r2, r2, #32
 8008ab6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	68da      	ldr	r2, [r3, #12]
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008ac6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	695a      	ldr	r2, [r3, #20]
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	f022 0201 	bic.w	r2, r2, #1
 8008ad6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2220      	movs	r2, #32
 8008adc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ae4:	2b01      	cmp	r3, #1
 8008ae6:	d135      	bne.n	8008b54 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2200      	movs	r2, #0
 8008aec:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	330c      	adds	r3, #12
 8008af4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008af6:	697b      	ldr	r3, [r7, #20]
 8008af8:	e853 3f00 	ldrex	r3, [r3]
 8008afc:	613b      	str	r3, [r7, #16]
   return(result);
 8008afe:	693b      	ldr	r3, [r7, #16]
 8008b00:	f023 0310 	bic.w	r3, r3, #16
 8008b04:	627b      	str	r3, [r7, #36]	; 0x24
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	330c      	adds	r3, #12
 8008b0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b0e:	623a      	str	r2, [r7, #32]
 8008b10:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b12:	69f9      	ldr	r1, [r7, #28]
 8008b14:	6a3a      	ldr	r2, [r7, #32]
 8008b16:	e841 2300 	strex	r3, r2, [r1]
 8008b1a:	61bb      	str	r3, [r7, #24]
   return(result);
 8008b1c:	69bb      	ldr	r3, [r7, #24]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d1e5      	bne.n	8008aee <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	f003 0310 	and.w	r3, r3, #16
 8008b2c:	2b10      	cmp	r3, #16
 8008b2e:	d10a      	bne.n	8008b46 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008b30:	2300      	movs	r3, #0
 8008b32:	60fb      	str	r3, [r7, #12]
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	60fb      	str	r3, [r7, #12]
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	685b      	ldr	r3, [r3, #4]
 8008b42:	60fb      	str	r3, [r7, #12]
 8008b44:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008b4a:	4619      	mov	r1, r3
 8008b4c:	6878      	ldr	r0, [r7, #4]
 8008b4e:	f7ff fc4d 	bl	80083ec <HAL_UARTEx_RxEventCallback>
 8008b52:	e002      	b.n	8008b5a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008b54:	6878      	ldr	r0, [r7, #4]
 8008b56:	f7f8 ff2d 	bl	80019b4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	e002      	b.n	8008b64 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008b5e:	2300      	movs	r3, #0
 8008b60:	e000      	b.n	8008b64 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008b62:	2302      	movs	r3, #2
  }
}
 8008b64:	4618      	mov	r0, r3
 8008b66:	3730      	adds	r7, #48	; 0x30
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bd80      	pop	{r7, pc}

08008b6c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008b6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008b70:	b0c0      	sub	sp, #256	; 0x100
 8008b72:	af00      	add	r7, sp, #0
 8008b74:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	691b      	ldr	r3, [r3, #16]
 8008b80:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b88:	68d9      	ldr	r1, [r3, #12]
 8008b8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b8e:	681a      	ldr	r2, [r3, #0]
 8008b90:	ea40 0301 	orr.w	r3, r0, r1
 8008b94:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008b96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b9a:	689a      	ldr	r2, [r3, #8]
 8008b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ba0:	691b      	ldr	r3, [r3, #16]
 8008ba2:	431a      	orrs	r2, r3
 8008ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ba8:	695b      	ldr	r3, [r3, #20]
 8008baa:	431a      	orrs	r2, r3
 8008bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bb0:	69db      	ldr	r3, [r3, #28]
 8008bb2:	4313      	orrs	r3, r2
 8008bb4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	68db      	ldr	r3, [r3, #12]
 8008bc0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008bc4:	f021 010c 	bic.w	r1, r1, #12
 8008bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bcc:	681a      	ldr	r2, [r3, #0]
 8008bce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008bd2:	430b      	orrs	r3, r1
 8008bd4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008bd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	695b      	ldr	r3, [r3, #20]
 8008bde:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008be2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008be6:	6999      	ldr	r1, [r3, #24]
 8008be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bec:	681a      	ldr	r2, [r3, #0]
 8008bee:	ea40 0301 	orr.w	r3, r0, r1
 8008bf2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bf8:	681a      	ldr	r2, [r3, #0]
 8008bfa:	4b8f      	ldr	r3, [pc, #572]	; (8008e38 <UART_SetConfig+0x2cc>)
 8008bfc:	429a      	cmp	r2, r3
 8008bfe:	d005      	beq.n	8008c0c <UART_SetConfig+0xa0>
 8008c00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c04:	681a      	ldr	r2, [r3, #0]
 8008c06:	4b8d      	ldr	r3, [pc, #564]	; (8008e3c <UART_SetConfig+0x2d0>)
 8008c08:	429a      	cmp	r2, r3
 8008c0a:	d104      	bne.n	8008c16 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008c0c:	f7fe fa0c 	bl	8007028 <HAL_RCC_GetPCLK2Freq>
 8008c10:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008c14:	e003      	b.n	8008c1e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008c16:	f7fe f9f3 	bl	8007000 <HAL_RCC_GetPCLK1Freq>
 8008c1a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008c1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c22:	69db      	ldr	r3, [r3, #28]
 8008c24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c28:	f040 810c 	bne.w	8008e44 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008c2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008c30:	2200      	movs	r2, #0
 8008c32:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008c36:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008c3a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008c3e:	4622      	mov	r2, r4
 8008c40:	462b      	mov	r3, r5
 8008c42:	1891      	adds	r1, r2, r2
 8008c44:	65b9      	str	r1, [r7, #88]	; 0x58
 8008c46:	415b      	adcs	r3, r3
 8008c48:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008c4a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008c4e:	4621      	mov	r1, r4
 8008c50:	eb12 0801 	adds.w	r8, r2, r1
 8008c54:	4629      	mov	r1, r5
 8008c56:	eb43 0901 	adc.w	r9, r3, r1
 8008c5a:	f04f 0200 	mov.w	r2, #0
 8008c5e:	f04f 0300 	mov.w	r3, #0
 8008c62:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008c66:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008c6a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008c6e:	4690      	mov	r8, r2
 8008c70:	4699      	mov	r9, r3
 8008c72:	4623      	mov	r3, r4
 8008c74:	eb18 0303 	adds.w	r3, r8, r3
 8008c78:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008c7c:	462b      	mov	r3, r5
 8008c7e:	eb49 0303 	adc.w	r3, r9, r3
 8008c82:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008c86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c8a:	685b      	ldr	r3, [r3, #4]
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008c92:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008c96:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008c9a:	460b      	mov	r3, r1
 8008c9c:	18db      	adds	r3, r3, r3
 8008c9e:	653b      	str	r3, [r7, #80]	; 0x50
 8008ca0:	4613      	mov	r3, r2
 8008ca2:	eb42 0303 	adc.w	r3, r2, r3
 8008ca6:	657b      	str	r3, [r7, #84]	; 0x54
 8008ca8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008cac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008cb0:	f7f7 fe80 	bl	80009b4 <__aeabi_uldivmod>
 8008cb4:	4602      	mov	r2, r0
 8008cb6:	460b      	mov	r3, r1
 8008cb8:	4b61      	ldr	r3, [pc, #388]	; (8008e40 <UART_SetConfig+0x2d4>)
 8008cba:	fba3 2302 	umull	r2, r3, r3, r2
 8008cbe:	095b      	lsrs	r3, r3, #5
 8008cc0:	011c      	lsls	r4, r3, #4
 8008cc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008ccc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008cd0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008cd4:	4642      	mov	r2, r8
 8008cd6:	464b      	mov	r3, r9
 8008cd8:	1891      	adds	r1, r2, r2
 8008cda:	64b9      	str	r1, [r7, #72]	; 0x48
 8008cdc:	415b      	adcs	r3, r3
 8008cde:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ce0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008ce4:	4641      	mov	r1, r8
 8008ce6:	eb12 0a01 	adds.w	sl, r2, r1
 8008cea:	4649      	mov	r1, r9
 8008cec:	eb43 0b01 	adc.w	fp, r3, r1
 8008cf0:	f04f 0200 	mov.w	r2, #0
 8008cf4:	f04f 0300 	mov.w	r3, #0
 8008cf8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008cfc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008d00:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008d04:	4692      	mov	sl, r2
 8008d06:	469b      	mov	fp, r3
 8008d08:	4643      	mov	r3, r8
 8008d0a:	eb1a 0303 	adds.w	r3, sl, r3
 8008d0e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008d12:	464b      	mov	r3, r9
 8008d14:	eb4b 0303 	adc.w	r3, fp, r3
 8008d18:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d20:	685b      	ldr	r3, [r3, #4]
 8008d22:	2200      	movs	r2, #0
 8008d24:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008d28:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008d2c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008d30:	460b      	mov	r3, r1
 8008d32:	18db      	adds	r3, r3, r3
 8008d34:	643b      	str	r3, [r7, #64]	; 0x40
 8008d36:	4613      	mov	r3, r2
 8008d38:	eb42 0303 	adc.w	r3, r2, r3
 8008d3c:	647b      	str	r3, [r7, #68]	; 0x44
 8008d3e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008d42:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008d46:	f7f7 fe35 	bl	80009b4 <__aeabi_uldivmod>
 8008d4a:	4602      	mov	r2, r0
 8008d4c:	460b      	mov	r3, r1
 8008d4e:	4611      	mov	r1, r2
 8008d50:	4b3b      	ldr	r3, [pc, #236]	; (8008e40 <UART_SetConfig+0x2d4>)
 8008d52:	fba3 2301 	umull	r2, r3, r3, r1
 8008d56:	095b      	lsrs	r3, r3, #5
 8008d58:	2264      	movs	r2, #100	; 0x64
 8008d5a:	fb02 f303 	mul.w	r3, r2, r3
 8008d5e:	1acb      	subs	r3, r1, r3
 8008d60:	00db      	lsls	r3, r3, #3
 8008d62:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008d66:	4b36      	ldr	r3, [pc, #216]	; (8008e40 <UART_SetConfig+0x2d4>)
 8008d68:	fba3 2302 	umull	r2, r3, r3, r2
 8008d6c:	095b      	lsrs	r3, r3, #5
 8008d6e:	005b      	lsls	r3, r3, #1
 8008d70:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008d74:	441c      	add	r4, r3
 8008d76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008d80:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008d84:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008d88:	4642      	mov	r2, r8
 8008d8a:	464b      	mov	r3, r9
 8008d8c:	1891      	adds	r1, r2, r2
 8008d8e:	63b9      	str	r1, [r7, #56]	; 0x38
 8008d90:	415b      	adcs	r3, r3
 8008d92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d94:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008d98:	4641      	mov	r1, r8
 8008d9a:	1851      	adds	r1, r2, r1
 8008d9c:	6339      	str	r1, [r7, #48]	; 0x30
 8008d9e:	4649      	mov	r1, r9
 8008da0:	414b      	adcs	r3, r1
 8008da2:	637b      	str	r3, [r7, #52]	; 0x34
 8008da4:	f04f 0200 	mov.w	r2, #0
 8008da8:	f04f 0300 	mov.w	r3, #0
 8008dac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008db0:	4659      	mov	r1, fp
 8008db2:	00cb      	lsls	r3, r1, #3
 8008db4:	4651      	mov	r1, sl
 8008db6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008dba:	4651      	mov	r1, sl
 8008dbc:	00ca      	lsls	r2, r1, #3
 8008dbe:	4610      	mov	r0, r2
 8008dc0:	4619      	mov	r1, r3
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	4642      	mov	r2, r8
 8008dc6:	189b      	adds	r3, r3, r2
 8008dc8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008dcc:	464b      	mov	r3, r9
 8008dce:	460a      	mov	r2, r1
 8008dd0:	eb42 0303 	adc.w	r3, r2, r3
 8008dd4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ddc:	685b      	ldr	r3, [r3, #4]
 8008dde:	2200      	movs	r2, #0
 8008de0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008de4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008de8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008dec:	460b      	mov	r3, r1
 8008dee:	18db      	adds	r3, r3, r3
 8008df0:	62bb      	str	r3, [r7, #40]	; 0x28
 8008df2:	4613      	mov	r3, r2
 8008df4:	eb42 0303 	adc.w	r3, r2, r3
 8008df8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008dfa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008dfe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008e02:	f7f7 fdd7 	bl	80009b4 <__aeabi_uldivmod>
 8008e06:	4602      	mov	r2, r0
 8008e08:	460b      	mov	r3, r1
 8008e0a:	4b0d      	ldr	r3, [pc, #52]	; (8008e40 <UART_SetConfig+0x2d4>)
 8008e0c:	fba3 1302 	umull	r1, r3, r3, r2
 8008e10:	095b      	lsrs	r3, r3, #5
 8008e12:	2164      	movs	r1, #100	; 0x64
 8008e14:	fb01 f303 	mul.w	r3, r1, r3
 8008e18:	1ad3      	subs	r3, r2, r3
 8008e1a:	00db      	lsls	r3, r3, #3
 8008e1c:	3332      	adds	r3, #50	; 0x32
 8008e1e:	4a08      	ldr	r2, [pc, #32]	; (8008e40 <UART_SetConfig+0x2d4>)
 8008e20:	fba2 2303 	umull	r2, r3, r2, r3
 8008e24:	095b      	lsrs	r3, r3, #5
 8008e26:	f003 0207 	and.w	r2, r3, #7
 8008e2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	4422      	add	r2, r4
 8008e32:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008e34:	e106      	b.n	8009044 <UART_SetConfig+0x4d8>
 8008e36:	bf00      	nop
 8008e38:	40011000 	.word	0x40011000
 8008e3c:	40011400 	.word	0x40011400
 8008e40:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008e44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e48:	2200      	movs	r2, #0
 8008e4a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008e4e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008e52:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008e56:	4642      	mov	r2, r8
 8008e58:	464b      	mov	r3, r9
 8008e5a:	1891      	adds	r1, r2, r2
 8008e5c:	6239      	str	r1, [r7, #32]
 8008e5e:	415b      	adcs	r3, r3
 8008e60:	627b      	str	r3, [r7, #36]	; 0x24
 8008e62:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008e66:	4641      	mov	r1, r8
 8008e68:	1854      	adds	r4, r2, r1
 8008e6a:	4649      	mov	r1, r9
 8008e6c:	eb43 0501 	adc.w	r5, r3, r1
 8008e70:	f04f 0200 	mov.w	r2, #0
 8008e74:	f04f 0300 	mov.w	r3, #0
 8008e78:	00eb      	lsls	r3, r5, #3
 8008e7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008e7e:	00e2      	lsls	r2, r4, #3
 8008e80:	4614      	mov	r4, r2
 8008e82:	461d      	mov	r5, r3
 8008e84:	4643      	mov	r3, r8
 8008e86:	18e3      	adds	r3, r4, r3
 8008e88:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008e8c:	464b      	mov	r3, r9
 8008e8e:	eb45 0303 	adc.w	r3, r5, r3
 8008e92:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008e96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e9a:	685b      	ldr	r3, [r3, #4]
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008ea2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008ea6:	f04f 0200 	mov.w	r2, #0
 8008eaa:	f04f 0300 	mov.w	r3, #0
 8008eae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008eb2:	4629      	mov	r1, r5
 8008eb4:	008b      	lsls	r3, r1, #2
 8008eb6:	4621      	mov	r1, r4
 8008eb8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008ebc:	4621      	mov	r1, r4
 8008ebe:	008a      	lsls	r2, r1, #2
 8008ec0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008ec4:	f7f7 fd76 	bl	80009b4 <__aeabi_uldivmod>
 8008ec8:	4602      	mov	r2, r0
 8008eca:	460b      	mov	r3, r1
 8008ecc:	4b60      	ldr	r3, [pc, #384]	; (8009050 <UART_SetConfig+0x4e4>)
 8008ece:	fba3 2302 	umull	r2, r3, r3, r2
 8008ed2:	095b      	lsrs	r3, r3, #5
 8008ed4:	011c      	lsls	r4, r3, #4
 8008ed6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008eda:	2200      	movs	r2, #0
 8008edc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008ee0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008ee4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008ee8:	4642      	mov	r2, r8
 8008eea:	464b      	mov	r3, r9
 8008eec:	1891      	adds	r1, r2, r2
 8008eee:	61b9      	str	r1, [r7, #24]
 8008ef0:	415b      	adcs	r3, r3
 8008ef2:	61fb      	str	r3, [r7, #28]
 8008ef4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008ef8:	4641      	mov	r1, r8
 8008efa:	1851      	adds	r1, r2, r1
 8008efc:	6139      	str	r1, [r7, #16]
 8008efe:	4649      	mov	r1, r9
 8008f00:	414b      	adcs	r3, r1
 8008f02:	617b      	str	r3, [r7, #20]
 8008f04:	f04f 0200 	mov.w	r2, #0
 8008f08:	f04f 0300 	mov.w	r3, #0
 8008f0c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008f10:	4659      	mov	r1, fp
 8008f12:	00cb      	lsls	r3, r1, #3
 8008f14:	4651      	mov	r1, sl
 8008f16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008f1a:	4651      	mov	r1, sl
 8008f1c:	00ca      	lsls	r2, r1, #3
 8008f1e:	4610      	mov	r0, r2
 8008f20:	4619      	mov	r1, r3
 8008f22:	4603      	mov	r3, r0
 8008f24:	4642      	mov	r2, r8
 8008f26:	189b      	adds	r3, r3, r2
 8008f28:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008f2c:	464b      	mov	r3, r9
 8008f2e:	460a      	mov	r2, r1
 8008f30:	eb42 0303 	adc.w	r3, r2, r3
 8008f34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f3c:	685b      	ldr	r3, [r3, #4]
 8008f3e:	2200      	movs	r2, #0
 8008f40:	67bb      	str	r3, [r7, #120]	; 0x78
 8008f42:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008f44:	f04f 0200 	mov.w	r2, #0
 8008f48:	f04f 0300 	mov.w	r3, #0
 8008f4c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008f50:	4649      	mov	r1, r9
 8008f52:	008b      	lsls	r3, r1, #2
 8008f54:	4641      	mov	r1, r8
 8008f56:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008f5a:	4641      	mov	r1, r8
 8008f5c:	008a      	lsls	r2, r1, #2
 8008f5e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008f62:	f7f7 fd27 	bl	80009b4 <__aeabi_uldivmod>
 8008f66:	4602      	mov	r2, r0
 8008f68:	460b      	mov	r3, r1
 8008f6a:	4611      	mov	r1, r2
 8008f6c:	4b38      	ldr	r3, [pc, #224]	; (8009050 <UART_SetConfig+0x4e4>)
 8008f6e:	fba3 2301 	umull	r2, r3, r3, r1
 8008f72:	095b      	lsrs	r3, r3, #5
 8008f74:	2264      	movs	r2, #100	; 0x64
 8008f76:	fb02 f303 	mul.w	r3, r2, r3
 8008f7a:	1acb      	subs	r3, r1, r3
 8008f7c:	011b      	lsls	r3, r3, #4
 8008f7e:	3332      	adds	r3, #50	; 0x32
 8008f80:	4a33      	ldr	r2, [pc, #204]	; (8009050 <UART_SetConfig+0x4e4>)
 8008f82:	fba2 2303 	umull	r2, r3, r2, r3
 8008f86:	095b      	lsrs	r3, r3, #5
 8008f88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008f8c:	441c      	add	r4, r3
 8008f8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008f92:	2200      	movs	r2, #0
 8008f94:	673b      	str	r3, [r7, #112]	; 0x70
 8008f96:	677a      	str	r2, [r7, #116]	; 0x74
 8008f98:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008f9c:	4642      	mov	r2, r8
 8008f9e:	464b      	mov	r3, r9
 8008fa0:	1891      	adds	r1, r2, r2
 8008fa2:	60b9      	str	r1, [r7, #8]
 8008fa4:	415b      	adcs	r3, r3
 8008fa6:	60fb      	str	r3, [r7, #12]
 8008fa8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008fac:	4641      	mov	r1, r8
 8008fae:	1851      	adds	r1, r2, r1
 8008fb0:	6039      	str	r1, [r7, #0]
 8008fb2:	4649      	mov	r1, r9
 8008fb4:	414b      	adcs	r3, r1
 8008fb6:	607b      	str	r3, [r7, #4]
 8008fb8:	f04f 0200 	mov.w	r2, #0
 8008fbc:	f04f 0300 	mov.w	r3, #0
 8008fc0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008fc4:	4659      	mov	r1, fp
 8008fc6:	00cb      	lsls	r3, r1, #3
 8008fc8:	4651      	mov	r1, sl
 8008fca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008fce:	4651      	mov	r1, sl
 8008fd0:	00ca      	lsls	r2, r1, #3
 8008fd2:	4610      	mov	r0, r2
 8008fd4:	4619      	mov	r1, r3
 8008fd6:	4603      	mov	r3, r0
 8008fd8:	4642      	mov	r2, r8
 8008fda:	189b      	adds	r3, r3, r2
 8008fdc:	66bb      	str	r3, [r7, #104]	; 0x68
 8008fde:	464b      	mov	r3, r9
 8008fe0:	460a      	mov	r2, r1
 8008fe2:	eb42 0303 	adc.w	r3, r2, r3
 8008fe6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fec:	685b      	ldr	r3, [r3, #4]
 8008fee:	2200      	movs	r2, #0
 8008ff0:	663b      	str	r3, [r7, #96]	; 0x60
 8008ff2:	667a      	str	r2, [r7, #100]	; 0x64
 8008ff4:	f04f 0200 	mov.w	r2, #0
 8008ff8:	f04f 0300 	mov.w	r3, #0
 8008ffc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009000:	4649      	mov	r1, r9
 8009002:	008b      	lsls	r3, r1, #2
 8009004:	4641      	mov	r1, r8
 8009006:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800900a:	4641      	mov	r1, r8
 800900c:	008a      	lsls	r2, r1, #2
 800900e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009012:	f7f7 fccf 	bl	80009b4 <__aeabi_uldivmod>
 8009016:	4602      	mov	r2, r0
 8009018:	460b      	mov	r3, r1
 800901a:	4b0d      	ldr	r3, [pc, #52]	; (8009050 <UART_SetConfig+0x4e4>)
 800901c:	fba3 1302 	umull	r1, r3, r3, r2
 8009020:	095b      	lsrs	r3, r3, #5
 8009022:	2164      	movs	r1, #100	; 0x64
 8009024:	fb01 f303 	mul.w	r3, r1, r3
 8009028:	1ad3      	subs	r3, r2, r3
 800902a:	011b      	lsls	r3, r3, #4
 800902c:	3332      	adds	r3, #50	; 0x32
 800902e:	4a08      	ldr	r2, [pc, #32]	; (8009050 <UART_SetConfig+0x4e4>)
 8009030:	fba2 2303 	umull	r2, r3, r2, r3
 8009034:	095b      	lsrs	r3, r3, #5
 8009036:	f003 020f 	and.w	r2, r3, #15
 800903a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	4422      	add	r2, r4
 8009042:	609a      	str	r2, [r3, #8]
}
 8009044:	bf00      	nop
 8009046:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800904a:	46bd      	mov	sp, r7
 800904c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009050:	51eb851f 	.word	0x51eb851f

08009054 <calloc>:
 8009054:	4b02      	ldr	r3, [pc, #8]	; (8009060 <calloc+0xc>)
 8009056:	460a      	mov	r2, r1
 8009058:	4601      	mov	r1, r0
 800905a:	6818      	ldr	r0, [r3, #0]
 800905c:	f000 b802 	b.w	8009064 <_calloc_r>
 8009060:	20000058 	.word	0x20000058

08009064 <_calloc_r>:
 8009064:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009066:	fba1 2402 	umull	r2, r4, r1, r2
 800906a:	b94c      	cbnz	r4, 8009080 <_calloc_r+0x1c>
 800906c:	4611      	mov	r1, r2
 800906e:	9201      	str	r2, [sp, #4]
 8009070:	f000 f82e 	bl	80090d0 <_malloc_r>
 8009074:	9a01      	ldr	r2, [sp, #4]
 8009076:	4605      	mov	r5, r0
 8009078:	b930      	cbnz	r0, 8009088 <_calloc_r+0x24>
 800907a:	4628      	mov	r0, r5
 800907c:	b003      	add	sp, #12
 800907e:	bd30      	pop	{r4, r5, pc}
 8009080:	220c      	movs	r2, #12
 8009082:	6002      	str	r2, [r0, #0]
 8009084:	2500      	movs	r5, #0
 8009086:	e7f8      	b.n	800907a <_calloc_r+0x16>
 8009088:	4621      	mov	r1, r4
 800908a:	f000 f8ad 	bl	80091e8 <memset>
 800908e:	e7f4      	b.n	800907a <_calloc_r+0x16>

08009090 <sbrk_aligned>:
 8009090:	b570      	push	{r4, r5, r6, lr}
 8009092:	4e0e      	ldr	r6, [pc, #56]	; (80090cc <sbrk_aligned+0x3c>)
 8009094:	460c      	mov	r4, r1
 8009096:	6831      	ldr	r1, [r6, #0]
 8009098:	4605      	mov	r5, r0
 800909a:	b911      	cbnz	r1, 80090a2 <sbrk_aligned+0x12>
 800909c:	f000 f8ac 	bl	80091f8 <_sbrk_r>
 80090a0:	6030      	str	r0, [r6, #0]
 80090a2:	4621      	mov	r1, r4
 80090a4:	4628      	mov	r0, r5
 80090a6:	f000 f8a7 	bl	80091f8 <_sbrk_r>
 80090aa:	1c43      	adds	r3, r0, #1
 80090ac:	d00a      	beq.n	80090c4 <sbrk_aligned+0x34>
 80090ae:	1cc4      	adds	r4, r0, #3
 80090b0:	f024 0403 	bic.w	r4, r4, #3
 80090b4:	42a0      	cmp	r0, r4
 80090b6:	d007      	beq.n	80090c8 <sbrk_aligned+0x38>
 80090b8:	1a21      	subs	r1, r4, r0
 80090ba:	4628      	mov	r0, r5
 80090bc:	f000 f89c 	bl	80091f8 <_sbrk_r>
 80090c0:	3001      	adds	r0, #1
 80090c2:	d101      	bne.n	80090c8 <sbrk_aligned+0x38>
 80090c4:	f04f 34ff 	mov.w	r4, #4294967295
 80090c8:	4620      	mov	r0, r4
 80090ca:	bd70      	pop	{r4, r5, r6, pc}
 80090cc:	20000464 	.word	0x20000464

080090d0 <_malloc_r>:
 80090d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80090d4:	1ccd      	adds	r5, r1, #3
 80090d6:	f025 0503 	bic.w	r5, r5, #3
 80090da:	3508      	adds	r5, #8
 80090dc:	2d0c      	cmp	r5, #12
 80090de:	bf38      	it	cc
 80090e0:	250c      	movcc	r5, #12
 80090e2:	2d00      	cmp	r5, #0
 80090e4:	4607      	mov	r7, r0
 80090e6:	db01      	blt.n	80090ec <_malloc_r+0x1c>
 80090e8:	42a9      	cmp	r1, r5
 80090ea:	d905      	bls.n	80090f8 <_malloc_r+0x28>
 80090ec:	230c      	movs	r3, #12
 80090ee:	603b      	str	r3, [r7, #0]
 80090f0:	2600      	movs	r6, #0
 80090f2:	4630      	mov	r0, r6
 80090f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80090f8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80091cc <_malloc_r+0xfc>
 80090fc:	f000 f868 	bl	80091d0 <__malloc_lock>
 8009100:	f8d8 3000 	ldr.w	r3, [r8]
 8009104:	461c      	mov	r4, r3
 8009106:	bb5c      	cbnz	r4, 8009160 <_malloc_r+0x90>
 8009108:	4629      	mov	r1, r5
 800910a:	4638      	mov	r0, r7
 800910c:	f7ff ffc0 	bl	8009090 <sbrk_aligned>
 8009110:	1c43      	adds	r3, r0, #1
 8009112:	4604      	mov	r4, r0
 8009114:	d155      	bne.n	80091c2 <_malloc_r+0xf2>
 8009116:	f8d8 4000 	ldr.w	r4, [r8]
 800911a:	4626      	mov	r6, r4
 800911c:	2e00      	cmp	r6, #0
 800911e:	d145      	bne.n	80091ac <_malloc_r+0xdc>
 8009120:	2c00      	cmp	r4, #0
 8009122:	d048      	beq.n	80091b6 <_malloc_r+0xe6>
 8009124:	6823      	ldr	r3, [r4, #0]
 8009126:	4631      	mov	r1, r6
 8009128:	4638      	mov	r0, r7
 800912a:	eb04 0903 	add.w	r9, r4, r3
 800912e:	f000 f863 	bl	80091f8 <_sbrk_r>
 8009132:	4581      	cmp	r9, r0
 8009134:	d13f      	bne.n	80091b6 <_malloc_r+0xe6>
 8009136:	6821      	ldr	r1, [r4, #0]
 8009138:	1a6d      	subs	r5, r5, r1
 800913a:	4629      	mov	r1, r5
 800913c:	4638      	mov	r0, r7
 800913e:	f7ff ffa7 	bl	8009090 <sbrk_aligned>
 8009142:	3001      	adds	r0, #1
 8009144:	d037      	beq.n	80091b6 <_malloc_r+0xe6>
 8009146:	6823      	ldr	r3, [r4, #0]
 8009148:	442b      	add	r3, r5
 800914a:	6023      	str	r3, [r4, #0]
 800914c:	f8d8 3000 	ldr.w	r3, [r8]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d038      	beq.n	80091c6 <_malloc_r+0xf6>
 8009154:	685a      	ldr	r2, [r3, #4]
 8009156:	42a2      	cmp	r2, r4
 8009158:	d12b      	bne.n	80091b2 <_malloc_r+0xe2>
 800915a:	2200      	movs	r2, #0
 800915c:	605a      	str	r2, [r3, #4]
 800915e:	e00f      	b.n	8009180 <_malloc_r+0xb0>
 8009160:	6822      	ldr	r2, [r4, #0]
 8009162:	1b52      	subs	r2, r2, r5
 8009164:	d41f      	bmi.n	80091a6 <_malloc_r+0xd6>
 8009166:	2a0b      	cmp	r2, #11
 8009168:	d917      	bls.n	800919a <_malloc_r+0xca>
 800916a:	1961      	adds	r1, r4, r5
 800916c:	42a3      	cmp	r3, r4
 800916e:	6025      	str	r5, [r4, #0]
 8009170:	bf18      	it	ne
 8009172:	6059      	strne	r1, [r3, #4]
 8009174:	6863      	ldr	r3, [r4, #4]
 8009176:	bf08      	it	eq
 8009178:	f8c8 1000 	streq.w	r1, [r8]
 800917c:	5162      	str	r2, [r4, r5]
 800917e:	604b      	str	r3, [r1, #4]
 8009180:	4638      	mov	r0, r7
 8009182:	f104 060b 	add.w	r6, r4, #11
 8009186:	f000 f829 	bl	80091dc <__malloc_unlock>
 800918a:	f026 0607 	bic.w	r6, r6, #7
 800918e:	1d23      	adds	r3, r4, #4
 8009190:	1af2      	subs	r2, r6, r3
 8009192:	d0ae      	beq.n	80090f2 <_malloc_r+0x22>
 8009194:	1b9b      	subs	r3, r3, r6
 8009196:	50a3      	str	r3, [r4, r2]
 8009198:	e7ab      	b.n	80090f2 <_malloc_r+0x22>
 800919a:	42a3      	cmp	r3, r4
 800919c:	6862      	ldr	r2, [r4, #4]
 800919e:	d1dd      	bne.n	800915c <_malloc_r+0x8c>
 80091a0:	f8c8 2000 	str.w	r2, [r8]
 80091a4:	e7ec      	b.n	8009180 <_malloc_r+0xb0>
 80091a6:	4623      	mov	r3, r4
 80091a8:	6864      	ldr	r4, [r4, #4]
 80091aa:	e7ac      	b.n	8009106 <_malloc_r+0x36>
 80091ac:	4634      	mov	r4, r6
 80091ae:	6876      	ldr	r6, [r6, #4]
 80091b0:	e7b4      	b.n	800911c <_malloc_r+0x4c>
 80091b2:	4613      	mov	r3, r2
 80091b4:	e7cc      	b.n	8009150 <_malloc_r+0x80>
 80091b6:	230c      	movs	r3, #12
 80091b8:	603b      	str	r3, [r7, #0]
 80091ba:	4638      	mov	r0, r7
 80091bc:	f000 f80e 	bl	80091dc <__malloc_unlock>
 80091c0:	e797      	b.n	80090f2 <_malloc_r+0x22>
 80091c2:	6025      	str	r5, [r4, #0]
 80091c4:	e7dc      	b.n	8009180 <_malloc_r+0xb0>
 80091c6:	605b      	str	r3, [r3, #4]
 80091c8:	deff      	udf	#255	; 0xff
 80091ca:	bf00      	nop
 80091cc:	20000460 	.word	0x20000460

080091d0 <__malloc_lock>:
 80091d0:	4801      	ldr	r0, [pc, #4]	; (80091d8 <__malloc_lock+0x8>)
 80091d2:	f000 b84b 	b.w	800926c <__retarget_lock_acquire_recursive>
 80091d6:	bf00      	nop
 80091d8:	200005a4 	.word	0x200005a4

080091dc <__malloc_unlock>:
 80091dc:	4801      	ldr	r0, [pc, #4]	; (80091e4 <__malloc_unlock+0x8>)
 80091de:	f000 b846 	b.w	800926e <__retarget_lock_release_recursive>
 80091e2:	bf00      	nop
 80091e4:	200005a4 	.word	0x200005a4

080091e8 <memset>:
 80091e8:	4402      	add	r2, r0
 80091ea:	4603      	mov	r3, r0
 80091ec:	4293      	cmp	r3, r2
 80091ee:	d100      	bne.n	80091f2 <memset+0xa>
 80091f0:	4770      	bx	lr
 80091f2:	f803 1b01 	strb.w	r1, [r3], #1
 80091f6:	e7f9      	b.n	80091ec <memset+0x4>

080091f8 <_sbrk_r>:
 80091f8:	b538      	push	{r3, r4, r5, lr}
 80091fa:	4d06      	ldr	r5, [pc, #24]	; (8009214 <_sbrk_r+0x1c>)
 80091fc:	2300      	movs	r3, #0
 80091fe:	4604      	mov	r4, r0
 8009200:	4608      	mov	r0, r1
 8009202:	602b      	str	r3, [r5, #0]
 8009204:	f7f9 f950 	bl	80024a8 <_sbrk>
 8009208:	1c43      	adds	r3, r0, #1
 800920a:	d102      	bne.n	8009212 <_sbrk_r+0x1a>
 800920c:	682b      	ldr	r3, [r5, #0]
 800920e:	b103      	cbz	r3, 8009212 <_sbrk_r+0x1a>
 8009210:	6023      	str	r3, [r4, #0]
 8009212:	bd38      	pop	{r3, r4, r5, pc}
 8009214:	200005a0 	.word	0x200005a0

08009218 <__errno>:
 8009218:	4b01      	ldr	r3, [pc, #4]	; (8009220 <__errno+0x8>)
 800921a:	6818      	ldr	r0, [r3, #0]
 800921c:	4770      	bx	lr
 800921e:	bf00      	nop
 8009220:	20000058 	.word	0x20000058

08009224 <__libc_init_array>:
 8009224:	b570      	push	{r4, r5, r6, lr}
 8009226:	4d0d      	ldr	r5, [pc, #52]	; (800925c <__libc_init_array+0x38>)
 8009228:	4c0d      	ldr	r4, [pc, #52]	; (8009260 <__libc_init_array+0x3c>)
 800922a:	1b64      	subs	r4, r4, r5
 800922c:	10a4      	asrs	r4, r4, #2
 800922e:	2600      	movs	r6, #0
 8009230:	42a6      	cmp	r6, r4
 8009232:	d109      	bne.n	8009248 <__libc_init_array+0x24>
 8009234:	4d0b      	ldr	r5, [pc, #44]	; (8009264 <__libc_init_array+0x40>)
 8009236:	4c0c      	ldr	r4, [pc, #48]	; (8009268 <__libc_init_array+0x44>)
 8009238:	f000 f81a 	bl	8009270 <_init>
 800923c:	1b64      	subs	r4, r4, r5
 800923e:	10a4      	asrs	r4, r4, #2
 8009240:	2600      	movs	r6, #0
 8009242:	42a6      	cmp	r6, r4
 8009244:	d105      	bne.n	8009252 <__libc_init_array+0x2e>
 8009246:	bd70      	pop	{r4, r5, r6, pc}
 8009248:	f855 3b04 	ldr.w	r3, [r5], #4
 800924c:	4798      	blx	r3
 800924e:	3601      	adds	r6, #1
 8009250:	e7ee      	b.n	8009230 <__libc_init_array+0xc>
 8009252:	f855 3b04 	ldr.w	r3, [r5], #4
 8009256:	4798      	blx	r3
 8009258:	3601      	adds	r6, #1
 800925a:	e7f2      	b.n	8009242 <__libc_init_array+0x1e>
 800925c:	080092b0 	.word	0x080092b0
 8009260:	080092b0 	.word	0x080092b0
 8009264:	080092b0 	.word	0x080092b0
 8009268:	080092b4 	.word	0x080092b4

0800926c <__retarget_lock_acquire_recursive>:
 800926c:	4770      	bx	lr

0800926e <__retarget_lock_release_recursive>:
 800926e:	4770      	bx	lr

08009270 <_init>:
 8009270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009272:	bf00      	nop
 8009274:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009276:	bc08      	pop	{r3}
 8009278:	469e      	mov	lr, r3
 800927a:	4770      	bx	lr

0800927c <_fini>:
 800927c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800927e:	bf00      	nop
 8009280:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009282:	bc08      	pop	{r3}
 8009284:	469e      	mov	lr, r3
 8009286:	4770      	bx	lr
